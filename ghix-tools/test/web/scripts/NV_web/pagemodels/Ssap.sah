_includeOnce("JenkinsAndDBSetUp.sah");
_includeOnce("AgentIcon.sah");
// Helper object
//_includeOnce("Apply.sah");
//_includeOnce("AgentIcon.sah");
//_includeOnce("Indportal.sah");
//_includeOnce("Signup.sah");
_includeOnce("Utils.sah");
//_includeOnce("JenkinsAndDBSetUp.sah");

// Constants
var $SSAP_SSN_REASON_MENU_LENGTH = 5;
var $Ssap = true;
var $globalSSN;
var $eventNumber="";
var $eventName;
var $eventDate="";
var $sepDenied=false;
var $eventReported="";
var $ssapPeople = [];
var $addingPerson = false;
var $editingContactInfo = false;
var $editingPrimaryContactInfo = false;
var $editingPerson = false;
var $ssapPageIndex;
var $currentPerson;
var $numberOfAdults;
var $numberOfChildren;
var $ssapEmail;
var $ssapPreferredPhone;
var $ssapSecondPhone;
var $ssapExt;
var $ssapDoB;
var $ssapHomeAddress1;
var $ssapHomeAddress2;
var $ssapHomeCity;
var $ssapHomeZip;
var $ssapMailingAddress1;
var $ssapMailingAddress2;
var $ssapMailingCity;
var $ssapMailingZip;
var $ssapSpoken;
var $ssapWritten;
var $ssapCommunication;
var $goToMyDashboard = _button("eligibilityDetailsGoTo");
var $submitApplication = _button("/Submit Application/i");
// Accessors
// Universal
var $ssapVerificationArray = [verifySSAPPage1, verifySSAPPage2, verifySSAPPage3, verifySSAPPage4, verifySSAPPage5, verifySSAPPage6, verifySSAPPage7,
							  verifySSAPPage8, verifySSAPPage9, verifySSAPPage10, verifySSAPPage11, verifySSAPPage12, verifySSAPPage13, 
							  verifySSAPPage14, verifySSAPPage15, verifySSAPPage16, verifySSAPPage17, verifySSAPPage18];
var $ssapBack = _button("Back");
//_link("prevBtn");
var $ssapSave = _button("Save & Continue");
//_link("saveBtn");
//nv var $ssapContinue =_link("contBtn");
var $ssapContinue =_button("Continue");
var $ssapContinue1=_submit("Continue[2]");
var $ssapSaveAndContinueButton = _button("Save & Continue");
var $ssapSaveButton = _button("Save");
var $ssapContinueButton  = _button("Continue");

// Steps menu
var $ssapStepsHeader = _heading3("Steps");
//_heading4("Steps");
var $ssapStepsStartYourApplication = _link("Start Your ApplicationBefore We BeginGet ReadyPrimary Contact InformationHelp applying for coverageApplicantsAbout Your HouseholdSummary");
var $ssapStepsFamilyAndHousehold = _link("/Family and Household/");
var $ssapStepsReviewAndSign = _link("/Review and Sign/");
//var $ssapStepover26DependentAlert=_div("over26DependentAlert");
var $ssapStepsAccessors = [$ssapStepsHeader, $ssapStepsStartYourApplication, $ssapStepsFamilyAndHousehold, $ssapStepsReviewAndSign];

// Page 1
var $ssapPage1Header = _heading1("Before We Begin");
var $ssapPage1PrivacyHeader = _heading3("Privacy of Your Information");
//_heading4("Privacy of Your Information");
/*var $ssapPage1PrivacyCheckbox = _checkbox("I agree to have my information used and retrieved from data sources for this application. " +
"I have consent from all the people that will be included on the application for their information " +
"to be retrieved and used from the data sources mentioned above.");*/
//nv var $ssapPage1PrivacyCheckbox= _checkbox("acceptanceCB");
var $ssapPage1PrivacyCheckbox = _label("usa-checkbox__label gi-checkbox__label undefined");
var $ssapPage1Accessors = [$ssapPage1Header, $ssapPage1PrivacyHeader, $ssapPage1PrivacyCheckbox];

// Page 2
var $ssapPage2Header = _heading1("Get Ready")//_heading2("Get Ready to Start Your Application");//_span("Get Ready to Start Your Application");
	var $ssapPage2Welcome = _strong("Welcome to Nevada Health Link.");
//_strong("Welcome to Your Health Idaho. Here you'll be able to shop for health insurance for yourself or anyone in your household.");
var $ssapPage2Gather = _paragraph("usa-alert__text gi-alert__info__text");
//_paragraph("Before you start, please take a moment now to gather the information listed below.");
var $ssapPage2Required = _paragraph("All fields on this application marked with an asterisk (*) are required unless otherwise indicated.");
//_emphasis("All fields on this application marked with an asterisk (*) are required unless otherwise indicated.");
var $ssapPage2InfoHeader = _paragraph("For anyone you want to insure, you will need:");
//_strong("For anyone you want to insure, you will need:");
var $ssapPage2Info = _listItem("Names");
//_list("checklist gutter10");
var $ssapPage2Info1 = _listItem("Addresses");
var $ssapPage2Info2 = _listItem("Social Security Number")
	var $ssapPage2Info3 = _listItem("Birthdates")
		//var $ssapPage2Info4 = _listItem("Document numbers for anyone with eligible Immigration status Immigration status Anyone who is seeking coverage may be required to provide documents to prove ability to enroll in coverage");
		var $ssapPage2Info4 = _listItem("Document numbers for anyone with eligible Immigration statusAnyone who is seeking coverage may be required to provide documents to prove ability to enroll in coverage");


var $ssapPage2Accessors = [$ssapPage2Header, $ssapPage2Welcome, $ssapPage2Gather, $ssapPage2Required, $ssapPage2InfoHeader, $ssapPage2Info,$ssapPage2Info1,$ssapPage2Info2,$ssapPage2Info3,$ssapPage2Info4];

// Page 3
var $ssapPage3Header = _heading1("Primary Contact Information");
//_heading2("Primary Contact Information"); //_span("Primary Contact Information");

var $ssapHomeAddressAddress1;
var $ssapHomeAddressCity;

// Primary Contact Name
var $ssapPage3PrimaryContactNameHeader = _heading3("Primary Contact Name");
//_heading4("Primary Contact Name");
var $ssapPage3PrimaryContactNameFirstName=_textbox("firstName");
var $ssapPage3PrimaryContactNameMiddleName =_textbox("middleName");
var $ssapPage3PrimaryContactNameLastName =_textbox("lastName");
var $ssapPage3PrimaryContactNameSuffixLabel = _label("Suffix");
var $ssapPage3PrimaryContactNameSuffix = _select("suffix");

var $ssapPage3PrimaryContactNameDoB = _span("MonthDayYear")
	//_div("usa-width-one-half usa-date-of-birth")
	var $ssapPage3PrimaryContactNameEmailAddress=_textbox("emailAddress");
var $ssapPage3PrimaryContactNameAccessors = [$ssapPage3PrimaryContactNameHeader, $ssapPage3PrimaryContactNameFirstName, 
											 $ssapPage3PrimaryContactNameMiddleName, $ssapPage3PrimaryContactNameLastName, 
											 $ssapPage3PrimaryContactNameSuffixLabel, $ssapPage3PrimaryContactNameSuffix,
											 $ssapPage3PrimaryContactNameDoB, $ssapPage3PrimaryContactNameEmailAddress];

// Primary Contact Home Address
var $ssapPage3PrimaryContactHomeAddressHeader = _heading3("Primary Contact Home Address");
//_heading4("Primary Contact Home Address");
var $ssapPage3PrimaryContactHomeAddressAddress1 = _textbox("Address 1");
//var $ssapPage3PrimaryContactHomeAddressAddress1 =_textbox("home_addressLine1");
var $ssapPage3PrimaryContactHomeAddressAddress2 = _textbox("Address 2");
//var $ssapPage3PrimaryContactHomeAddressAddress2=_textbox("home_addressLine2");
var $ssapPage3PrimaryContactHomeAddressCity = _textbox("city");
//var $ssapPage3PrimaryContactHomeAddressCity =_textbox("home_primary_city");
var $ssapPage3PrimaryContactHomeAddressZip = _textbox("Zip");
//var $ssapPage3PrimaryContactHomeAddressZip =_textbox("home_primary_zip");
var $ssapPage3PrimaryContactHomeAddressState = _select("state");
var $ssapPage3PrimaryContactHomeAddressCounty = _select("countyCode");
var $ssapPage3PrimaryContactHomeAddressAccessors = [$ssapPage3PrimaryContactHomeAddressHeader, $ssapPage3PrimaryContactHomeAddressAddress1,
													$ssapPage3PrimaryContactHomeAddressAddress2, $ssapPage3PrimaryContactHomeAddressCity,
													$ssapPage3PrimaryContactHomeAddressZip, $ssapPage3PrimaryContactHomeAddressState,
													$ssapPage3PrimaryContactHomeAddressCounty];

// Primary Contact Mailing Address
var $ssapPage3PrimaryContactMailingAddressHeader = _heading3("Primary Contact Mailing Address");
//_heading4("Primary Contact Mailing Address");
//nv var $ssapPage3PrimaryContactMailingAddressSame = _checkbox("mailingAddressIndicator");
var $ssapPage3PrimaryContactMailingAddressSame = _label("Check if same as Primary Contact Home Address")
	var $ssapPage3PrimaryContactMailingAddressAddress1 = _textbox("Address 1[1]");
//var $ssapPage3PrimaryContactMailingAddressAddress1=_textbox("mailing_addressLine1");
var $ssapPage3PrimaryContactMailingAddressAddress2 = _textbox("Address 2[1]");
//var $ssapPage3PrimaryContactMailingAddressAddress2=_textbox("mailing_addressLine2");
var $ssapPage3PrimaryContactMailingAddressCity = _textbox("City[1]");
//var $ssapPage3PrimaryContactMailingAddressCity=_textbox("mailing_primary_city");
var $ssapPage3PrimaryContactMailingAddressZip = _textbox("Zip[1]");
//var $ssapPage3PrimaryContactMailingAddressZip=_textbox("mailing_primary_zip");
var $ssapPage3PrimaryContactMailingAddressState = _select("state[1]");
var $ssapPage3PrimaryContactMailingAddressAccessors = [$ssapPage3PrimaryContactMailingAddressHeader, $ssapPage3PrimaryContactMailingAddressSame,
													   $ssapPage3PrimaryContactMailingAddressAddress1, $ssapPage3PrimaryContactMailingAddressAddress2,
													   $ssapPage3PrimaryContactMailingAddressCity, $ssapPage3PrimaryContactMailingAddressZip,
													   $ssapPage3PrimaryContactMailingAddressState];

// Primary Contact Phone
var $ssapPage3PrimaryContactPhoneHeader = _heading3("Primary Contact Phone");
//_heading4("Primary Contact Phone");
var $ssapPage3PrimaryContactPhoneMobilePhoneNumber = _textbox("Mobile Phone Number");
//var $ssapPage3PrimaryContactPhoneMobilePhoneNumber = _textbox("first_phoneNo");
var $ssapPage3PrimaryContactPhoneHomePhoneNumber = _textbox("Home Phone Number");
//var $ssapPage3PrimaryContactPhoneHomePhoneNumber= _textbox("first_homePhoneNo");
//var $ssapPage3PrimaryContactPhoneHomePhoneNumberExtension = _textbox("Home phone extension");
var $ssapPage3PrimaryContactPhoneHomePhoneNumberExtension=_textbox("phoneExtension");
var $ssapPage3PrimaryContactPhoneAccessors = [$ssapPage3PrimaryContactPhoneHeader, $ssapPage3PrimaryContactPhoneMobilePhoneNumber,
											  $ssapPage3PrimaryContactPhoneHomePhoneNumber, $ssapPage3PrimaryContactPhoneHomePhoneNumber,
											  $ssapPage3PrimaryContactPhoneHomePhoneNumberExtension];

// Primary Contact Preferences
var $ssapPage3PrimaryContactPreferencesHeader = _heading3("Primary Contact Preferences")//_heading4("Primary Contact Preferences");
	//var $ssapPage3PrimaryContactPreferencesSpokenLanguage = _select("preffered_spoken_language");
	var $ssapPage3PrimaryContactPreferencesSpokenLanguage=  _select("preferredSpokenLanguage");
var $ssapPage3PrimaryContactPreferencesWrittenLanguage = _select("preferredWrittenLanguage");
//var $ssapPage3PrimaryContactPreferencesEmail = _radio("Email");
//var $ssapPage3PrimaryContactPreferencesEmail=  _label("Email");
var $ssapPage3PaperlessCommunication = _label("page_02_contactPreferences_preferredContactMethod_label0");
var $ssapPage3PostalMailCommunication = _label("page_02_contactPreferences_preferredContactMethod_label1");
var $ssapPage3GoPaperless1095Form = _label("page_02_contactPreferences_paperless1095_label0");
var $ssapPage3PostalMail1095Form = _label("page_02_contactPreferences_paperless1095_label1");
//var $ssapPage3PrimaryContactPreferencesPostalMail = _label("Postal Mail")
//var $ssapPage3PrimaryContactPreferencesPostalMail = _radio("inTheEmail");
var $ssapPage3PrimaryContactPreferencesAccessors = [$ssapPage3PrimaryContactPreferencesHeader, $ssapPage3PrimaryContactPreferencesSpokenLanguage,
													$ssapPage3PrimaryContactPreferencesWrittenLanguage, $ssapPage3PaperlessCommunication, $ssapPage3PostalMailCommunication, $ssapPage3GoPaperless1095Form, 
													$ssapPage3PostalMail1095Form];

// Page 4
var $ssapPage4Header = _heading1("Help applying for coverage");
//_heading1("Application Assistance");//_span("Application Assistance");

// Who is Helping You?
var $ssapPage4HelpingHeader = _heading3("Who is Helping you?");
//_heading4("Who is Helping you?");
var $ssapPage4HelpingParagraph =_fieldset("Is anyone helping you with this application?")
	var $ssapPage4HelpingSomeoneHelping = _label("Someone is helping me");
//var $ssapPage4HelpingSomeoneHelping = _radio("authorizedRepresentativeHelpYes");
//var $ssapPage4HelpingMyself = _radio("I am filling out this application for myself and/or my family");
//var $ssapPage4HelpingMyself = _radio("authorizedRepresentativeHelpNo");
var $ssapPage4HelpingMyself =_label("I am filling out this application for myself and/or my family");
var $ssapPage4HelpingAccessors = [$ssapPage4HelpingHeader, $ssapPage4HelpingParagraph, $ssapPage4HelpingSomeoneHelping, $ssapPage4HelpingMyself];

// Authorized Representative
//var $ssapPage4AuthorizedBullets = [_radio("displayAuthRepresentativeInfo"), _radio("hideAuthRepresentativeInfo")];
var $ssapPage4AuthorizedBullets = [_label("Yes"), _label("No")];
// Authorized Representative Contact Information
var $ssapPage4AuthorizedFirstName = _textbox("firstName");
var $ssapPage4AuthorizedMiddleName = _textbox("middleName");
var $ssapPage4AuthorizedLastName = _textbox("lastName");
var $ssapPage4AuthorizedSuffix = _select("suffix");
var $ssapPage4AuthorizedEmail = _textbox("emailAddress");
var $ssapPage4AuthorizedContactAccessors = [$ssapPage4AuthorizedFirstName, $ssapPage4AuthorizedMiddleName, $ssapPage4AuthorizedLastName, $ssapPage4AuthorizedSuffix, $ssapPage4AuthorizedEmail];

// Authorized Representative Home Address
var $ssapPage4AuthorizedAddress1 = _textbox("streetAddress1");
var $ssapPage4AuthorizedAddress2 = _textbox("streetAddress2");
var $ssapPage4AuthorizedCity = _textbox("city");
var $ssapPage4AuthorizedZip = _textbox("postalCode");
var $ssapPage4AuthorizedState = _select("state");
var $ssapPage4AuthorizedHomeAccessors = [$ssapPage4AuthorizedAddress1, $ssapPage4AuthorizedAddress2, $ssapPage4AuthorizedCity, $ssapPage4AuthorizedZip, $ssapPage4AuthorizedState];

// Authorized Representative Phone
var $ssapPage4AuthorizedMobile = _textbox("appscr54_phoneNumber");
var $ssapPage4AuthorizedHome = _textbox("appscr54_homePhoneNumber");
var $ssapPage4AuthorizedHomeExt = _textbox("appscr54_homeExt");
var $ssapPage4AuthorizedWork = _textbox("appscr54_workPhoneNumber");
var $ssapPage4AuthorizedWorkExt = _textbox("appscr54_workExt");
var $ssapPage4AuthorizedPhoneAccessors = [$ssapPage4AuthorizedMobile, $ssapPage4AuthorizedHome, $ssapPage4AuthorizedHomeExt, $ssapPage4AuthorizedWork, $ssapPage4AuthorizedWorkExt];

// Page 5
var $ssapPage5Header = _span("Applicants");

// Who needs health insurance?
var $ssapPage5WhoHeader = _heading3("Who needs health insurance?");
//_heading4("/Who needs health insurance?/");
var $ssapPage5WhoMeOnly = _label("page_05_applyingForhouseHold_label0");
var $ssapPage5WhoMeAndOthers =_label("page_05_applyingForhouseHold_label1");
var $ssapPage5WhoOthers = _label("page_05_applyingForhouseHold_label2");
//var $ssapPage5WhoMeOnly = _radio("ApplyingForhouseHoldOnly");
//var $ssapPage5WhoMeAndOthers = _radio("ApplyingForhouseHoldMember");
//var $ssapPage5WhoOthers = _radio("ApplyingForhouseHoldOther");
var $ssapPage5WhoAccessors = [$ssapPage5WhoHeader, $ssapPage5WhoMeOnly, $ssapPage5WhoMeAndOthers, $ssapPage5WhoOthers];

// Page 6

var $ssapPage6Header = _heading1("About Your Household");
//var $ssapPage6AddMemberButton = _button("Add Member");
var $ssapPage6AddMemberButton = _button("Add person");
// Person Information
var $ssapPage6InfoFirstName = _textbox("firstName");
//_textbox("appscr57FirstName1");
var $ssapPage6InfoMiddleName = _textbox("middleName");
//_textbox("appscr57MiddleName1");
var $ssapPage6InfoLastName = _textbox("lastName");
//_textbox("appscr57LastName1");
var $ssapPage6InfoSuffix = _select("suffix");
//_select("appscr57Suffix1");
var $ssapPage6InfoDoB = _span("MonthDayYear")
	//_textbox("appscr57DOB1");
	var $ssapPage6InfoSeekingCoverage = _label("Are you seeking coverage?");
//_checkbox("appscr57checkseekingcoverage1");
//var $ssapPage6InfoAccessors = [$ssapPage6InfoFirstName, $ssapPage6InfoMiddleName, $ssapPage6InfoLastName, $ssapPage6InfoSuffix,
//							   $ssapPage6InfoDoB, $ssapPage6InfoSeekingCoverage];

// Page 7
var $ssapPage7Header = _heading1("/Summary/");
//_heading2("Household Summary");// _span("Summary");

// These are the people in your household
var $ssapPage7PeopleHeader = _heading3("Household Members");
//_heading3("These are the people in your household");
//var $ssapPage7PeopleAdd = _span("Add Another Person");//_button("Add Another Person");
var $ssapPage7MemberAddressHeading = _heading3("Household members addresses");

var $ssapPage7PeopleAccessors = [$ssapPage7PeopleHeader, $ssapPage7MemberAddressHeading];


// Page 8
var $ssapPage8Header = _heading1("Get Ready");
//_heading2("Get Ready for Family and Household");
var $ssapPage8AlertText = _paragraph("usa-alert__text gi-alert__info__text");
var $ssapPage8SaveWarning =_paragraph("usa-alert__text gi-alert__info__text");
//_strong("If you step away from this application at any time, please be sure to save your progress. You can save your application at any time by clicking the \"Save\" button.");
var $ssapPage8AlertMandatoryText = _paragraph("All fields on this Family & Household section marked with an asterisk (*) are required unless otherwise indicated.")

	var $ssapPage8Checklist = _listItem("Social Security Number");
//_list("checklist gutter10[1]");
var $ssapPage8ImmigrationList = _listItem("Document numbers for anyone with eligible Immigration statusAnyone who is seeking coverage may be required to provide documents to prove ability to enroll in coverage")
	var $ssapPage8Accessors = [$ssapPage8Header, $ssapPage8SaveWarning, $ssapPage8Checklist,$ssapPage8AlertText, $ssapPage8AlertMandatoryText, $ssapPage8ImmigrationList];

// Page 9
var $ssapPage9Header = _heading1("Personal Information");
//_heading2("/Personal Information/");//_span("Personal Information");
var $ssapPage9Name;
//var $ssapPage9FamilyHeader = _heading4("Family and Household");

// Gender
var $ssapPage9GenderHeader = _fieldset("/Gender/");
//_paragraph("/Gender/");
var $ssapPage9GenderBullets = [_label("Male"), _label("Female")];
//[_radio("appscr61GenderMaleID"), _radio("appscr61GenderFemaleID")];
var $ssapPage9GenderAccessors = [$ssapPage9GenderHeader];
$ssapPage9GenderAccessors.push.apply($ssapPage9GenderAccessors, $ssapPage9GenderBullets);

// SSN
var $ssapPage9SSNHeader;
//var $ssapPage9SSNBullets =[_label("Yes"), _label("No")];
// [_radio("socialSecurityCardHolderIndicatorYes"), _radio("socialSecurityCardHolderIndicatorNo")];
//var $ssapPage9SSNLink = //_link("www.ssa.gov/ssnumber");
//var $ssapPage9SSN = _textbox("Social Security Number");
var $ssapPage9SSN = _textbox("socialSecurityNumber");
var $ssapPage9SSNSameHeader;
var $ssapPage9SSNSameBullets = [_label("Yes"), _label("No")];
//[_radio("fnlnsSameIndicatorYes"), _radio("fnlnsSameIndicatorNo")];
var $ssapPage9SSNNotSameHeader;
var $ssapPage9SSNNotSameFirstName = _textbox("firstNameOnSSNCard");
var $ssapPage9SSNNotSameMiddleName = _textbox("middleNameOnSSNCard");
var $ssapPage9SSNNotSameLastName = _textbox("lastNameOnSSNCard");
//var $ssapPage9SSNNotSameSuffix = _select("suffix");
var $ssapPage9SSNNotSameSuffix = _select("suffixOnSSNCard");
//var $ssapPage9NoSSNHeader = _heading3("If no Social Security Number is available please select from the following explanations");
//var $ssapPage9NoSSNReason = _select("reasonableExplanationForNoSSN");

// Page 10
var $ssapPage10Header = _heading1("/Immigration Status/");
//_span("Citizenship/Immigration Status");
var $ssapPage10Name;
//var $ssapPage10FamilyHeader = _heading4("Family and Household");//_heading4("Family and Household[2]");

// Is ______ ______ a U.S. citizen or U.S. national?
var $ssapPage10CitizenshipHeader;
var $ssapPage10CitizenshipBullets = [_label("Yes"), _label("No")];
//[_radio("UScitizenIndicatorYes"), _radio("UScitizenIndicatorNo")];

// Is _____ ________ a naturalized citizen?
var $ssapPage10NaturalizedHeader;
var $ssapPage10NaturalizedBullets = [_label("Yes[1]"), _label("No[1]")];
//[_radio("naturalizedCitizenshipIndicatorYes"), _radio("naturalizedCitizenshipIndicatorNo")];

// Document Type
var $ssapPage10DocumentHeader =_div("Please select a document typeNaturalization Certificate");
//_heading3("Document Type (select one)");//_strong("Document Type");
//var $ssapPage10DocumentBullets = [_radio("naturalizedCitizenNaturalizedIndicator"), _radio("naturalizedCitizenNaturalizedIndicator2")];
var $ssapPage10DocumentBullets = [_label("Naturalization Certificate"),_label("Certificate of Citizenship")]
	var $ssapPage10DocumentAccessors = [$ssapPage10DocumentHeader];
$ssapPage10DocumentAccessors.push.apply($ssapPage10DocumentAccessors, $ssapPage10DocumentBullets);

// Naturalization Certificate
var $ssapPage10NaturalizationAlienNumber = _textbox("alienNumber");
//_textbox("naturalizationCertificateAlienNumber");//_textbox("naturalizationAlignNumber");
var $ssapPage10NaturalizationNumber = _textbox("sevisId");
//_textbox("naturalizationCertificateNaturalizationNumber");//_textbox("naturalizationCertificateNumber");
var $ssapPage10NaturalizationAccessors = [$ssapPage10NaturalizationAlienNumber, $ssapPage10NaturalizationNumber]

	// Certificate of Citizenship
	var $ssapPage10CertificateAlienNumber =  _textbox("alienNumber");
//_textbox("naturalizationCertificateAlienNumber[1]");//_textbox("citizenshipAlignNumber");
var $ssapPage10CertificateNumber = _textbox("sevisId");
//_textbox("naturalizationCertificateNaturalizationNumber[1]");//_textbox("appscr62p1citizenshipCertificateNumber");
var $ssapPage10CertificateAccessors = [$ssapPage10CertificateAlienNumber, $ssapPage10CertificateNumber];

// Immigration
var $ssapPage10Immigration;

// Document Type
var $ssapPage10DocTypeHeader = _div("/Please select a document type/");
/*var $ssapPage10DocTypeBullets = [_radio("permcarddetails"), _radio("tempcarddetails"), _radio("machinecarddetails"), _radio("empauthcarddetails"),
_radio("arrivaldeparturerecord"), _radio("arrivaldeprecordForeign"), _radio("ForeignppI94"),
_radio("rentrypermit"), _radio("refugeetraveldocI-571"), _radio("certificatenonimmigrantF1-Student-I20"),
_radio("certificatenonimmigrantJ1-Student-DS2019")];
*/
var $ssapPage10DocTypeBullets =[_label("Permanent Resident Card “Green Card”, I−551"), _label("Temporary I−551 Stamp (on passport or I−94, I−94A)"), 
								_label("Machine Readable Immigrant Visa (With Temporary I-551 Language)"), _label("Employment Authorization Card (EAD, I-766)"), 
								_label("Arrival/Departure Record (I-94, I-94A)"),_label("Arrival/Departure Record in Foreign Passport (I-94)"),_label("Foreign Passport"),
								_label("Reentry Permit (I-327)"),_label("Refugee Travel Document (I-571)"),_label("Certificate of Eligibility for Nonimmigrant (F-1) Student Status (I-20)"),_label("Certificate of Eligibility for Exchange Visitor (J-1) Status (DS2019)")]

	var $ssapPage10DocTypeAccessors = [$ssapPage10DocTypeHeader];
$ssapPage10DocTypeAccessors.push.apply($ssapPage10DocTypeAccessors, $ssapPage10DocTypeBullets);

// Perm Res Card
var $ssapPage10PermResCardAlienNumber = _textbox("alienNumber");
//_textbox("permcarddetailsAlignNumber");
var $ssapPage10PermResCardNumber = _textbox("cardNumber");
//_textbox("permcarddetailsppcardno");
var $ssapPage10PermResCardExpire = _span("MonthDayYear")
	//_textbox("permcarddetailsdateOfExp");
	var $ssapPage10PermResCardAccessors = [$ssapPage10PermResCardAlienNumber, $ssapPage10PermResCardNumber, $ssapPage10PermResCardExpire];

// Temp Stamp
var $ssapPage10TempStampAlienNumber = _textbox("alienNumber");
//_textbox("tempcarddetailsAlignNumber");
var $ssapPage10TempStampPassportNumber = _textbox("foreignPassportOrDocumentNumber");
//_textbox("tempcarddetailsppcardno");
var $ssapPage10TempStampCountry = _select("foreignPassportCountryOfIssuance")//_select("tempcarddetailsCounty");
	var $ssapPage10TempStampExpire = _span("MonthDayYear")
		//_textbox("tempcarddetailsPassportexpdate");
		var $ssapPage10TempStampAccessors = [$ssapPage10TempStampAlienNumber, $ssapPage10TempStampPassportNumber, $ssapPage10TempStampCountry,
											 $ssapPage10TempStampExpire];

// Visa
var $ssapPage10VisaAlienNumber = _textbox("alienNumber");
//_textbox("machinecarddetailsAlignNumber");
var $ssapPage10VisaPassportNumber = _textbox("foreignPassportOrDocumentNumber");
//_textbox("machinecarddetailsppcardno");
var $ssapPage10VisaCountry = _select("foreignPassportCountryOfIssuance");
//_select("machinecarddetailsCounty");
var $ssapPage10VisaExpire = _span("MonthDayYear")
	//_textbox("machinecarddetailsdateOfExp");
	var $ssapPage10VisaNumber = _textbox("visaNumber");
//_textbox("machinecarddetailsppvisano");
var $ssapPage10VisaAccessors = [$ssapPage10VisaAlienNumber, $ssapPage10VisaPassportNumber, $ssapPage10VisaCountry, $ssapPage10VisaExpire,
								$ssapPage10VisaNumber];

// Employment Card
var $ssapPage10EmploymentCardAlienNumber = _textbox("alienNumber");
//_textbox("empauthcarddetailsAlignNumber");
var $ssapPage10EmploymentCardNumber = _textbox("cardNumber");
//_textbox("empauthcarddetailsppcardno");
var $ssapPage10EmploymentCardExpire = _span("MonthDayYear")
	//_textbox("empauthcarddetailsdateOfExp");
	var $ssapPage10EmploymentCardAccessors = [$ssapPage10EmploymentCardAlienNumber, $ssapPage10EmploymentCardNumber, $ssapPage10EmploymentCardExpire];

// Arrival
var $ssapPage10ArrivalI94Number = _textbox("i94Number");
//_textbox("arrivaldeparturerecordI94no");
var $ssapPage10ArrivalIDNumber = _textbox("/SEVISId/i");
//_textbox("arrivaldeparturerecordSevisID");
var $ssapPage10ArrivalExpire = _span("MonthDayYear")
	//_textbox("arrivaldeparturerecordPassportexpdate");
	var $ssapPage10ArrivalAccessors = [$ssapPage10ArrivalI94Number, $ssapPage10ArrivalIDNumber, $ssapPage10ArrivalExpire];

// Arrival Foreign
var $ssapPage10ArrivalForeignI94Number = _textbox("i94Number");
//_textbox("arrivaldeprecordForeignI94no");
var $ssapPage10ArrivalForeignPassportNumber = _textbox("foreignPassportOrDocumentNumber");
//_textbox("arrivaldeprecordForeignppcardno");
var $ssapPage10ArrivalForeignCountry = _select("foreignPassportCountryOfIssuance");
//_select("arrivaldeprecordForeignCounty");
var $ssapPage10ArrivalForeignExpire = _span("MonthDayYear")//_textbox("arrivaldeprecordForeigndateOfExp");
	var $ssapPage10ArrivalForeignVisaNumber = _textbox("visaNumber");
//_textbox("arrivaldeprecordForeignppvisano");
var $ssapPage10ArrivalForeignIDNumber = _textbox("/SEVISId/i");
//_textbox("arrivaldeprecordForeignSevisID");
var $ssapPage10ArrivalForeignAccessors = [$ssapPage10ArrivalForeignI94Number, $ssapPage10ArrivalForeignPassportNumber, $ssapPage10ArrivalForeignCountry,
										  $ssapPage10ArrivalForeignExpire, $ssapPage10ArrivalForeignVisaNumber, $ssapPage10ArrivalForeignIDNumber];

// Notice
//var $ssapPage10NoticeAlienNumber = _textbox("NoticeOfActionAlignNumber");
//var $ssapPage10NoticeI94Number = _textbox("NoticeOfActionI94");
//var $ssapPage10NoticeAccessors = [$ssapPage10NoticeAlienNumber, $ssapPage10NoticeI94Number];

// Foreign Pass
//var $ssapPage10ForeignPassI94Number = _textbox("ForeignppI94");
var $ssapPage10ForeignPassI94Number = _textbox("i94Number");
//_textbox("ForeignppI94AlignNumber");
var $ssapPage10ForeignPassNumber = _textbox("foreignPassportOrDocumentNumber");
//_textbox("ForeignppI94ppcardno");
var $ssapPage10ForeignPassCountry = _select("foreignPassportCountryOfIssuance");
//_select("ForeignppI94County");
var $ssapPage10ForeignPassExpire = _span("MonthDayYear")
	//_textbox("ForeignppI94dateOfExp");
	var $ssapPage10ForeignPassIDNumber = _textbox("/SEVISId/i");
//_textbox("ForeignppI94SevisID");
var $ssapPage10ForeignPassAccessors = [$ssapPage10ForeignPassI94Number, $ssapPage10ForeignPassNumber, $ssapPage10ForeignPassCountry,
									   $ssapPage10ForeignPassExpire, $ssapPage10ForeignPassIDNumber];

// Reentry
var $ssapPage10ReentryAlienNumber = _textbox("alienNumber");
//_textbox("rentrypermitAlignNumber");
var $ssapPage10ReentryExpire = _span("MonthDayYear")
	//_textbox("rentrypermitdateOfExp");
	var $ssapPage10ReentryAccessors = [$ssapPage10ReentryAlienNumber, $ssapPage10ReentryExpire];

// Refugee
var $ssapPage10RefugeeAlienNumber = _textbox("alienNumber");
//_textbox("refugeetraveldocI-571AlignNumber");
var $ssapPage10RefugeeExpire = _span("MonthDayYear")
	//_textbox("refugeetraveldocI-571dateOfExp");
	var $ssapPage10RefugeeAccessors = [$ssapPage10RefugeeAlienNumber, $ssapPage10RefugeeExpire];

// Nonimmigrant
var $ssapPage10NonimmigrantIDNumber = _textbox("/SEVISId/i");
//_textbox("certificatenonimmigrantF1-Student-I20SevisID");
var $ssapPage10NonimmigrantI94Number = _textbox("i94Number");
//_textbox("certificatenonimmigrantF1-Student-I20I94no");
var $ssapPage10NonimmigrantPassportNumber = _textbox("foreignPassportOrDocumentNumber");
//_textbox("certificatenonimmigrantF1-Student-I20ppcardno");
var $ssapPage10NonimmigrantCountry = _select("foreignPassportCountryOfIssuance");
//_select("certificatenonimmigrantF1-Student-I20County");
var $ssapPage10NonimmigrantExpire = _span("MonthDayYear")
	//_textbox("certificatenonimmigrantF1-Student-I20dateOfExp");
	var $ssapPage10NonimmigrantAccessors = [$ssapPage10NonimmigrantIDNumber, $ssapPage10NonimmigrantI94Number, $ssapPage10NonimmigrantPassportNumber,
											$ssapPage10NonimmigrantCountry, $ssapPage10NonimmigrantExpire];

// Exchange
var $ssapPage10ExchangeIDNumber = _textbox("/SEVISId/i");
//_textbox("certificatenonimmigrantJ1-Student-DS2019SevisID");
var $ssapPage10ExchangeI94Number = _textbox("i94Number");
// _textbox("certificatenonimmigrantJ1-Student-DS2019I94no");
var $ssapPage10ExchangePassportNumber = _textbox("foreignPassportOrDocumentNumber");
//_textbox("certificatenonimmigrantJ1-Student-DS2019ppcardno");
var $ssapPage10ExchangeExpire = _span("MonthDayYear")
	//_textbox("certificatenonimmigrantJ1-Student-DS2019dateOfExp");
	var $ssapPage10ExchangeAccessors = [$ssapPage10ExchangeIDNumber, $ssapPage10ExchangeI94Number, $ssapPage10ExchangePassportNumber,
										$ssapPage10ExchangeExpire];

// Same name
var $ssapPage10SameNameHeader;
var $ssapPage10SameNameBullets = [_label("Yes[2]"),_label("No[2]")];
//[_radio("62Part2_UScitizenYes"), _radio("62Part2_UScitizen")];
var $ssapPage10SameNameFirstName = _textbox("firstName");
//_textbox("documentFirstName");
var $ssapPage10SameNameMiddleName = _textbox("middleName");
//_textbox("documentMiddleName");
var $ssapPage10SameNameLastName = _textbox("lastName");
//_textbox("documentLastName");
var $ssapPage10SameNameSuffix = _select("suffix");
//_select("documentSuffix");

// Documents
var $ssapPage10DocumentsHeader;
var $ssapPage10DocumentsList =[_label("Certification From U.S. Department of Health and Human Services (HHS) Office of Refugee Resettlement (ORR)"), _label("Office of Refugee Resettlement (ORR) Eligibility Letter (if Under 18)"),_label("Cuban/Haitian Entrant"),_label("Document Indicating Withholding of Removal"), _label("Resident of American Samoa"),
							   _label("Administrative Order Staying Removal Issued by the Department of Homeland Security")];
//[_checkbox("otherDocORR"), _checkbox("otherDocORR-under18"), _checkbox("Cuban-or-HaitianEntrant"), _checkbox("docRemoval"),
//_checkbox("americanSamaoresident"), _checkbox("adminOrderbyDeptofHomelanSecurity")];

// Primary Residence
var $ssapPage10ResidenceHeader;
var $ssapPage10ResidenceBullets = [_label("Yes[3]"),_label("No[3]")];
//[_radio("62Part_livesInUS"), _radio("62Part_livesInUSNo")];

// Military
var $ssapPage10MilitaryHeader;
var $ssapPage10MilitaryBullets = [_label("Yes[4]"),_label("No[4]")];
//[_radio("62Part_honourably-veteran"), _radio("62Part_honourably-veteranNo")];

// Page 11
var $ssapPage11Header = _heading1("Ethnicity and Race");
//_span("Ethnicity and Race");
var $ssapPage11Name;

// Is ____ hispanic
var $ssapPage11HispanicHeader;
var $ssapPage11HispanicBullets = [_label("Yes"),_label("No")];
//[_radio("checkPersonNameLanguageYes"), _radio("checkPersonNameLanguageNo")];

// Ethnicity
var $ssapPage11EthnicityHeader = _fieldset("/Ethnicity/");
var $ssapPage11EthnicityOptions;
var $ssapPage11EthnicityOther = _textbox("ethnicityLabel");
//_textbox("Please Specify");//_textbox("otherEthnicity");

// Race
var $ssapPage11RaceHeader = _fieldset("Race (check all that apply)");
var $ssapPage11RaceOptions;
var $ssapPage11RaceOther = _textbox("raceLabel");
//_textbox("otherRace");

// Page 12
var $ssapPage12Header = _heading1("Household Addresses");

// Where Household Members Live
var $ssapPage12LivingHeader = _heading3("Where Household Members Live");
//_heading4("Where Household Members Live");
var $ssapPage12LivingInstructions = _paragraph("/Do any of the people below live at an address other than " + $ssapHomeAddressAddress1 + ", " + $ssapHomeAddressCity + ", NV,/");


// Page 13
// Constants
var $SSAP_PAGE_13_STATE_LENGTH = 34;

// Accessors
var $ssapPage13Header = _heading1("Additional Information");

// Family and Household
var $ssapPage13FamilyHeader = _heading1("American Indian/Alaska Native");
//_heading4("Family and Household[5]");
var $ssapPage13FamilyInstructions = _paragraph("Are any of the people below American Indian/Alaska Native?");
var $ssapPage13FamilyOptions;
var $ssapPage13FamilyAccessors;

// Page 07
var $ssapPage07Header = _heading1("Household Relationship");

// Household Relationship Details
var $ssapPage07HouseholdHeader = _heading3("Household Relationship Details");
var $ssapPage07HouseholdInstructions;
var $ssapPage07HouseholdAccessors;

// Page 15
var $ssapPage15Header = _heading1("Summary");

// Household Information Review and Confirmation
var $ssapPage15InfoHeader = _heading3("Review and Confirm");
//_heading4("Household Information Review and Confirmation");
var $ssapPage15InfoInstructions = _paragraph("Here is the information you provided about everyone who is part of your household. Please take a moment to review and double-check the information. If you see any mistakes, please edit them now")
	var $ssapPage15InfoAccessors = [$ssapPage15InfoHeader, $ssapPage15InfoInstructions];

// Page 16
var $ssapPage16Header = _heading1("Review and Sign");
//var $ssapPage16Instructions = _bold("Now it's time to review and sign your health insurance application.");
var $ssapPage16Accessors = [$ssapPage16Header];
//, $ssapPage16Instructions];

// Page 17
var $ssapPage17Header = _div("Household and Demographic Information DownloadPrint");
var $ssapPage17ReviewHeader = _heading1("Final Review");
//_heading3("/Final Application Review and Confirmation/");
var $ssapPage17ReviewDownload = _button("Download");
var $ssapPage17ReviewPrint = _button("Print");
var $ssapPage17ReviewAccessors = [$ssapPage17Header, $ssapPage17ReviewHeader, $ssapPage17ReviewDownload, $ssapPage17ReviewPrint];

// Page 18
var $ssapPage18Header = _heading1("Sign and Submit");
var $ssapPage18NobodyIncarcerated = _label("No. No one listed on this health insurance application is incarcerated (in prison or jail).");
//_checkbox("ononeIncarceratedStatus");
var $ssapPage18IncarceratedOptions;
//var $ssapPage18UseIncomeBullets = [_radio("useIncomeDataIndicatorYes"), _radio("useIncomeDataIndicatorNo")];
var $ssapPage18UseIncomeBullets = [_label("I agree"), _label("I disagree")];
var $ssapPage18SixtyDays = _label("gi-checkbox-label[1]");
//_checkbox("agree_stat4");
var $ssapPage18Perjury = _label("gi-checkbox-label[2]");
//_checkbox("agree_stat5");
var $ssapPage18SignatureHeader;
//var $ssapPage18Signature = _textbox("Household_sign");
var $ssapPage18Signature = _textbox("signature");
//_textbox("appscr85ESignature");
var $ssapPage18SubmitApp = _button("/Submit Application/i");
//_link("contBtn");
var $ssapPage18Accessors;

// Qualifying Event Details popup
var $ssapQualifyingEventDetailsHeader = _heading2("Qualifying Event Details");
var $ssapQualifyingEventDetailsEvent = _select("sepEvent");
var $ssapQualifyingEventDetailsDate = _span("MonthDayYear")
	//_textbox("sepEventDate[1]");
	var $ssapQualifyingEventDetailsSubmit = _button("/Submit Application/i");
//_link("Submit Application[1]");
var $ssapQualifyingEventDetailsAccessors = [$ssapQualifyingEventDetailsHeader, $ssapQualifyingEventDetailsEvent, $ssapQualifyingEventDetailsDate, $ssapQualifyingEventDetailsSubmit];

// Page 19
var $ssapPage19Header = _heading1("Application Complete");
var $ssapPage19Qualify = _heading4("You qualify for Special Enrollment Period");
var $ssapPage19DoNotQualify = _heading4("Special Enrollment Period Not Granted");
var $ssapPage19Back = _link("Go to Dashboard");
var $ssapPage19Accessors;
if(!$sepDenied){
	var $ssapPage19Accessors = [$ssapPage19Header, $ssapPage19Qualify, $ssapPage19Back];
}

function SsapPerson($num, $firstName, $middleName, $lastName, $suffix, $doB) {
	this.$num = $num;
	this.$firstName = $firstName;
	this.$middleName = $middleName;
	this.$lastName = $lastName;
	this.$suffix = $suffix;
	this.$doB = $doB;

	// Information
	this.$applying;
	this.$gender;
	this.$SSN;
	this.$SSNName;
	this.$citizen;
	this.$homeAddress1;
	this.$homeAddress2;
	this.$homeCity;
	this.$homeZip;
	this.$mailingAddress1;
	this.$mailingAddress2;
	this.$mailingCity;
	this.$mailingZip;
	this.$native;

	// Functions
	this.fullName = function($bool) {
		var $fullName;
		if ($bool && this.$suffix) {
			$fullName = this.$suffix + " " + this.$firstName;
		}
		else {
			$fullName = this.$firstName;
		}
		if (this.$middleName && this.$middleName !== "") {
			$fullName += " " + this.$middleName;
		}
		$fullName += " " + this.$lastName;
		return $fullName;
	};

	this.verify = function() {
		// Set accessors
		var $fullName = this.fullName();
		//		this.$personName = _div($fullName, _in(_div("usa-grid usa-width-one-whole review-document["+(this.$num +1)+"]")));
		this.$personName =_span($fullName, _in(_div("householdMemberSummary")));
		//_span($fullName);//+"["+this.$num + 1+ "]");
		this.$edit = _button("Edit[" + this.$num + "]");
		//if (this.$num > 0) {
		//  this.$delete = _button("Delete[" + (this.$num - 1) + "]");
		//}
		var $date = this.$doB;
		if($date.indexOf("/") == -1){
			var $formatedDate =  $date.substring(0,2)+"/"+$date.substring(2,4)+"/"+ $date.substring(4,8);
			//			this.$doBAccessor = _span($formatedDate, _in(_div("usa-grid usa-width-one-whole review-document["+(this.$num +1)+"]")));
			this.$doBAccessor = _span($formatedDate, _in(_div("householdMemberSummary")));
			//_paragraph("Date of birth " + $formatedDate);
		}
		else{
			//			this.$doBAccessor = _span($date, _in(_div("usa-grid usa-width-one-whole review-document["+(this.$num +1)+"]")));
			this.$doBAccessor = _span($date, _in(_div("householdMemberSummary")));
			//_paragraph("Date of birth " + $date);   

		}
		//this.$applying =  _span(this.$applying, _in(_div("usa-width-one-whole review-document["+(this.$num +1)+"]")));
		var $applying= _span(this.$applying, _in(_div("householdMemberSummary")));
		//			_span(this.$applying, _in(_div("usa-grid usa-width-one-whole review-document["+(this.$num +1)+"]")));


		//Verify accessors
		_assertVisible(this.$personName);
		_assertVisible(this.$edit);
		_assertVisible(this.$doBAccessor);
		_assertVisible($applying);

	};
}
// Universal
function verifySSAPPage($pageToVerify) {
	if ($currentPerson === undefined) {
		$currentPerson = 0;
	}
	verifyAgentIcon();
	_log($currentPerson);
	if($pageToVerify >= 9 && $pageToVerify <= 11){
		$ssapVerificationArray[$pageToVerify-1]($currentPerson);
	}
	else{
		$ssapVerificationArray[$pageToVerify-1]();
	}
	if ($pageToVerify > 0) {
		_assertVisible($ssapBack);
	}
	_setStrictVisibilityCheck(true);

	if(_isVisible(_heading1("Get Ready"))|| $pageToVerify ==14 || $pageToVerify == 15 ||$pageToVerify == 16 || _isVisible(_heading1("Final Review"))) {
		_assertVisible($ssapContinueButton);
	}
	else if(_isVisible(_heading1("Sign and Submit"))){
		_assertVisible(_span("/Submit Application/i"));
	}
	else if($pageToVerify >= 2){
		_assertVisible($ssapSaveAndContinueButton);
	}
	else{
		_assertVisible($ssapSaveButton)
			}
	_setStrictVisibilityCheck(false);
	/*
// Default state
if ($ssapPageIndex === undefined) {
$ssapPageIndex = 0;
}
if ($currentPerson === undefined) {
$currentPerson = 0;
}

// Verify agent icon
verifyAgentIcon();

// Verify side menu
//verifyArray($ssapStepsAccessors);NV not there

// Verify correct page
if ($editingPrimaryContactInfo) {
$ssapVerificationArray[2]();
}
else if ($ssapPageIndex >= 8 && $ssapPageIndex <= 10) {
$ssapVerificationArray[$ssapPageIndex]($currentPerson);
}
else {
$ssapVerificationArray[$ssapPageIndex]();
}

// Verify correct buttons
if ($ssapPageIndex > 0 && !$addingPerson && !$editingPrimaryContactInfo) {
_assertVisible($ssapBack);
}

//if ($ssapPageIndex == 6 && $addingPerson) {
//	_assertVisible(_link("Cancel[2]"));
//}
_setStrictVisibilityCheck(true);
if($ssapPageIndex >= 2){
_assertVisible($ssapSaveAndContinueButton)
}else if(_isVisible(_heading1("Get Ready"))) {
_assertVisible($ssapContinueButton);
}
else{
_assertVisible($ssapSaveButton)
}	


//if($ssapPageIndex >= 2 && $ssapPageIndex != 7 && $ssapPageIndex != 15 && $ssapPageIndex != 17 && !_isVisible(_heading3("/Review and Confirm/"))) {
//	_assertVisible($ssapSave);
//}

if (!$editingContactInfo && !$editingPrimaryContactInfo && !_isVisible(_heading3("Read and check the box next to each statement if you agree"))) {
_assertVisible($ssapContinue);
}
_setStrictVisibilityCheck(false);

*/
}

function ssapAlertEmail() {
	_alert($ssapEmail);
}

function clickBackButton() {
	// Click button
	_click($ssapBack);

	// Update state
	if ($ssapPageIndex === 8 && $currentPerson > 0) {
		$ssapPageIndex = 10;
		$currentPerson--;
	}
	else if ($ssapPageIndex === 14 && $ssapPeople.length === 1) {
		$ssapPageIndex -= 2;
	}
	else {
		$ssapPageIndex--;
	}

	// Verify correct page
	verifySSAPPage();
}

function clickSaveButton($pageToVerify) {
	// Click button
	_setStrictVisibilityCheck(true);
	_click($ssapSave);

	/*

// Update state and verify correct page if necessary
if ($editingPrimaryContactInfo) {
$editingPrimaryContactInfo = false;
verifySSAPPage();
}
else if ($addingPerson || $editingContactInfo) {
$addingPerson = false;
$editingContactInfo = false;
$ssapPageIndex++;
verifySSAPPage();
}
*/
	verifySSAPPage($pageToVerify);
	_setStrictVisibilityCheck(false);
}

function clickContinueForNonSeekingMember(){
	_assertVisible(_paragraph("This household member(s) will need to apply separately and will be marked as \"not seeking coverage\" in this application:"));
	_click($ssapContinue1);
	// Verify page 15 
	verifySSAPPage15();
}

function clickContinueButton($pageToVerify,$verifyPage) {
	if(_isVisible(_heading1("Household Relationship"))){
		_assertVisible(_heading1("Household Relationship"));
	}
	else if(_isVisible(_button("Save & Continue"))){
		_click(_button("Save & Continue"));
	}
	else
		_call(_button("Continue").click());
	_wait(5000, _isVisible($ssapContinue));

	if ($pageToVerify === 11 && $currentPerson < $ssapPeople.length && !$editingPerson) {
		$ssapPageIndex = 8;
		$currentPerson++;
		_log("No of persons are >>> "+ $currentPerson);
	}
	else if ($ssapPageIndex === 12 && $ssapPeople.length === 1) {
		$ssapPageindex += 2;
		_log("$ssapPageIndex "+$ssapPageIndex);
	}
	else {
		$ssapPageIndex++;
		_log("$ssapPageIndex "+$ssapPageIndex);
	}
	if(!$verifyPage){
		// Verify correct page
		verifySSAPPage($pageToVerify);

	}
}

// Steps menu
function verifySSAPMenu() {
	// Verify accessors
	verifyArray($ssapStepsAccessors);
}

// Page 1
function verifySSAPPage1() {
	// Verify page 1 accessors
	verifyArray($ssapPage1Accessors);
}

function selectPrivacyCheckboxForSSAP($bool) {
	// Parse params
	if ($bool === undefined) {
		$bool = true;
	}

	// Set field
	if ($bool) {
		//_check($ssapPage1PrivacyCheckbox);
		_click($ssapPage1PrivacyCheckbox);
	}
	else {
		_click($ssapPage1PrivacyCheckbox);
		//_uncheck($ssapPage1PrivacyCheckbox);
	}
}

// Page 2
function verifySSAPPage2() {
	// Verify page 2 accessors
	verifyArray($ssapPage2Accessors);
}

// Page 3
function verifySSAPPage3() {

	// Uncheck same checkbox
	//var $bool;
	/*

if ($ssapPage3PrimaryContactMailingAddressSame.checked) {
$bool = true;
_uncheck($ssapPage3PrimaryContactMailingAddressSame);
}
*/
	//	$bool =true;
	//	_click(_label("gi-checkbox-label"))
	//}
	// Verify page 3 accessors
	_assertVisible($ssapPage3Header);
	verifyArray($ssapPage3PrimaryContactNameAccessors);
	verifyArray($ssapPage3PrimaryContactHomeAddressAccessors);
	verifyArray($ssapPage3PrimaryContactMailingAddressAccessors);
	verifyArray($ssapPage3PrimaryContactPhoneAccessors);
	verifyArray($ssapPage3PrimaryContactPreferencesAccessors);

	// Recheck checkbox if necessary
	//if ($bool) {
	//_check($ssapPage3PrimaryContactMailingAddressSame);
	//_click(_label("gi-checkbox-label"));
	//_assertNotVisible(_span("Please check box!"));
	//}
}

function enterContactNameForPrimary($firstName, $middleName, $lastName, $suffix, $doB, $email,$autopopulated) {
	// Parse params
	if (!$email) {
		$email = $signupEmail;
	}
	if(!$firstName){
		var $randomName = randomString($FIELD_LENGTH);
		$firstName = $randomName.charAt(0).toUpperCase() + $randomName.slice(1).toLowerCase();

	}
	if(!$lastName){
		$lastName =  $firstName;
	}

	// Put primary info in array of people
	var $person = new SsapPerson(0, $firstName, $middleName, $lastName, $suffix, $doB);
	if ($ssapPeople.length == 0) {
		$ssapPeople.push($person);
	}
	else {
		$ssapPeople[0].$firstName = $firstName;
		$ssapPeople[0].$middleName = $middleName;
		$ssapPeople[0].$lastName = $lastName;
		$ssapPeople[0].$suffix = $suffix;
		$ssapPeople[0].$doB = $doB;
		$ssapPeople[0].$email = $email;

	}

	if($autopopulated != "YES"){
		// Set fields
		_setValue($ssapPage3PrimaryContactNameFirstName, $firstName);
		_setValue($ssapPage3PrimaryContactNameMiddleName, $middleName);
		_setValue($ssapPage3PrimaryContactNameLastName, $lastName);
		if ($suffix) {
			_setSelected($ssapPage3PrimaryContactNameSuffix, $suffix);
		}
		_type(_numberbox("month"),$doB.substring(0,2));
		_type(_numberbox("date"), $doB.substring(3,5));
		_type(_numberbox("year"),$doB.substring(6,10));

		_setValue($ssapPage3PrimaryContactNameEmailAddress, $email);
	}
	_assertVisible(_label("checkbox_page_02_contactPreferences_emailMe_label"));
	_assertEqual("Send me important alerts to this email address.", _getText(_label("checkbox_page_02_contactPreferences_emailMe_label")));
	// Update state
	$ssapEmail = $email;
	$ssapDoB = $doB;
	return $firstName;
}

var $primaryOutsideIdaho;
function enterContactHomeAddress($address1, $address2, $city, $zip, $state, $county, $autopopulated){
	// Parse params
	if ($county === undefined) {
		$county = 1;
	}

	// Update state
	if ($ssapPeople.length === 0) {
		$ssapPeople.push(new SsapPerson());
	}

	////@Firefox Issue
	if(_isFF()){
		_lockWindow(20000);
		_focusWindow();
		_focus($ssapPage3PrimaryContactHomeAddressAddress1);
		_typeNative($address1);
		//_blur($ssapPage3PrimaryContactHomeAddressAddress1)
		_typeKeyCodeNative(java.awt.event.KeyEvent.VK_TAB);
		//_call($ssapPage3PrimaryContactHomeAddressAddress1.value=$address1);

		_focusWindow();
		_focus($ssapPage3PrimaryContactHomeAddressAddress2);
		_typeNative($address2);
		//_blur($ssapPage3PrimaryContactHomeAddressAddress2)
		_typeKeyCodeNative(java.awt.event.KeyEvent.VK_TAB);
		//_call($ssapPage3PrimaryContactHomeAddressAddress2.value=$address2);

		_focusWindow();
		_focus($ssapPage3PrimaryContactHomeAddressCity);
		_typeNative($city);
		_typeKeyCodeNative(java.awt.event.KeyEvent.VK_TAB);
		//_blur($ssapPage3PrimaryContactHomeAddressCity)
		//_call($ssapPage3PrimaryContactHomeAddressCity.value=$city);
		_unlockWindow();
	}
	else  if($autopopulated !="YES"){
		// Set fields
		_setValue($ssapPage3PrimaryContactHomeAddressAddress1, $address1);
		_setValue($ssapPage3PrimaryContactHomeAddressAddress2, $address2);
		_setValue($ssapPage3PrimaryContactHomeAddressCity, $city);
	}
	if(_isVisible(_div("Report a Change"))){
		_setSelected($ssapPage3PrimaryContactHomeAddressState, $state);
		if(($state!="Idaho" ) || ($state !="ID")){
			$primaryOutsideIdaho="Yes";
			$ssapMailingAddress1 = $ssapPeople[0].$homeAddress1;
			$ssapMailingAddress2 = $ssapPeople[0].$homeAddress2;
			$ssapMailingCity = $ssapPeople[0].$homeCity;
			$ssapMailingZip = $ssapPeople[0].$homeZip;
			$ssapPeople[0].$mailingAddress1 = $ssapPeople[0].$homeAddress1;
			$ssapPeople[0].$mailingAddress2 = $ssapPeople[0].$homeAddress2;
			$ssapPeople[0].$mailingCity = $ssapPeople[0].$homeCity;
			$ssapPeople[0].$mailingZip = $ssapPeople[0].$homeZip;
		}
	}
	else if($autopopulated !="YES"){
		_setValue($ssapPage3PrimaryContactHomeAddressState, $state);
		_setValue($ssapPage3PrimaryContactHomeAddressZip, $zip);
		_setSelected($ssapPage3PrimaryContactHomeAddressCounty, $county);
	}
	if(_isVisible(_div("Report a Change"))){
		$date=calculateEventDate();
		_setValue(_textbox("changeinaddressdate"), $date);
		_click(_radio("updateOtrMem[1]"));
		_click(_link("OK"));
	}
	if($editingPrimaryContactInfo == true){
		$ssapPageIndex = 6;
	}
	$ssapHomeAddress1 = $address1;
	$ssapHomeAddress2 = $address2;
	$ssapHomeCity = $city;
	$ssapHomeZip = $zip;
	$ssapPeople[0].$homeAddress1 = $address1;
	$ssapPeople[0].$homeAddress2 = $address2;
	$ssapPeople[0].$homeCity = $city;
	$ssapPeople[0].$homeZip = $zip;
}

function enterContactMailingAddress($bool, $address1, $address2, $city, $zip, $state,$county, $autopopulated) {
	// Parse params
	if ($bool === undefined) {
		$bool = false;
	}

	// Update state
	$ssapHomeAddressAddress1 = $address1;
	$ssapHomeAddressCity = $city;
	$ssapMailingAddress1 = $address1;
	$ssapMailingAddress2 = $address2;
	$ssapMailingCity = $city;
	$ssapMailingZip = $zip;
	// Set fields
	if ($bool) {
		$ssapPeople[0].$mailingAddress1 = "Same as home address";
		$ssapMailingAddress1 = "Same as home address";
		_check($ssapPage3PrimaryContactMailingAddressSame);
	}
	else {
		$ssapPeople[0].$mailingAddress1 = $address1;
		$ssapPeople[0].$mailingAddress2 = $address2;
		$ssapPeople[0].$mailingCity = $city;
		$ssapPeople[0].$mailingZip = $zip;
		//_uncheck($ssapPage3PrimaryContactMailingAddressSame);
		_click($ssapPage3PrimaryContactMailingAddressSame);
	}
	if($autopopulated != "YES"){
		_setValue($ssapPage3PrimaryContactMailingAddressAddress1, $address1);
		_setValue($ssapPage3PrimaryContactMailingAddressAddress2, $address2);
		_setValue($ssapPage3PrimaryContactMailingAddressCity, $city);
		_setValue($ssapPage3PrimaryContactMailingAddressZip, $zip);
		_setSelected(_select("mailing_primary_county"), $county);
		_setSelected($ssapPage3PrimaryContactMailingAddressState, $state);
	}
}

function enterContactPhone($mobile, $home, $ext) {
	if(typeof($mobile) ==='object' ) {
		$mobile = $mobile[0]+""+$mobile[1]+""+$mobile[2];
	}
	if( typeof($home) ==='object'){
		$home = $home[0]+""+$home[1]+""+$home[2];
	}
	// Set fields
	_setValue($ssapPage3PrimaryContactPhoneMobilePhoneNumber, "");
	_setValue($ssapPage3PrimaryContactPhoneMobilePhoneNumber, $mobile);
	_assertVisible(_label("checkbox_page_02_contactPreferences_textMe_label"));
	_assertEqual("Send me important alerts to this phone number. Standard message rates may apply.", _getText(_label("checkbox_page_02_contactPreferences_textMe_label")));
	_setValue($ssapPage3PrimaryContactPhoneHomePhoneNumber, "");
	_setValue($ssapPage3PrimaryContactPhoneHomePhoneNumber, $home);

	_setValue($ssapPage3PrimaryContactPhoneHomePhoneNumberExtension, "");
	_setValue($ssapPage3PrimaryContactPhoneHomePhoneNumberExtension, $ext);


	// Update state
	if ($mobile) {
		$ssapPreferredPhone = $mobile;
	}
	if ($home) {
		$ssapSecondPhone = $home;
	}
	if ($ext) {
		$ssapExt = $ext;
	}
}

function enterContactPreferences($spoken, $written, $communicationMethod, $receive1095FormOptions) {
	// Set fields
	_setSelected($ssapPage3PrimaryContactPreferencesSpokenLanguage, $spoken);
	_setSelected($ssapPage3PrimaryContactPreferencesWrittenLanguage, $written);

	$ssapSpoken = $spoken;
	$ssapWritten = $written;
	if($communicationMethod == "Email"){
		_click($ssapPage3PaperlessCommunication);
		_assertVisible(_label("checkbox_page_02_contactPreferences_emailMe_label"));
		_assertEqual("Send me important alerts to this email address.", _getText(_label("checkbox_page_02_contactPreferences_emailMe_label")));
		_click(_label("checkbox_page_02_contactPreferences_emailMe_label"));
		_assertVisible(_label("checkbox_page_02_contactPreferences_textMe_label"));
		_assertEqual("Send me important alerts to this phone number. Standard message rates may apply.", _getText(_label("checkbox_page_02_contactPreferences_textMe_label")));
		_click(_label("checkbox_page_02_contactPreferences_textMe_label"));
		$communicationMethod = "Paperless";
	}
	else  if($communicationMethod == "Mail" || !$communicationMethod){
		_click($ssapPage3PostalMailCommunication);
		$communicationMethod = "PostalMail";
	}

	if($receive1095FormOptions == "Paperless"){
		_click($ssapPage3GoPaperless1095Form);
		_assertVisible(_label("checkbox_page_02_contactPreferences_emailMe_label"));
		_assertEqual("Send me important alerts to this email address.", _getText(_label("checkbox_page_02_contactPreferences_emailMe_label")));
		_click(_label("checkbox_page_02_contactPreferences_emailMe_label"));
		_assertVisible(_label("checkbox_page_02_contactPreferences_textMe_label"));
		_assertEqual("Send me important alerts to this phone number. Standard message rates may apply.", _getText(_label("checkbox_page_02_contactPreferences_textMe_label")));
		_click(_label("checkbox_page_02_contactPreferences_textMe_label"));
		$receive1095FormOptions = "Paperless";
	}
	else  if($receive1095FormOptions == "Mail" || !$receive1095FormOptions){
		_click($ssapPage3PostalMail1095Form);
		$receive1095FormOptions = "PostalMail"
			}
	_assertVisible(_div("usa-alert usa-alert--info gi-alert gi-alert__info"));
	_assertEqual("With Paperless option, notifications will always be delivered to your Secure Mailbox and you would get a text message or email informing you of the availability of the Notice. With Postal Mail option, apart from Secure Mailbox we deliver a paper/hard copy of the Notice to your mailing address.", _getText(_div("usa-alert usa-alert--info gi-alert gi-alert__info")));
	$ssapCommunication = $communicationMethod;
	$ssapFormReceiveOption = $receive1095FormOptions
		_wait(5000);
}

// Page 4
function verifySSAPPage4() {
	// Verify page 4 accessors
	//_assertVisible($ssapPage4Header);
	verifyArray($ssapPage4HelpingAccessors);
}

function selectSomeoneHelping() {
	// Click button
	_click($ssapPage4HelpingSomeoneHelping);

	// Verify form
	_assertVisible(_heading4("Authorized Representative"));
	_assertVisible(_strong("Do you want to name someone as your authorized representative?"));
}

function selectAuthorizedRepresentative($bool) {
	// Click the correct radio button
	if ($bool.toUpperCase() === "YES") {
		_click($ssapPage4AuthorizedBullets[0]);
	}
	else if ($bool.toUpperCase() === "NO") {
		_click($ssapPage4AuthorizedBullets[1]);
	}
}

function verifyElementsForAuthorizedRepresentative() {
	// Verify each form
	verifyArray($ssapPage4AuthorizedContactAccessors);
	verifyArray($ssapPage4AuthorizedHomeAccessors);
	verifyArray($ssapPage4AuthorizedPhoneAccessors);
}

function enterAuthorizedRepresentativeContactInfo($first, $middle, $last, $suffix, $email) {
	// Generate random if necessary
	if (!$first) {
		$first = randomString($FIELD_LENGTH);
	}
	if (!$last) {
		$last = randomString($FIELD_LENGTH);
	}
	if (!$email) {
		$email = randomString($FIELD_LENGTH) + "@example.com";
	}

	// Set fields
	_setValue($ssapPage4AuthorizedFirstName, $first);
	_setValue($ssapPage4AuthorizedMiddleName, $middle);
	_setValue($ssapPage4AuthorizedLastName, $last);
	_setSelected($ssapPage4AuthorizedSuffix, $suffix);
	_setValue($ssapPage4AuthorizedEmail, $email);
}

function enterAuthorizedRepresentativeHomeAddressInfo($addr1, $addr2, $city, $zip, $state) {
	// Set fields
	_setValue($ssapPage4AuthorizedAddress1, $addr1);
	_setValue($ssapPage4AuthorizedAddress2, $addr2);
	_setValue($ssapPage4AuthorizedCity, $city);
	_setValue($ssapPage4AuthorizedZip, $zip);
	_setSelected($ssapPage4AuthorizedState, $state);
}

function enterAuthorizedRepresentativePhone($mobile, $home, $homeExt, $work, $workExt) {
	// Generate random if necessary
	if (!$mobile) {
		$mobile = phoneGen().join("");
	}
	if (!$home) {
		$home = phoneGen().join("");
	}
	if (!$homeExt) {
		$homeExt = randomString(4, true);
	}
	if (!$work) {
		$work = phoneGen().join("");
	}
	if (!$workExt) {
		$workExt = randomString(4, true);
	}

	// Set fields
	_setValue($ssapPage4AuthorizedMobile, $mobile);
	_setValue($ssapPage4AuthorizedHome, $home);
	_setValue($ssapPage4AuthorizedHomeExt, $homeExt);
	_setValue($ssapPage4AuthorizedWork, $work);
	_setValue($ssapPage4AuthorizedWorkExt, $workExt);
}

function enterAuthorizedRepresentativeOrganization($org, $id) {
	// Generate random if necessary
	if (!$org) {
		$org = randomString($FIELD_LENGTH) + " " + randomString($FIELD_LENGTH);
	}
	if (!$id) {
		$id = randomString($FIELD_LENGTH, true);
	}

	// Set fields
	_check(_radio("cmpnyNameAndOrgRadio54_1"));
	_setValue(_textbox("authorizeCompanyName"), $org);
	_setValue(_textbox("authorizeOrganizationId"), $id);
}

function enterAuthorizedRepresentativeSign() {
	// Variables
	var $fullName = $ssapPeople[0].fullName();

	// Set fields
	_click(_radio("makeOtherizedRepresentativeSignature"));
	_setValue(_textbox("authorizeSignature"), $fullName);
}

function selectUnableToSign() {
	// Set field
	_click(_radio("makeOtherizedRepresentativeLater"));
}

function clickHelpingMyself() {
	// Click button
	_click($ssapPage4HelpingMyself);
}

// Page 5
function verifySSAPPage5() {
	// Verify page 5 accessors
	_assertVisible(_heading3("Who needs health insurance?"));

	//}
	//_assertVisible($ssapPage5Header);
	verifyArray($ssapPage5WhoAccessors);
}

function selectMeOnly() {
	// Click button
	_click($ssapPage5WhoMeOnly);
}

function selectMeAndOthers() {
	// Click button
	_click($ssapPage5WhoMeAndOthers);
}

function selectOthersOnly() {
	// Click button
	_click($ssapPage5WhoOthers);
}

// Page 6
function verifySSAPPage6() {
	// Verify page 6 accessors
	_assertVisible($ssapPage6Header);

	// Verify accessors for each person
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		verifyPersonOnSSAPPage6($i);
	}
}

function verifyPersonOnSSAPPage6($num) {
	// Set accessors
	//var $ssapPage6InfoHeader = _strong("applicantTitle57" + ($num + 1));
	var $ssapPage6InfoFirstName = _textbox("firstName["+$num+"]" );
	//_textbox("appscr57FirstName" + ($num + 1));
	var $ssapPage6InfoMiddleName = _textbox("middleName["+$num+"]" );
	// _textbox("appscr57MiddleName" + ($num + 1));
	var $ssapPage6InfoLastName = _textbox("lastName["+$num+"]");
	//_textbox("appscr57LastName" + ($num + 1));
	var $ssapPage6InfoSuffix = _select("suffix["+$num+"]" );
	//_select("appscr57Suffix" + ($num + 1));
	var $ssapPage6InfoDoB = _span("MonthDayYear["+$num+"]" );
	//_textbox("appscr57DOB" + ($num + 1));
	var $ssapPage6InfoSeekingCoverage =_fieldset("Are you seeking coverage?["+$num+"]");
	//_checkbox("appscr57checkseekingcoverage" + ($num + 1));

	var $ssapPage6AddMemberMessage = _heading3("Need to include someone else?");
	var $ssapPage6AddMemberButton2 = _button("Add person", _in(_div("subsection")));

	// Verify acessors;
	var $ssapPage6InfoAccessors = [$ssapPage6InfoFirstName, $ssapPage6InfoMiddleName, $ssapPage6InfoLastName, 
								   $ssapPage6InfoSuffix, $ssapPage6InfoDoB, $ssapPage6InfoSeekingCoverage, $ssapPage6AddMemberButton,
								   $ssapPage6AddMemberMessage, $ssapPage6AddMemberButton2];
	verifyArray($ssapPage6InfoAccessors);
}

function markAsSeekingCoverage($ssap, $index){

	_assertVisible(_label("Are you seeking coverage?["+$index+"]"));
	_click(_label("Are you seeking coverage?["+$index+"]"));
	$ssap[$index].$applying = "Yes";
	_log("$ssapPeople "+ JSON.stringify($ssap[0]));
	_log("$ssapPeople "+ JSON.stringify($ssap[1]));
	_log("$ssapPeople "+ JSON.stringify($ssap));
	return $ssap;
}

function enterInformation($num, $firstName, $middleName, $lastName, $suffix, $doB, $seeking, $relationshipToApplicant) {
	// Put primary info in array of people
	while ($ssapPeople[$num] === undefined) {
		-		$ssapPeople.push(new SsapPerson());
	}
	$ssapPeople[$num].$homeAddress1 = $ssapHomeAddress1;
	$ssapPeople[$num].$homeAddress2 = $ssapHomeAddress2;
	$ssapPeople[$num].$homeCity = $ssapHomeCity;
	$ssapPeople[$num].$homeZip = $ssapHomeZip;
	$ssapPeople[$num].$mailingAddress1 = $ssapMailingAddress1;
	$ssapPeople[$num].$mailingAddress2 = $ssapMailingAddress2;
	$ssapPeople[$num].$mailingCity = $ssapMailingCity;
	$ssapPeople[$num].$mailingZip = $ssapMailingZip;
	$ssapPeople[$num].$num = $num;
	$ssapPeople[$num].$firstName = $firstName;
	$ssapPeople[$num].$middleName = $middleName;
	$ssapPeople[$num].$lastName = $lastName;
	$ssapPeople[$num].$suffix = $suffix;
	$ssapPeople[$num].$doB = $doB;
	$ssapPeople[$num].$relationshipToApplicant = $relationshipToApplicant;
	if ($seeking) {
		$ssapPeople[$num].$applying = "Yes";
	}
	else {
		$ssapPeople[$num].$applying = "No";
	}

	// Set accessors
	//var $ssapPage6InfoHeader = _strong("applicantTitle57" + ($num + 1));
	var $ssapPage6InfoFirstName = _textbox("firstName["+$num+"]");
	//_textbox("appscr57FirstName" + ($num + 1));
	var $ssapPage6InfoMiddleName = _textbox("middleName["+$num+"]");
	//_textbox("appscr57MiddleName" + ($num + 1));
	var $ssapPage6InfoLastName = _textbox("lastName["+$num+"]");
	//_textbox("appscr57LastName" + ($num + 1));
	var $ssapPage6InfoSuffix =  _select("suffix["+$num+"]" );
	//_select("appscr57Suffix" + ($num + 1));
	//var $ssapPage6InfoDoB = _textbox("appscr57DOB" + ($num + 1));
	var $ssapPage6InfoSeekingCoverage = _fieldset("Are you seeking coverage?["+$num+"]");
	var $ifSeekingCoverage = _label("Yes["+$num+"]");
	var $ifNotSeekingCoverage = _label("No["+$num+"]");
	//_checkbox("appscr57checkseekingcoverage" + ($num + 1));

	// Parse params
	if ($suffix === undefined || $suffix === "") {
		$suffix = "/Suffix/";
	}
	if($num !=0){
		// Set fields
		_setValue($ssapPage6InfoFirstName, $firstName);
		_setValue($ssapPage6InfoMiddleName, $middleName);
		_setValue($ssapPage6InfoLastName, $lastName);

		//nv_setSelected($ssapPage6InfoSuffix, $suffix);
		//enterDateofBirth($doB, $num);
		_setValue(_numberbox("month["+$num+"]"),$doB.substring(0,2));
		_setValue(_numberbox("date["+$num+"]"), $doB.substring(3,5));
		_setValue(_numberbox("year["+$num+"]"),$doB.substring(6,10));
	}


	if($seeking) {
		_assertVisible($ssapPage6InfoSeekingCoverage);
		_click($ifSeekingCoverage);

	}
	else{
		_click($ifNotSeekingCoverage);

	}

	verifySSAPPage6();
	_log("$ssapPeople "+ JSON.stringify($ssapPeople));
	return $ssapPeople;
	//$houseHold.people[$num] = $ssapPeople;
	//return $houseHold

}


function resetNativeValue(element, value) {
	const valueSetter = _call(Object.getOwnPropertyDescriptor(element, 'value').set);
	const prototype = _call(Object.getPrototypeOf(element));
	const prototypeValueSetter = _call(Object.getOwnPropertyDescriptor(prototype, 'value').set);

	if (valueSetter && valueSetter !== prototypeValueSetter) {
		prototypeValueSetter.call(element, value);
	}
	else {
		valueSetter.call(element, value);
	}
}




function verifySSAPPage14() {
	// Update state
	$addingPerson = false;
	$editingContactInfo = false;
	$editingPrimaryContactInfo = false;

	// Verify page 7 accessors
	if(_isVisible(_heading4("Applicant 2"))){
		_assertVisible(_heading2("About Your Household"));
		_assertVisible(_button("Page_5_rightButton"),"Verify Save Button is visible");
		_assertVisible(_button("Page_5_leftButton"),"Verify Cancel Button is visible");
		$editingContactInfo = true;
		//nv

	}
	else{
		_assertVisible($ssapPage7Header);
		verifyArray($ssapPage7PeopleAccessors);
	}


	// Verify each person on the page
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		$ssapPeople[$i].verify();
	}
	// Verify Address of Each Person
	verifyAddressOfMemebers();

}

function verifyAddressOfMemebers(){
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		var $fullName = $ssapPeople[0].fullName();
		_assertVisible(_heading4($fullName+"(Primary Contact)"),"Verify full name under HouseHold members Adress");
		_assertVisible(_button("Edit", _near(_heading4("/"+$fullName+"/"))));

		_assertVisible(_div($ssapPeople[$i].$homeAddress1, _near(_div("Home Address", _near(_heading4("/"+$fullName+"/"))))));
		_assertVisible(_div($ssapPeople[$i].$homeAddress2, _near(_div("Home Address", _near(_heading4("/"+$fullName+"/"))))));
		if($i==0){
			_assertVisible(_div("Mailing Address"),"Verify Mailing Address is displayed for primary Contact");

		}

	}

}

function clickEditPrimary() {
	// Update state
	$editingPrimaryContactInfo = true;
	// Click the button
	_click(_button("Edit"));

	// Verify page
	verifySSAPPage();
}

function clickEdit($index) {
	// Click the button
	_click(_button("Edit[" + $index + "]"));

	// Update state
	$editingContactInfo = true;
	$ssapPageIndex = 5;

	// Verify page
	verifySSAPPage();
}

function clickRemoveApplicant($index) {
	// Click button and proceed through popup
	_click($ssapPeople[$index].$delete);
	//_click(_link("btnDeleteApplicantYes"));
	_click(_button("Delete"));

	// Remove the person from our array
	$ssapPeople.splice($index, 1);

	// Update numbers of the people in the array
	for (var $i = $index; $i < $ssapPeople.length; $i++) {
		$ssapPeople[$i].$num = $i;
	}

	// Verify page
	verifySSAPPage(6);
}
function clickDeleteMember($index) {
	var $fullName = $ssapPeople[$index].fullName();
	_click(_span("Delete", _near(_heading3($fullName))));
	_assertNotVisible(_heading3($fullName));

	// Remove the person from our array
	$ssapPeople.splice($index, 1);

	// Update numbers of the people in the array
	//for (var $i = $index; $i < $ssapPeople.length; $i++) {
	//	$ssapPeople[$i].$num = $i;
	//}

	// Verify page
	verifySSAPPage(6);
}

function clickAddMember($verifyPage) {
	// Click button
	$editingContactInfo = true;
	if(_isVisible(_button("Add Member"))){
		_click(_button("Add Member"));
	}
	else{
		//nv
		_click($ssapPage6AddMemberButton);
	}
	// Update state
	$addingPerson = true;
	$ssapPageIndex = 5;
	if($verifyPage != "NO"){
		// Verify page
		verifySSAPPage(6);
	}
}



// Page 8
function verifySSAPPage8() {
	// Verify accessors
	verifyArray($ssapPage8Accessors);
}

// Page 9
function verifySSAPPage9($num) {
	// Variables
	var $fullName = $ssapPeople[$num].fullName();
	var $coverage = $ssapPeople[$num].$applying;
	// Set accessors
	$ssapPage9Name = _span("/"+$fullName+"/");
	var $ssapPage9Accessors = [$ssapPage9Header, $ssapPage9Name]//, $ssapPage9FamilyHeader];

		// SSN
		$ssapPage9SSNHeader =_strong($fullName+"[1]");
	// _span("/Does " + $fullName + " have a Social Security Number?/");
	var $ssapPage9SSNAccessors = [$ssapPage9SSNHeader];
	$ssapPage9SSNAccessors.push.apply($ssapPage9SSNAccessors);
	// $ssapPage9SSNBullets);
	//$ssapPage9SSNAccessors.push($ssapPage9SSNLink);

	$ssapPage9SSNSameHeader = _span("/Is " + $fullName + " the same name that appears on her Social Security card?/");
	var $ssapPage9SSNSameAccessors = [$ssapPage9SSNSameHeader];
	$ssapPage9SSNSameAccessors.push.apply($ssapPage9SSNSameAccessors, $ssapPage9SSNSameBullets);

	$ssapPage9SSNNotSameHeader = _span("Is "+$fullName+" the same name that appears on her Social Security card?");
	//_span("Enter the same name as shown on " + $fullName + " 's Social Security Card");


	var $ssapPage9SSNNotSameAccessors = [$ssapPage9SSNNotSameHeader, $ssapPage9SSNNotSameFirstName, $ssapPage9SSNNotSameMiddleName,
										 $ssapPage9SSNNotSameLastName, $ssapPage9SSNNotSameSuffix];

	// Verify accessors
	verifyArray($ssapPage9Accessors);

	// Gender accessors
	verifyArray($ssapPage9GenderAccessors);

	// SSN choice accessors
	verifyArray($ssapPage9SSNAccessors);
	// Has SSN
	//	_click($ssapPage9SSNBullets[0]);
	_assertVisible($ssapPage9SSN);
	if($coverage == "Yes"){
		_assertVisible(_paragraph("usa-alert__text gi-alert__info__text"));
		_assertEqual("/ will be required to provide additional documentation at the end of the application, and may risk losing eligibility for coverage. Providing a Social Security Number can help verify your eligibility to enroll in health coverage./", _getText(_paragraph("usa-alert__text gi-alert__info__text")));
	}
	else{
		_assertVisible(_paragraph("usa-alert__text gi-alert__info__text"));
		_assertEqual("/Social Security Number is optional, but can help with determining applicant program eligibility/", _getText(_paragraph("usa-alert__text gi-alert__info__text")));
	}

	// SSN name same
	//	_click($ssapPage9SSNSameBullets[0]);
	//	verifyArray($ssapPage9SSNSameAccessors);

	// SSN name different
	//	_click($ssapPage9SSNSameBullets[1]);
	//	verifyArray($ssapPage9SSNNotSameAccessors);
	//	_assertNotVisible($ssapPage9SSNSameHeader);	

	// No SSN
	//	_click($ssapPage9SSNBullets[1]);
	//	_assertVisible($ssapPage9NoSSNHeader);
	//	_assertVisible($ssapPage9NoSSNReason);
}

function selectGender($gender, $index) {
	// Generate random if necessary
	if ($gender === undefined) {
		var $index = Math.floor(Math.random() * 2);
		if ($index === 0) {
			$gender = "male";
		}
		else {
			$gender = "female";
		}
	}
	if($index){
		$ssapPeople[$index].$gender = $gender.toLowerCase();
	}
	else{
		// Update state
		$ssapPeople[$currentPerson].$gender = $gender.toLowerCase();
	}

	// Click the correct radio button
	if ($gender.toUpperCase() === "MALE") {
		_click($ssapPage9GenderBullets[0]);
	}
	else if ($gender.toUpperCase() === "FEMALE") {
		_click($ssapPage9GenderBullets[1]);
	}

}

function selectHasSSN($bool, $index) {
	if($index){
		$currentPerson = $index;
	}

	// Click the correct radio button
	if ($bool === true || $bool.toUpperCase() === "YES") {
		if((_isVisible(_heading4("Life Change Event: Change in Dependents")))|| (_isVisible(_span("Selected Events")))){
			_check(_radio("snn4spouseT"));
		}
		else   {
			//			_click($ssapPage9SSNBullets[0]);
		}
	}
	else if ($bool === false || $bool.toUpperCase() === "NO") {
		if((_isVisible(_heading4("Life Change Event: Change in Dependents")))|| (_isVisible(_span("Selected Events")))){
			_check(_radio("snn4spouseF"));
		}
		else {
			//			_click($ssapPage9SSNBullets[1]);
		}
	}

	// Update state
	if ($bool.toUpperCase() != "NO") {
		if((!_isVisible(_heading4("Life Change Event: Change in Dependents")))&& (!_isVisible(_span("Selected Events")))){
			$ssapPeople[$currentPerson].$SSN = _getValue($ssapPage9SSN);
		}
		else {

			$ssapPeople[$currentPerson].$SSN =   _getText(_textbox("ssn1")) + _getText(_textbox("ssn2"))+ _getText(_textbox("ssn3"));

		}
	}
	$ssapPeople[$currentPerson].$SSNName = $ssapPeople[$currentPerson].fullName(true);

}

function enterSSN($SSN, $index) {
	// Generate random if necessary
	if ($SSN === undefined ||$SSN === null || $SSN === "null") {
		$SSN = getRandomSSN();
	}
	if($index){
		$ssapPeople[$index].$SSN = $SSN;
	}
	else{
		// Update state
		$ssapPeople[$currentPerson].$SSN = $SSN;


	}
	if(_getText(_textbox("socialSecurityNumber")) ==""){
		// Set field
		if((_isVisible(_heading4("Life Change Event: Change in Dependents")))|| (_isVisible(_span("Selected Events")))){
			$s=$SSN.split("-");
			_type(_textbox("ssn1"), $s[0]);
			_type(_textbox("ssn2"), $s[1]);
			_type(_textbox("ssn3"), $s[2]);
		}
		else {
			var $formatedSSN = $SSN .replace(/[\(\)-]/g, "");
			if(_isVisible(_heading1("Personal Information"))){
				$SSNFlag = isSSNAlreadyPresent($SSN);
				_assertEqual("", $SSNFlag, "SSN already presnt");
				_setValue($ssapPage9SSN,$formatedSSN)


					}
			else{
				_type($ssapPage9SSN, $formatedSSN);
			}
		}

	}
}

function enterSameSSNName($bool, $index) {
	$globalSSN="Yes";
	// Update state
	if ($bool === true || $bool.toUpperCase() === "YES") {
		if($index){
			$SSNName = $ssapPeople[$index].fullName();
		}
		else{
			$SSNName = $ssapPeople[$currentPerson].fullName();
		}
	}

	// Click the correct radio button
	if ($bool === true || $bool.toUpperCase() === "YES") {
		if((_isVisible(_heading4("Life Change Event: Change in Dependents")))|| (_isVisible(_span("Selected Events")))){
			_check(_radio("samenameT"));
		}
		else {
			_click($ssapPage9SSNSameBullets[0]);
		}
	}
	else if ($bool === false || $bool.toUpperCase() === "NO") {
		if((_isVisible(_heading4("Life Change Event: Change in Dependents")))|| (_isVisible(_span("Selected Events")))){
			_check(_radio("samenameF"));
		}
		else {
			_click($ssapPage9SSNSameBullets[1]);
		}
	}
}

function enterDifferentSSNName($firstName, $middleName, $lastName, $suffix,$index) {
	// Generate random if necessary
	if ($firstName === undefined) {
		$firstName = randomString($FIELD_LENGTH);
	}
	if ($lastName === undefined) {
		$lastName = randomString($FIELD_LENGTH);
	}

	// Update state
	var $name;
	if ($suffix) {
		$name = $suffix + " " + $firstName;
	}
	else {
		$name = $firstName;
	}
	if ($middleName) {
		$name += " " + $middleName;
	}
	$name += " " + $lastName;
	if($index){
		$ssapPeople[$index].$SSNName = $name;
	}
	else{
		$ssapPeople[$currentPerson].$SSNName = $name;
	}

	// Set fields
	_setValue($ssapPage9SSNNotSameFirstName, $firstName);
	_setValue($ssapPage9SSNNotSameMiddleName, $middleName);
	_setValue($ssapPage9SSNNotSameLastName, $lastName);
	_setSelected($ssapPage9SSNNotSameSuffix, $suffix);
}

function enterNoSSNReason($reason) {
	// Generate random index if necessary
	if ($reason === undefined) {
		$reason = Math.floor((Math.random() * ($SSAP_SSN_REASON_MENU_LENGTH - 1))) + 1;
	}

	// Set field
	_setSelected($ssapPage9NoSSNReason, $reason);

	// Update state
	$ssapPeople[$currentPerson].$SSN = "--NA--";
	$ssapPeople[$currentPerson].$SSNName = "--NA--";
}

// Page 10
function verifySSAPPage10($num) {
	// Temporary default param; remove later
	if ($num === undefined) {
		$num = 0;
	}

	// Variables
	var $fullName = $ssapPeople[$num].fullName(true);

	// Set accessors
	$ssapPage10Name = _span("/"+$fullName+"/");
	var $ssapPage10Accessors = [$ssapPage10Header, $ssapPage10Name];
	//, $ssapPage10FamilyHeader];

	$ssapPage10CitizenshipHeader = _span("Is "+$fullName+" a U.S. citizen or U.S. national?");
	//_paragraph("/Is " + $fullName + " a U.S. citizen or U.S. national?/");
	var $ssapPage10CitizenshipAccessors = [$ssapPage10CitizenshipHeader];
	$ssapPage10CitizenshipAccessors.push.apply($ssapPage10CitizenshipAccessors, $ssapPage10CitizenshipBullets);

	$ssapPage10NaturalizedHeader = _span("/Is " + $fullName + " a naturalized citizen?/");
	var $ssapPage10NaturalizedAccessors = [$ssapPage10NaturalizedHeader];
	$ssapPage10NaturalizedAccessors.push.apply($ssapPage10NaturalizedAccessors, $ssapPage10NaturalizedBullets);

	$ssapPage10Immigration = _label("Check if " + $fullName + " has eligible immigration status");

	$ssapPage10SameNameHeader = _bold("/"+$fullName+"/");
	//_strong($fullName + "[23]");
	var $ssapPage10SameNameAccessors = [$ssapPage10SameNameHeader, $ssapPage10SameNameFirstName, $ssapPage10SameNameMiddleName,
										$ssapPage10SameNameLastName, $ssapPage10SameNameSuffix];
	$ssapPage10SameNameAccessors.push.apply($ssapPage10SameNameAccessors, $ssapPage10SameNameBullets);

	$ssapPage10DocumentsHeader = _fieldset("/Does " + $fullName + " also have any of these documents?/");
	var $ssapPage10DocumentsAccessors = [$ssapPage10DocumentsHeader];
	$ssapPage10DocumentsAccessors.push.apply($ssapPage10DocumentsAccessors, $ssapPage10DocumentsList);

	//$ssapPage10ResidenceHeader = _span("/Has " + $fullName + "'s primary residence been in the U.S. since 1996?/");

	//var $ssapPage10ResidenceAccessors = [$ssapPage10ResidenceHeader];
	//$ssapPage10ResidenceAccessors.push.apply($ssapPage10ResidenceAccessors, $ssapPage10ResidenceBullets);

	//$ssapPage10MilitaryHeader = _span("/Is " + $fullName + " an honorably discharged veteran or active-duty member of the military?/");
	//var $ssapPage10MilitaryAccessors = [$ssapPage10MilitaryHeader];
	//$ssapPage10MilitaryAccessors.push.apply($ssapPage10MilitaryAccessors, $ssapPage10MilitaryBullets);

	// Verify accessors
	verifyArray($ssapPage10Accessors);

	verifyArray($ssapPage10CitizenshipAccessors);

	_click($ssapPage10CitizenshipBullets[0]);
	verifyArray($ssapPage10NaturalizedAccessors);

	_click($ssapPage10NaturalizedBullets[0]);
	verifyArray($ssapPage10DocumentAccessors);


	_click($ssapPage10DocumentBullets[0]);
	verifyArray($ssapPage10NaturalizationAccessors);

	_click($ssapPage10DocumentBullets[1]);
	verifyArray($ssapPage10CertificateAccessors);

	//_click($ssapPage10NaturalizedBullets[1]);
	_click($ssapPage10CitizenshipBullets[1]);
	_click($ssapPage10Immigration);
	verifyArray($ssapPage10DocTypeAccessors);

	_click($ssapPage10DocTypeBullets[0]);
	verifyArray($ssapPage10PermResCardAccessors);

	_click($ssapPage10DocTypeBullets[1]);
	verifyArray($ssapPage10TempStampAccessors);

	_click($ssapPage10DocTypeBullets[2]);
	verifyArray($ssapPage10VisaAccessors);

	_click($ssapPage10DocTypeBullets[3]);
	verifyArray($ssapPage10EmploymentCardAccessors);

	_click($ssapPage10DocTypeBullets[4]);
	verifyArray($ssapPage10ArrivalAccessors);

	_click($ssapPage10DocTypeBullets[5]);
	verifyArray($ssapPage10ArrivalForeignAccessors);

	_click($ssapPage10DocTypeBullets[6]);
	verifyArray($ssapPage10ForeignPassAccessors);

	_click($ssapPage10DocTypeBullets[7]);
	verifyArray($ssapPage10ReentryAccessors);

	_click($ssapPage10DocTypeBullets[8]);
	verifyArray($ssapPage10RefugeeAccessors);

	_click($ssapPage10DocTypeBullets[9]);
	verifyArray($ssapPage10NonimmigrantAccessors);

	_click($ssapPage10DocTypeBullets[10]);
	verifyArray($ssapPage10ExchangeAccessors);

	_click($ssapPage10CitizenshipBullets[0]);
	//_click($ssapPage10SameNameBullets[1]);
	//verifyArray($ssapPage10SameNameAccessors);

	//verifyArray($ssapPage10DocumentsAccessors);
	//verifyArray($ssapPage10ResidenceAccessors);
	//verifyArray($ssapPage10MilitaryAccessors);
}

function selectCitizen($bool) {
	$member = {
	};

	// Update state
	$ssapPeople[$currentPerson].$citizen = $bool;

	// Click the right radio button
	if ($bool === true || $bool.toUpperCase() === "YES") {
		if((_isVisible(_heading4("Life Change Event: Change in Dependents")))|| (_isVisible(_span("Selected Events")))){
			_click(_radio("citizenshipYes"));
		}
		else {
			_click($ssapPage10CitizenshipBullets[0]);
		}
	}
	else if (($bool === false || $bool.toUpperCase() === "NO")) {
		if((_isVisible(_heading4("Life Change Event: Change in Dependents")))|| (_isVisible(_span("Selected Events")))){
			_click(_radio("citizenshipNo"));
		}
		else {
			_click($ssapPage10CitizenshipBullets[1]);

		}
		var $str = JSON.stringify($ssapPeople);
		_log($str);
	}
	return $ssapPeople;
}

function selectHasEligibleImmigrationStatus($bool, $member) {
	var $fullName = $ssapPeople[$member].fullName(true);
	$ssapPage10Immigration = _label("Check if " + $fullName + " has eligible immigration status");
	// Parse params
	if (!$bool) {
		$bool = true;
	}
	// Set field
	if ($bool) {
		_click($ssapPage10Immigration);
	}
	else {
		_click($ssapPage10Immigration);
	}
}

function selectDocumentType($index){
	_click($ssapPage10DocTypeBullets[$index]);
}

function selectIfSameNameOnDocument($boolean, $member){
	var $fullName = $ssapPeople[$member].fullName(true);
	_assertVisible(_fieldset("Is "+$fullName+" the same name that appears on her document?"));
	if($boolean === "Yes"){
		_click(_label("Yes[1]"));
	}
	else{
		_click(_label("No[1]"));
		//Verification need to do
	}
}

function selectIfPrimaryResidence($boolean, $member, $currentImmigrationStatus){
	var $fullName = $ssapPeople[$member].fullName(true);
	_assertVisible(_fieldset("Has "+$fullName+" 's primary residence been in the U.S. since 1996?"));
	if($boolean === "Yes"){
		_click(_label("Yes[2]"));
	}
	else{
		_click(_label("No[2]"));
		if($currentImmigrationStatus!= "Yes"){
			_assertVisible(_fieldset("/ their current immigration status for the last 5 years/"));
			_click(_label("No[3]"));
		}
		else{
			_click(_label("Yes[3]"));
		}
	}
}
function goToMilitaryService(){
	_click(_button("Save & Continue"));
	_assertVisible(_paragraph("Are any of these people honorably discharged veteran or active duty member of the military?Learn more"));
	_assertVisible(_button("Save & Continue"));
}
function selectIfVeteranOrMilitaryMember($indexes){
	if($indexes.length == 0){
		_click(_label("None of the Above"));
	}
	else{
		for(var $i=0; $i<$indexes.length;$i++){
			var $index = $indexes[$i];
			var $fullName = $ssapPeople[$index].fullName(true);
			_click(_label($fullName));
		}
	}

}


function selectNaturalized($bool) {
	// Click the right radio button
	if ($bool === true || $bool.toUpperCase() === "YES") {
		_click($ssapPage10NaturalizedBullets[0]);
	}
	else if ($bool === false || $bool.toUpperCase() === "NO") {
		_click($ssapPage10NaturalizedBullets[1]);
	}
}

function selectCitizenshipDocument($index) {
	_click(_radio("documentType[" + $index + "]"));
}

function enterNaturalizationInfo($alienNum, $natNum) {
	// Generate random if necessary
	if (!$alienNum) {
		$alienNum = randomString(9, true);
	}
	if (!$natNum) {
		$natNum = randomString($FIELD_LENGTH, true);
	}

	// Set fields	
	_setValue($ssapPage10NaturalizationAlienNumber, $alienNum);
	_setValue($ssapPage10NaturalizationNumber, $natNum);
}

function enterCitizenshipCertificateInfo($alienNum, $certNum) {
	// Generate random if necessary
	if (!$alienNum) {
		$alienNum = randomString(9, true);
	}
	if (!$certNum) {
		$certNum = randomString($FIELD_LENGTH, true);
	}

	// Set fields
	_setValue($ssapPage10CertificateAlienNumber, $alienNum);
	_setValue($ssapPage10CertificateNumber, $certNum);
}

function selectImmigrationStatus($bool) {
	// Parse params
	if (!$bool) {
		$bool = true;
	}

	// Set field
	if ($bool) {
		//_check($ssapPage10Immigration);
		_click($ssapPage10Immigration);
	}
	else {
		//_uncheck($ssapPage10Immigration);
		_click($ssapPage10Immigration);
	}
}

function selectImmigrationDocument($index) {
	_click(_radio("docType[" + $index + "]"));
}

function enterPermResCardInfo($alienNum, $cardNum, $expire) {
	// Generate random if necessary
	if (!$alienNum) {
		$alienNum = randomString(9, true);
	}
	if (!$cardNum) {
		$cardNum = randomString(3) + randomString(10, true);
	}

	// Set fields
	_setValue($ssapPage10PermResCardAlienNumber, $alienNum);
	_setValue($ssapPage10PermResCardNumber, $cardNum);
	_setValue($ssapPage10PermResCardExpire, $expire);
}

function enterTempStampInfo($alienNum, $passNum, $country, $expire) {
	// Generate random if necessary
	if (!$alienNum) {
		$alienNum = randomString(9, true);
	}
	if (!$passNum) {
		$passNum = randomString($FIELD_LENGTH, true);
	}

	// Set fields
	_setValue($ssapPage10TempStampAlienNumber, $alienNum);
	_setValue($ssapPage10TempStampPassportNumber, $passNum);
	_setSelected($ssapPage10TempStampCountry, $country);
	_setValue($ssapPage10TempStampExpire, $expire);
}

function enterVisaInfo($alienNum, $passNum, $country, $expire, $visaNum) {
	// Generate random if necessary
	if (!$alienNum) {
		$alienNum = randomString(9, true);
	}
	if (!$passNum) {
		$passNum = randomString($FIELD_LENGTH, true);
	}
	if (!$visaNum) {
		$visaNum = randomString(8, true);
	}

	// Set fields
	_setValue($ssapPage10VisaAlienNumber, $alienNum);
	_setValue($ssapPage10VisaPassportNumber, $passNum);
	_setSelected($ssapPage10VisaCountry, $country);
	_setValue($ssapPage10VisaExpire, $expire);
	_setValue($ssapPage10VisaNumber, $visaNum);
}

function enterEmploymentCardInfo($alienNum, $cardNum, $expire, $month, $day, $year) {
	// Generate random if necessary
	if($expire){
		//		_setValue($ssapPage10EmploymentCardExpire, $expire);
		_setValue(_numberbox("month"), $month);
		_setValue(_numberbox("date"), $day);
		_setValue(_numberbox("year"), $year);
	}
	else{
		_setValue(_numberbox("month"), "01");
		_setValue(_numberbox("date"), "01");
		_setValue(_numberbox("year"), $year);
	}
	if (!$alienNum) {
		$alienNum = randomString(9, true);
	}
	if (!$cardNum) {
		$cardNum = randomString(3) + randomString(10, true);
	}

	// Set fields
	_setValue($ssapPage10EmploymentCardAlienNumber, $alienNum);
	_setValue($ssapPage10EmploymentCardNumber, $cardNum);

}

function enterArrivalInfo($i94Num, $idNum, $expire) {
	// Generate random if necessary
	if (!$i94Num) {
		$i94Num = randomString(11, true);
	}
	if (!$idNum) {
		$idNum = "N" + randomString(10, true);
	}

	// Set fields
	_setValue($ssapPage10ArrivalI94Number, $i94Num);
	_setValue($ssapPage10ArrivalIDNumber, $idNum);
	_setValue($ssapPage10ArrivalExpire, $expire);
}

function enterArrivalForeignInfo($i94Num, $passNum, $country, $expire, $visaNum, $idNum) {
	// Generate random if necessary
	if (!$i94Num) {
		$i94Num = randomString(11, true);
	}
	if (!$passNum) {
		$passNum = randomString($FIELD_LENGTH, true);
	}
	if (!$visaNum) {
		$visaNum = randomString(8, true);
	}
	if (!$idNum) {
		$idNum = "N" + randomString(10, true);
	}

	// Set fields
	_setValue($ssapPage10ArrivalForeignI94Number, $i94Num);
	_setValue($ssapPage10ArrivalForeignPassportNumber, $passNum);
	_setValue($ssapPage10ArrivalForeignCountry, $country);
	_setValue($ssapPage10ArrivalForeignExpire, $expire);
	_setValue($ssapPage10ArrivalForeignVisaNumber, $visaNum);
	_setValue($ssapPage10ArrivalForeignIDNumber, $idNum);
}

function enterNoticeInfo($alienNum, $i94Num) {
	// Generate random if necessary
	if (!$alienNum) {
		$alienNum = randomString(9, true);
	}
	if (!$i94Num) {
		$i94Num = randomString(11, true);
	}

	// Set fields
	_setValue($ssapPage10NoticeAlienNumber, $alienNum);
	_setValue($ssapPage10NoticeI94Number, $i94Num);
}

function enterForeignPassInfo($i94Num, $passNum, $country, $expire, $idNum) {
	// Generate random if necessary
	if (!$i94Num) {
		$i94Num = randomString(11, true);
	}
	if (!$passNum) {
		$passNum = randomString($FIELD_LENGTH, true);
	}
	if (!$idNum) {
		$idNum = "N" + randomString(10, true);
	}

	// Set fields
	_setValue($ssapPage10ForeignPassI94Number, $i94Num);
	_setValue($ssapPage10ForeignPassNumber, $passNum);
	_setSelected($ssapPage10ForeignPassCountry, $country);
	_setValue($ssapPage10ForeignPassExpire, $expire);
	_setValue($ssapPage10ForeignPassIDNumber, $idNum);
}

function enterReentryInfo($alienNum, $expire) {
	// Generate random if necessary
	if (!$alienNum) {
		$alienNum = randomString(9, true);
	}

	// Set fields
	_setValue($ssapPage10ReentryAlienNumber, $alienNum);
	_setValue($ssapPage10ReentryExpire, $expire);
}

function enterRefugeeInfo($alienNum, $expire) {
	// Generate random if necessary
	if (!$alienNum) {
		$alienNum = randomString(9, true);
	}

	// Set fields
	_setValue($ssapPage10RefugeeAlienNumber, $alienNum);
	_setValue($ssapPage10RefugeeExpire, $expire);
}

function enterNonimmigrantInfo($idNum, $i94Num, $passNum, $country, $expire) {
	// Generate random if necessary
	if (!$idNum) {
		$idNum = "N" + randomString(10, true);
	}
	if (!$i94Num) {
		$i94Num = randomString(11, true);
	}
	if (!$passNum) {
		$passNum = randomString($FIELD_LENGTH, true);
	}

	// Set fields
	_setValue($ssapPage10NonimmigrantIDNumber, $idNum);
	_setValue($ssapPage10NonimmigrantI94Number, $i94Num);
	_setValue($ssapPage10NonimmigrantPassportNumber, $passNum);
	_setValue($ssapPage10NonimmigrantCountry, $country);
	_setValue($ssapPage10NonimmigrantExpire, $expire);
}

function enterExchangeInfo($idNum, $i94Num, $passNum, $expire) {
	// Generate random if necessary
	if (!$idNum) {
		$idNum = "N" + randomString(10, true);
	}
	if (!$i94Num) {
		$i94Num = randomString(11, true);
	}
	if (!$passNum) {
		$passNum = randomString($FIELD_LENGTH, true);
	}
}

function selectIfSameNameOnDocuments($bool) {
	// Click the correct radio button
	if ($bool.toUpperCase() === "YES") {
		_click($ssapPage10SameNameBullets[0]);
	}
	else if ($bool.toUpperCase() === "NO") {
		_click($ssapPage10SameNameBullets[1]);
	}
}

function enterDocumentNameInfo($firstName, $middleName, $lastName, $suffix) {
	// Generate random if necessary
	if (!$firstName) {
		$firstName = randomString($FIELD_LENGTH);
	}
	if (!$middleName) {
		$middleName = randomString($FIELD_LENGTH);
	}
	if (!$lastName) {
		$lastName = randomString($FIELD_LENGTH);
	}

	// Set fields
	_setValue($ssapPage10SameNameFirstName, $firstName);
	_setValue($ssapPage10SameNameMiddleName, $middleName);
	_setValue($ssapPage10SameNameLastName, $lastName);
	_setSelected($ssapPage10SameNameSuffix, $suffix);
}

function selectIfUSPermanentResident($bool) {
	// Click the correct radio button
	if ($bool.toUpperCase() === "YES") {
		_click($ssapPage10ResidenceBullets[0]);
	}
	else if ($bool.toUpperCase() === "NO") {
		_click($ssapPage10ResidenceBullets[1]);
	}
}

function selectIfServicedMilitary($bool) {
	// Click the correct radio button
	if ($bool.toUpperCase() === "YES") {
		_click($ssapPage10MilitaryBullets[0]);
	}
	else if ($bool.toUpperCase() === "NO") {
		_click($ssapPage10MilitaryBullets[1]);
	}
}

function verifySSAPPage11($num) {
	$num = $num -1;
	// Variables
	var $fullName = $ssapPeople[$num].fullName(true);

	// Set accessors
	$ssapPage11Name = _span("/"+$fullName+"/");
	var $ssapPage11Accessors = [$ssapPage11Header, $ssapPage11Name];

	$ssapPage11HispanicHeader = _span("Is " + $fullName + " of Hispanic, Latino, or Spanish origin?");
	var $ssapPage11HispanicAccessors = [$ssapPage11HispanicHeader];
	$ssapPage11HispanicAccessors.push.apply($ssapPage11HispanicAccessors, $ssapPage11HispanicBullets);

	$ssapPage11EthnicityOptions = [];
	for (var $i = 0; $i <=  3; $i++) {
		$ssapPage11EthnicityOptions.push(_label("usa-checkbox__label gi-checkbox__label undefined[" + $i + "]"));
	}
	var $ssapPage11EthnicityAccessors = [$ssapPage11EthnicityHeader];
	$ssapPage11EthnicityAccessors.push.apply($ssapPage11EthnicityAccessors, $ssapPage11EthnicityOptions);

	$ssapPage11RaceOptions = [];
	for (var $i = 4; $i <= 18; $i++) {
		$ssapPage11RaceOptions.push(_label("usa-checkbox__label gi-checkbox__label undefined[" + $i + "]"));
	}
	var $ssapPage11RaceAccessors = [$ssapPage11RaceHeader];
	$ssapPage11RaceAccessors.push.apply($ssapPage11RaceAccessors, $ssapPage11RaceOptions);

	// Verify accessors
	verifyArray($ssapPage11Accessors);
	verifyArray($ssapPage11HispanicAccessors);

	_click($ssapPage11HispanicBullets[0]);
	verifyArray($ssapPage11EthnicityAccessors);
	var $length = $ssapPage11EthnicityOptions.length;
	var $accessor = $ssapPage11EthnicityOptions[$length-1];
	_click($accessor);
	_assertVisible($ssapPage11EthnicityOther);
	_click($accessor);

	verifyArray($ssapPage11RaceAccessors);
	$length = $ssapPage11RaceOptions.length;
	$accessor = $ssapPage11RaceOptions[$length - 1];
	_click($accessor);
	_assertVisible($ssapPage11RaceOther);
	_click($accessor);

	_click($ssapPage11HispanicBullets[1]);
}

function selectHispanic($bool) {
	// Click the correct radio button
	if ($bool.toUpperCase() === "YES") {
		_click($ssapPage11HispanicBullets[0]);
	}
	else if ($bool.toUpperCase() === "NO") {
		_click($ssapPage11HispanicBullets[1]);
	}
}

function selectEthnicity($index, $val) {
	// Generate random if necessary
	if ($index === undefined) {
		$index = Math.floor(Math.random() * ($ssapPage11EthnicityOptions.length - 1));
	}
	if (!$val) {
		$val = randomString($FIELD_LENGTH);
	}

	// Set other if necessary
	if ((typeof $index === 'string' || $index instanceof String) && $index.toUpperCase() === "OTHER") {
		var $accessor = $ssapPage11EthnicityOptions[$ssapPage11EthnicityOptions.length - 1];
		_check($accessor);
		_setValue($ssapPage11EthnicityOther, $val);
	}
	else {
		// Set field
		var $accessor = $ssapPage11EthnicityOptions[$index];
		_check($accessor);
	}
}

function selectRaceAndEthnicity($race){
	if($race =="AI"){
		_click(_label("American Indian or Alaska Native"));
	}
}

function selectRace($index, $val) {
	// Generate random if necessary
	if ($index === undefined) {
		$index = Math.floor(Math.random() * ( $ssapPage11RaceOptions.length - 1));
	}
	if (!$val) {
		$val = randomString($FIELD_LENGTH);
	}

	// Set other if necessary
	if ((typeof $index === 'string' || $index instanceof String) && $index.toUpperCase() === "OTHER") {
		var $accessor = $ssapPage11RaceOptions[$ssapPage11RaceOptions.length - 1];
		_check($accessor);
		_setValue($ssapPage11RaceOther, $val);
	}
	else {
		// Set field
		var $accessor = $ssapPage11RaceOptions[$index];
		_check($accessor);
	}
}

function clickAndEnterAmericanAndAlskanNativeInfo($name,$state, $tribeName){
	_click(_label("/"+$name+"/"));
	if(!$state){
		_setSelected(_select("state"), "Nevada");
	}
	if(!$tribeName){
		_setSelected(_select("tribeName"), "Fort Mojave Indian Tribe (Arizona, California and Nevada)");
	}
}

function verifySSAPPage12() {
	if($ssapPeople.length >1){
		// Set accessors

		//$ssapPage12LivingInstructions = _paragraph("/Do any of the people below live at an address other than " + $ssapHomeAddressAddress1 + ", " + $ssapHomeAddressCity + ", NV,/");

		$ssapPage12LivingOptions = [];
		for (var $i = 0; $i < $ssapPeople.length + 1; $i++) {
			//$ssapPage12LivingOptions.push(_checkbox("householdContactAddress[" + $i + "]"));
			$ssapPage12LivingOptions.push(_label("usa-checkbox__label gi-checkbox__label undefined["+$i+"]"));
		}

		$ssapPage12LivingAccessors = [$ssapPage12LivingHeader, $ssapPage12LivingInstructions];
		$ssapPage12LivingAccessors = $ssapPage12LivingAccessors.push.apply($ssapPage12LivingAccessors, $ssapPage12LivingOptions);

		// Verify accessors
		_assertVisible($ssapPage12Header);

		verifyArray($ssapPage12LivingAccessors);

		for (var $i = 1; $i < $ssapPeople.length; $i++) {
			var $accessor = $ssapPage12LivingOptions[$i - 1];
			_click($accessor);
			verifyAddressOfApplicant($i-1);
			// added for nv
		}
		var $accessor = $ssapPage12LivingOptions[$ssapPeople.length - 1];
		_click($accessor);
	}
	else {
		_log("This Page Is not available for single user");
		verifySSAPPage13();
		$ssapPageIndex=13;
	}
}

function verifyAddressOfApplicant($num) {
	// Variables
	var $fullName = $ssapPeople[$num].fullName();
	//$num++;
	_assertVisible(_paragraph("/Please provide your address/"));
	_click(_submit("Add Address["+$num+"]"));

	// Verify accessors
	//_assertVisible(_paragraph("Where does " + $fullName + " live?"));
	_assertVisible(_textbox("streetAddress1"));
	_assertVisible(_textbox("streetAddress2"));

	_assertVisible(_textbox("city"));
	_assertVisible(_textbox("Zip"));
	_assertVisible(_select("state"));
	_assertVisible(_select("countyCode"));
	_click(_button("/Cancel/"));
}

function enterDifferentAoplicantAddress($num, $addr1, $addr2, $city, $zip, $state, $county)  {
	// Variables
	$num++;
	var $index = $num - 2;

	// Default county to first option
	if (!$county) {
		$county = 1;
	}

	// Open the form
	var $accessor = $ssapPage12LivingOptions[$index];
	_check($accessor);

	// Set the fields
	_setValue(_textbox("applicant_or_non-applican_address_1" + $num), $addr1);
	_setValue(_textbox("applicant_or_non-applican_address_2" + $num), $addr2);
	_setValue(_textbox("city" + $num), $city);
	_setValue(_textbox("zip" + $num), $zip);
	_setSelected(_select("applicant_or_non-applican_state" + $num), $state);
	$accessor = _select("home_primary_county[" + ($num - 1) + "]");
	_setSelected($accessor, $county);
}

function selectOutsideIdaho($num, $bool, $city, $zip, $state) {
	// Variables
	$num++;
	var $index = $num - 2;

	// Open the form
	var $accessor = $ssapPage12LivingOptions[$index];
	_check($accessor);

	// Click the correct radio button
	if ($bool.toUpperCase() === "YES") {
		_click(_radio("TemporarilyLivingOutsideIndicatorYes" + $num));
	}
	else if ($bool.toUpperCase() === "NO") {
		$index++;
		_click(_radio("TemporarilyLivingOutsideIndicatorNo[" + $index + "]"));
	}

	// Set fields if necessary
	if ($bool.toUpperCase() === "YES") {
		_setValue(_textbox("applicant2city" + $num), $city);
		_setValue(_textbox("applicant-2-zip" + $num), $zip);
		_setSelected(_select("applicant_or_non-applican_stateTemp" + $num), $state);
	}
}

function ssapPage12SetNobody() {
	// Set field
	var $accessor = $ssapPage12LivingOptions[$ssapPeople.length - 1];
	_check($accessor);
}

function verifySSAPPage13() {
	// Update state
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		$ssapPeople[$i].$native = "No";
	}

	// Set accessors
	$ssapPage13FamilyOptions = [];
	for (var $i = 0; $i <= $ssapPeople.length; $i++) {
		$ssapPage13FamilyOptions.push(_label("gi-checkbox-label[" + $i + "]"));
	}
	$ssapPage13FamilyAccessors = [$ssapPage13FamilyInstructions, $ssapPage13FamilyHeader];
	$ssapPage13FamilyAccessors.push.apply($ssapPage13FamilyAccessors, $ssapPage13FamilyOptions);

	// Verify accessors
	//_assertVisible($ssapPage13Header);
	verifyArray($ssapPage13FamilyAccessors);

	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		_click($ssapPage13FamilyOptions[$i]);
		verifyTribe($i);
	}
	var $accessor = $ssapPage13FamilyOptions[$ssapPage13FamilyOptions.length - 1];
	_click($accessor);
}

function verifyTribe($num) {
	// Variables
	var $fullName = $ssapPeople[$num].fullName(true);

	// Verify accessors
	//_assertVisible(_span("Is " + $fullName + " a member of a federally recognized tribe?"));

	//_assertVisible(_label("Yes["+$num+"]"));
	//_assertVisible(_label("No["+$num+"]"));


	//_click(_label("Yes["+$num+"]"));
	_assertVisible(_select("state["+$num+"]"));
	_assertVisible(_select("tribeName["+$num+"]"));
}

function selectAndEnterNativeInfo($num, $bool, $state, $tribe) {
	// Generate random if necessary
	if ($bool.toUpperCase() === "YES" && $state === undefined) {
		$state = Math.floor(Math.random() * ($SSAP_PAGE_13_STATE_LENGTH - 1)) + 1;
	}
	if ($bool.toUpperCase() === "YES" && $tribe === undefined) {
		$tribe = 1;
	}

	// Update state
	$ssapPeople[$num].$native = "Yes";

	// Set fields
	var $accessor = $ssapPage13FamilyOptions[$num];
	_check($accessor);

	if ($bool.toUpperCase() === "YES") {
		_click(_radio("AmericonIndianQuestionRadioYes" + ($num + 1)));
		_setSelected(_select("americonIndianQuestionSelect" + ($num + 1)), $state);
		_setSelected(_select("tribeName" + ($num + 1)), $tribe);
	}
	else if ($bool.toUpperCase() === "NO") {
		_click(_radio("AmericonIndianQuestionRadioNo" + ($num + 1)));
	}
}

function ssapPage13SetNobody() {
	// Update state
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		$ssapPeople[$i].$native = "No";
	}

	// Set field
	var $accessor = $ssapPage13FamilyOptions[$ssapPage13FamilyOptions.length - 1];
	_check($accessor);
}

function verifySSAPPage7() {
	// Set accessors
	$ssapPage07HouseholdInstructions = _paragraph("Here are the " + $ssapPeople.length + " members in your household. Please answer the following questions to help us establish everyone's relationship to each other.");
	//$ssapPage07HouseholdInstructions2 = _paragraph("If you have a dependent who is disabled and is 25 years or older, please select either \"Parent/Caretaker\" or \"Court Appointed Guardian\" as your relationship to that person.", _in(_div("usa-alert-body")));

	$ssapPage07HouseholdAccessors = [$ssapPage07HouseholdHeader, $ssapPage07HouseholdInstructions];
	_assertVisible($ssapPage07Header);
	verifyArray($ssapPage07HouseholdAccessors);

	//	var $membersInHousehold = _collectAttributes("_listItem", "/.*/", "innerText", _in(_div("subsection")));
	//	_log($membersInHousehold);
	//	_assertEqual($ssapPeople.length, $membersInHousehold.length);
	//	for (var $i = 0; $i < $ssapPeople.length; $i++) {
	//		_assertEqual($ssapPeople[$i].$firstName + " " + $ssapPeople[$i].$lastName, $membersInHousehold[$i]);
	//	}

	// Verify relationship accessors
	for (var $i = 0; $i < $ssapPeople.length - 1; $i++) {
		verifyPersonOnSSAPPage07($i);
	}

}


function verifyPersonOnSSAPPage07($num) {
	// Variables
	var $fullName = $ssapPeople[$num].fullName(false);

	// Set accessors
	var $header = _div("subsection");
	//_listItem("relationshipSelection" + ($num + 1));

	// Verify accessors
	_assertVisible($header);
	_assertTrue(new RegExp("How is " + $fullName + " related to").test(_getText($header)));

	// Verify relationship to other people accessors
	for (var $i = $num + 1; $i < $ssapPeople.length; $i++) {
		var $otherFullName = $ssapPeople[$i].fullName(false);
		_assertVisible(_label($fullName + " is " + $otherFullName + "'s"));
		var $menu = _select($i - $num - 1, _in($header));
		_assertVisible($menu);
		_setSelected($menu, 1);
	}
	for (var $i = $num + 1; $i < $ssapPeople.length; $i++) {
		var $otherFullName = $ssapPeople[$i].fullName(false);
		var $menu = _select($i - $num - 1, _in($header));
		_setSelected($menu, 0);
	}
}

function selectRelationship($first, $second, $relationship, $member, $applicantsGuidIds) {
	// Set accessors
	var $header;
	var $menu;
	if((_isVisible(_heading4("Life Change Event: Change in Dependents")))|| (_isVisible(_span("Selected Events")))){
		$header = _listItem("ng-scope["+ ($first +$second +1)+"]");
		$menu =  _select("ddlRelationship"+($first + $second));
		if($first > $second){

			$menu = _select($first - $second - 1, _in($header));
		}
		else {
			$menu = _select($second - $first - 1, _in($header));
		}
		var $str =_collect("_div","/ng-scope/","sahiText",_in($header));
		var $el=$str.length;
		clickAddMember
			if(!_getAttribute(_select("ddlRelationship"+$el),"disabled")){

				var $disabledOptions=[];
				var $options = _collect("_option","/.*/",_in(_select("ddlRelationship"+$el)));
				// here $element is the select element which contains all the options.
				// collect the HTML elements of options in the select element
				_getText($options[2])
					_assertEqual(true,_getAttribute($options[2],"disabled"));
			}
	}
	else {
		$header = _div("subsection");
		/*
for (var $i = 0; $i < $applicantsGuidIds.length; $i++) {
if ($applicantsGuidIds[$i]["first_name"] == $first) {
$guid1 = $applicantsGuidIds[$i]["applicant_guid"];
_log($guid1);
}
else if($applicantsGuidIds[$i]["first_name"] == $second){
$guid2 = $applicantsGuidIds[$i]["applicant_guid"];
_log($guid2);
}
}*/
		//$menu = _select(("relation_"+$guid1 +"_") + "to_" + ($guid2));
		var $firstMember = $ssapPeople[$first].fullName(true);
		var $secondMember = $ssapPeople[$second].fullName(true);
		$menu = _select(0, _near(_label($firstMember+" is "+$secondMember+"'s")));
	}

	// Set field
	_setSelected($menu, $relationship);
	//	$ssapPeople[0].relation ="Self";
	//if($relationship.indexOf("Parent") != -1){
	//	$relationship = "Child"
	//}
	//$ssapPeople[$member].relation = $relationship;

}

function clickContinueToClosePopUpForChildGreaterThan26(){
	_assertVisible(_paragraph("This household member(s) will need to apply separately and will be marked as \"not seeking coverage\" in this application:"));
	_click($ssapContinue1);
	verifySSAPPage15();
}

function verifySSAPPage15() {
	// Verify accessors
	if(_exists(_paragraph("This household member(s) will need to apply separately and will be marked as \"not seeking coverage\" in this application:")))
	{
		return;
	}
	_assertVisible($ssapPage15Header);
	verifyArray($ssapPage15InfoAccessors);

	// Verify information on each person
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		verifyPersonOnSSAPPage15($i);
		//verifyNativeOnSSAPPage15($i);
	}
}

function verifyPersonOnSSAPPage15($num){
	var $fullName = $ssapPeople[$num].fullName(true);
	if($num == 0)
		_assertVisible(_heading4($fullName+" (Primary Contact)"));
	else
		_assertVisible(_heading4($fullName));
	_assertVisible(_button("Edit["+$num+"]"));
	var $seekingCoverage = $ssapPeople[$num].$applying
		//		_assertVisible(_div($seekingCoverage, _rightOf(_div("Applying for Coverage["+$num+"]"))));
		var $gender = $ssapPeople[$num].$gender
			$gender = capitalizeFirstLetter($gender)
				//			_assertVisible(_div($gender, _rightOf(_div("Gender["+$num+"]"))));
				var $ind = $ssapPeople[$num].$SSN.length - 4;
	var $SSNval = $ssapPeople[$num].$SSN.substring($ind);
	_assertVisible(_div("***-**-"+$SSNval, _near(_div("Social Security Number["+$num+"]"))));

	//_assertVisible(_heading3("More About This Household"));
	//_assertVisible(_paragraph("Members of a federally recognized tribe"));

	//var $name = _getText(_span($num*2, _near(_paragraph("Members of a federally recognized tribe"))));
	//var $native = _getText(_span($num*2+1, _near(_paragraph("Members of a federally recognized tribe"))));

	//_assertEqual($ssapPeople[$num].fullName(true), $name);
	//_assertEqual($ssapPeople[$num].$native, $native);

}

//delete this fun
function nvverifyPersonOnSSAPPage15($num, $fromPage17, $isEligibleForCoverage) {
	// Variables
	var $fullName = $ssapPeople[$num].fullName(true);
	var $accessors;
	// Set accessors
	var $div;
	var $table;
	if(_isVisible(_heading3("Review and Confirm"))){
		//$table = _table("table table-striped ng-scope[" + $num + "]");
		$table = _div("usa-width-one-whole usa-grid bordered["+$num+"]")
			//var $header = _heading5(0, _in($table));
			var $header = _heading4(0, _in($table));
		var $coverage = _span(0, _rightOf(_span("Applying for Coverage",(_in($table)))));
		//_cell(3, _in($table));
		var $gender = _span(0, _rightOf(_span("Gender",(_in($table)))));
		//_cell(5, _in($table));
		var $SSN = _span(0, _rightOf(_span("Social Security Number",(_in($table)))));
		//_cell(7, _in($table));
		var $SSNName = _span(0, _rightOf(_span("Name on SSN Card",(_in($table)))));
		//_cell(9, _in($table));
		var $citizen = _span(0, _rightOf(_span("US Citizen or US National",(_in($table)))));
		//_cell(11, _in($table));
		var $homeAddress = _span(0, _rightOf(_span("Home Address",(_in($table)))));
		//_cell(13, _in($table));
		if ($num === 0) {
			var $mailingAddress = _span(0, _rightOf(_span("Mailing Address",(_in($table)))));
			//_cell(15, _in($table));
			$accessors = [$table, $header, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress, $mailingAddress];
		}
		else {
			$accessors = [$table, $header, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress];
		}
		// Verify accessors
		//verifyArray($accessors);
	}
	else {
		if ($fromPage17) {
			$div = _div("hixApplicantInfo[" + ($num + $ssapPeople.length + 2) + "]");
		}
		else {
			$div = _div("hixApplicantInfo[" + $num + "]");
		}
		var $header = _heading5(0, _in($div));
		var $edit = _button("Edit", _in($div));
		var $coverage = _cell(1, _in($div));
		var $gender = _cell("camelCaseName", _in($div));
		var $SSN = _cell(5, _in($div));
		var $SSNName = _cell(7, _in($div));
		var $citizen = _cell(9, _in($div));
		var $homeAddress = _cell(11, _in($div));
		if ($num === 0) {
			var $mailingAddress = _cell(13, _in($div));
			$accessors = [$div, $header, $edit, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress, $mailingAddress];
		}
		else {
			$accessors = [$div, $header, $edit, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress];
		}
		// Verify accessors
		//verifyArray($accessors);
	}

	// Verify content
	if ($num === 0) {
		if(_isVisible(_heading3("Review and Confirm")))
		{
			if($removePrimary=="false"){
				_assertEqual("/"+$fullName+"/", _getText($header));
			}
		}
		else {
			_assertEqual($fullName + " (Primary Contact)", _getText($header));
		}
	}
	else {
		_assertEqual($fullName, _getText($header));
	}

	if($isEligibleForCoverage === undefined || $isEligibleForCoverage){
		_assertEqual($ssapPeople[$num].$applying, _getText($coverage));
	}
	else{
		_assertEqual("No", _getText($coverage));
	}

	_assertEqual("/"+$ssapPeople[$num].$gender+"/i", _getText($gender));

	var $ind = $ssapPeople[$num].$SSN.length - 4;
	var $SSNval = $ssapPeople[$num].$SSN.substring($ind);
	var $expSSN=_getText($SSN);
	if($expSSN=="N/A"){
		$expSSN="NA--";
	}
	_assertTrue(new RegExp($SSNval).test($expSSN));
	var $expected= _getText($SSNName);
	if($expected=="N/A"){
		$expected="--NA--";
	}
	_assertEqual($ssapPeople[$num].$SSNName, $expected);
	_assertEqual($ssapPeople[$num].$citizen, _getText($citizen));
	_assertTrue(new RegExp($ssapPeople[$num].$homeAddress1).test(_getText($homeAddress)));
	if ($ssapPeople[$num].$homeAddress2) {
		_assertTrue(new RegExp($ssapPeople[$num].$homeAddress2).test(_getText($homeAddress)));
	}
	_assertTrue(new RegExp($ssapPeople[$num].$homeCity).test(_getText($homeAddress)));
	_assertTrue(new RegExp($ssapPeople[$num].$homeZip).test(_getText($homeAddress)));

	if ($num === 0) {
		if ($ssapPeople[$num].$mailingAddress1 === "Same as home address") {
			if(_isVisible(_heading3("Final Review and Confirmation Print Download"))) {
				_assertTrue(new RegExp($ssapPeople[$num].$homeAddress1).test(_getText($homeAddress)));
				if ($ssapPeople[$num].$homeAddress2) {
					_assertTrue(new RegExp($ssapPeople[$num].$homeAddress2).test(_getText($homeAddress)));
				}
				_assertTrue(new RegExp($ssapPeople[$num].$homeCity).test(_getText($homeAddress)));
				_assertTrue(new RegExp($ssapPeople[$num].$homeZip).test(_getText($homeAddress)));
			}
			else{
				_assertEqual($ssapPeople[$num].$mailingAddress1, _getText($mailingAddress));
			}
		}
		else {
			_assertTrue(new RegExp($ssapPeople[$num].$mailingAddress1).test(_getText($mailingAddress)));
			if ($ssapPeople[$num].$mailingAddress2) {
				_assertTrue(new RegExp($ssapPeople[$num].$mailingAddress2).test(_getText($mailingAddress)));
			}
			_assertTrue(new RegExp($ssapPeople[$num].$mailingCity).test(_getText($mailingAddress)));
			_assertTrue(new RegExp($ssapPeople[$num].$mailingZip).test(_getText($mailingAddress)));
		}
	}
}

function verifyNativeOnSSAPPage15($num, $fromPage17) {
	var $table;
	var $number;
	if ($fromPage17) {
		$table = _div("usa-width-one-whole[1]");
		//_table("summary-table margin40-b camelCaseName[1]");
	}
	else if(_isVisible(_heading4("Life Change Event: Final Review and Confirmation"))){
		$table =_table("table table-striped ng-scope", _near(_heading4("More about this household")));
	}
	else {
		//$table = _table("summary-table margin40-b camelCaseName");
		_div(0, _under(_heading3("More About This Household")));
	}
	var $name;
	var $native;
	if(_isVisible(_heading4("Life Change Event: Final Review and Confirmation")))
	{
		$number=$num+1;
		$name = _cell($number * 2, _in($table));
		$native = _cell($number * 2 + 1, _in($table));
	}
	else {
		//$name = _cell($num * 2, _in($table));
		//$native = _cell($num * 2 + 1, _in($table));
		$name = _span($num * 2, _in(_div(0, _under(_heading3("More About This Household")))));
		$native = _span($num * 2 +1, _in(_div(0, _under(_heading3("More About This Household")))));


	}
	var $accessors = [$table, $name, $native];

	// Verify accessors
	//verifyArray($accessors);

	// Verify content
	_assertEqual($ssapPeople[$num].fullName(true), _getText($name));
	_assertEqual($ssapPeople[$num].$native, _getText($native));
}

function clickEditOnSSAPPage15($num) {
	// Click button
	_click(_button("Edit[" + $num + "]"));

	// Update state
	$ssapPageIndex = 8;
	$currentPerson = $num;
	$editingPerson = true;
}

function verifySSAPPage16() {
	// Verify accessors
	verifyArray($ssapPage16Accessors);
}

function verifySSAPPage17() {
	// Verify accessors

	verifyArray($ssapPage17ReviewAccessors);

	// Verify primary contact information
	//	verifyPrimaryContactInfoOnSSAPPage17();

	// Verifying applying for health coverage table
	//	verifyApplyingOnSSAPPage17();
	/*
fix---Final Application Review page

var $table = _table("table table-condensed");

// Verify each person's information
for (var $i = 0; $i < $ssapPeople.length; $i++) {
var $row = _row($i + 1, _in($table));
var $convertedDate = convertDate($ssapPeople[$i].$doB);
var $age = calculateAge($ssapPeople[$i].$doB);
var $relationship = _cell(1, _in($row));
var $relation =  _getText($relationship);
if(($relation != "Self" && $relation != "Ward of court-appointed guardian" && $relation != "Spouse") && $age > 25){
verifyPersonOnSSAPPage15($i, true,false);
}
else{
verifyPersonOnSSAPPage15($i, true,true);
}
}
*/
	// Verify each person's Native American status
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		//verifyNativeOnSSAPPage15($i, true);

		verifyPersonOnSSAPPage15($i);
	}
}

function verifyPrimaryContactInfoOnSSAPPage17() {
	// Set accessors
	var $fullName = $ssapPeople[0].fullName(true);

	var $table =  _parentNode(_heading4($fullName), "DIV", 2);
	//_div("usa-width-one-whole usa-grid bordered");
	var $email = _div(0, _rightOf(_span("Email", _in($table))));
	var $phone =  _div(0, _rightOf(_span("Phone", _in($table))));
	var $doB = _div(0, _rightOf(_span("Date of Birth", _in($table))));
	var $homeAddress =  _div(0, _rightOf(_span("Home Address", _in($table))));
	var $mailingAddress = _div(0, _rightOf(_span("Mailing Address", _in($table))));
	var $secondPhone = _div(0, _rightOf(_span("Second Phone Number", _in($table))));
	var $spoken = _div(0, _rightOf(_span("Preferred Spoken Language", _in($table))));
	var $written = _div(0, _rightOf(_span("Preferred Written Language", _in($table))));
	var $communication = _div(0, _rightOf(_span("Preferred Method of Communication", _in($table))));


	//var $accessors = [$header, $table, $email, $phone, $doB, $homeAddress, $mailingAddress, $preferredPhone, $secondPhone, $spoken, $written, $communication];
	var $accessors = [$table, $email, $phone, $doB, $homeAddress, $mailingAddress,$secondPhone, $spoken, $written, $communication];


	// Verify Information
	//	_assertEqual("/"+$ssapEmail+"/i", _getText($email));

	var $phoneVal;
	//if ($ssapPreferredPhone) {
	$phoneVal = $ssapPreferredPhone;
	//	if ($ssapSecondPhone) {
	//		$phoneVal += " / " + $ssapSecondPhone;
	//	}
	//}
	//else if ($ssapSecondPhone) {
	//	$phoneVal = $ssapSecondPhone;
	//}
	//if ($ssapExt) {
	//	$phoneVal += " Ext.: " + $ssapExt;
	//}
	//$phoneVal = $phoneVal.replace(/\-/g, " ");
	var $phonePageVal = _getText($phone).replace(/\D/g, '')//_getText($phone).replace(/\-/g, " ");
		_assertEqual($phoneVal, $phonePageVal);

	//var $convertedDate = convertDate($ssapDoB);

	var $dob = _getText($doB);
	$dob = _call(window.moment($dob).format("MMDDYYYY"));

	//_assertEqual($ssapDoB, $doB);

	var $homeAddressVal = _getText($homeAddress);
	_assertTrue(new RegExp($ssapHomeAddress1).test($homeAddressVal));
	//_assertTrue(new RegExp($ssapHomeZip).test($homeAddressVal));

	var $mailingAddressVal = _getText($mailingAddress);
	if ($ssapMailingAddress1 === "Same as home address") {
		_assertTrue(new RegExp($ssapHomeAddress1).test($mailingAddressVal));
		//_assertTrue(new RegExp($ssapHomeZip).test($mailingAddressVal));
	}
	else {
		_assertTrue(new RegExp($ssapMailingAddress1).test($mailingAddressVal));
		//_assertTrue(new RegExp($ssapMailingZip).test($mailingAddressVal));
	}

	//$phoneVal = $ssapPreferredPhone.replace(/\-/g, " ");
	//$phoneVal = escapeRegExp($phoneVal);
	//$phonePageVal = _getText($preferredPhone).replace(/\-/g, " ");
	//_assertTrue(new RegExp($phoneVal).test($phonePageVal));

	$phoneVal = $ssapSecondPhone//.replace(/\-/g, " ");
		$phoneVal = escapeRegExp($phoneVal);
	$phonePageVal = _getText($secondPhone)//.replace(/\-/g, " ");
		//_assertTrue(new RegExp($phoneVal).test($phonePageVal));
		_assertEqual($ssapSpoken, _getText($spoken));
	_assertEqual($ssapWritten, _getText($written));
	_assertTrue(new RegExp($ssapCommunication, "i").test(_getText($communication)));
}

function verifyApplyingOnSSAPPage17() {

	// Verify information for each person

	_windowAction("maximize");
	// mazimize window.
	for (var $i = 0; $i < $ssapPeople.length; $i++) {

		var $name= _getText(_span($i, _under(_span("Name", _under(_heading3("/Applying for health coverage/i"))))));
		//var $relationship = _getText(_span($i, _under(_span("Relationship", _under(_heading3("Applying for health coverage"))))))
		//var $doB =  _getText(_span($i, _under(_span("Date of Birth", _under(_heading3("Applying for health coverage"))))))
		//var $seekingCoverage = _getText(_span($i, _under(_span("Seeking Coverage", _under(_heading3("Applying for health coverage"))))));


		// Verify information
		_assertEqual("/"+$ssapPeople[$i].fullName(true)+"/", $name);

		//if ($i === 0) {
		//	var $relation = "Self"
		//}
		//else
		var $relation = $ssapPeople[$i].relationShip
			//}
			var $convertedDate = ($ssapPeople[$i].$doB).replace(/\//g, "");
		//_assertEqual($convertedDate, $doB);
		//_assertEqual($convertedDate, $doB.replace(/\//g, ""));

		var $age = calculateAge($ssapPeople[$i].$doB);

		if(($relation != "Self" && $relation != "Ward of court-appointed guardian" && $relation != "Spouse") && $age > 25){
			//_assertEqual("No", $seekingCoverage);
			var $seekingCoverage = "No";
		}
		//else{
		//_assertEqual($ssapPeople[$i].$applying, $seekingCoverage);
		//}
	}
}

function verifySSAPPage18() {
	// Variables
	var $fullName = $ssapPeople[0].fullName();

	// Set accessors
	$ssapPage18IncarceratedOptions = [];
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		//$ssapPage18IncarceratedOptions.push(_checkbox("FNLNS[" + $i + "]"));
		$ssapPage18IncarceratedOptions.push(_label("gi-checkbox-label[" + $i + "]"));
	}
	$ssapPage18SignatureHeader = _span("/"+ $fullName + "'s Electronic Signature/");
	$ssapPage18Accessors = [$ssapPage18Header, $ssapPage18NobodyIncarcerated];
	$ssapPage18Accessors.push.apply($ssapPage18Accessors, $ssapPage18IncarceratedOptions);
	$ssapPage18Accessors.push.apply($ssapPage18Accessors, $ssapPage18UseIncomeBullets);
	$ssapPage18Accessors.push.apply($ssapPage18Accessors, [$ssapPage18SixtyDays, $ssapPage18Perjury, $ssapPage18SignatureHeader,
														   $ssapPage18Signature, $ssapPage18SubmitApp]);

	// Verify accessors
	verifyArray($ssapPage18Accessors);
}

function selectNobodyIncarcerated() {
	// Set field
	if((_isVisible(_heading4("Life Change Event: Change in Dependents")))|| (_isVisible(_span("Selected Events")))){

		_click(_radio("isIncarcerated[1]"));
	}
	else {
		_click($ssapPage18NobodyIncarcerated);
	}
}

function selectIncarcerated($num, $pendingDisposition) {
	// Generate random if necessary
	if (!$num) {
		$num = Math.floor(Math.random() * $ssapPeople.length);
	}
	if (!$pendingDisposition) {
		var $val = Math.floor(Math.random() * 2);
		if ($val === 0) {
			$pendingDisposition = "Yes";
		}
		else {
			$pendingDisposition = "No";
		}
	}

	// Set who is incarcerated
	_click($ssapPage18IncarceratedOptions[$num]);

	// Make sure new fields are visible
	var $yes = _radio("disposition" + ($num + 1));
	var $no = _radio("disposition" + ($num + 1) + "[1]");

	// Set whether pending disposition
	if ($pendingDisposition === "Yes") {
		_click($yes);
	}
	else {
		_click($no);
	}
}

function selectFutureApplications($bool, $years) {
	// Generate random if necessary
	if (!$bool) {
		var $val = Math.floor(Math.random() * 2);
		if ($val === 0) {
			$bool = true;
		}
		else {
			$bool = false;
		}
	}
	if (!$years) {
		$years = Math.floor(Math.random() * 5) + 1;
	}

	// Set fields
	if ($bool) {
		_click($ssapPage18UseIncomeBullets[0]);
	}
	else {
		_click($ssapPage18UseIncomeBullets[1]);
		_click(_radio("taxReturnPeriod" + $years));
	}
}

function selectSixtyDays($bool) {
	// Set field
	if ($bool) {
		_click($ssapPage18SixtyDays);
	}
	else {
		_click($ssapPage18SixtyDays);
	}
}

function selectPerjury($bool) {
	// Set field
	if ($bool) {
		_click($ssapPage18Perjury);
	}
	else {
		_click($ssapPage18Perjury);
	}
}

function enterSignOnSSAPPage18() {
	// Variables
	var $fullName = $ssapPeople[0].fullName();

	// Set field
	_setValue($ssapPage18Signature, $fullName);
}
//TO DO - for January
function setQualifyingEvent($event,$days){
	var $eventDetails;
	var $inGlobalOEP = inGlobalOEP();
	if($inGlobalOEP !=="ON"){
		verifySSAPQualifyingEventDetails();
		$eventDetails = enterSSAPQualifyingEventDetailsInfo($event,$days);
		clickSubmitSSAPQualifyingEventDetails();
	}
	return $eventDetails;
}
function clickSubmitSSAP($event,$days, $QEvent, $coverageYear, $people, $actionButton, $groups,$isHealthEnrollmentComplete, $isFinancial, $aptcEligible, $csrElgible,$isDentalEnrollmentComplete,$isSEP,$indexes,$applicationType,$eventType,$household,$CSRLogin,$numberOfMembersInQEP,$csLevelChange) {
	var $eventDetails
		_assertVisible($goToMyDashboard);
	_assertEqual("Go to My Dashboard", _getText($goToMyDashboard));
	_click($goToMyDashboard);
	_wait(5000);
	_wait(60000, !_isVisible(_heading3("Application is in progress...")));
	_click(_paragraph($coverageYear));
	//	}
	_log($inOEP);
	if($inOEP !="ON"){
		if($applicationType == "QEP"){
			//			_wait(60000, !_isVisible(_heading3("Application is in progress...")));
			if($actionButton != "None"){
				$actionButton = "CONFIRM EVENT AND SHOP"
					//				_call(window.location.reload());
					//				_wait(5000);
					//				_wait(60000, !_isVisible(_heading3("Application is in progress...")));
					//				_wait(2000);
					if(_isVisible(_button($actionButton))){
						verifyElementsOfIndividualDashboard($coverageYear,$people,$actionButton, $eventDate, $groups,$isHealthEnrollmentComplete, $isFinancial, $aptcEligible, $csrElgible,$isDentalEnrollmentComplete,$isSEP,$applicationType);
						_assertVisible(_link("Edit Application"));
						_click(_button($actionButton));
						verifyQualifyingLifeEventPage($people,$indexes,$applicationType);
						$eventDetails = selectQualifyingEventDuringQEPSEP($event,$days,$people,$indexes,$applicationType);
						_log($eventDetails);
						_click(_submit("Continue"));
						_assertVisible(_link("Change Event Date"));
						_assertVisible(_link("Confirm"));
						_click(_link("Confirm"));
						_wait(20000,_isVisible(_heading3("My Stuff")));
						_wait(60000, !_isVisible(_heading3("Application is in progress...")));
						if($eventDetails){
							var $event_label = $eventDetails[0];
							//DB to get "Y" or "N" for gated event
							var $isGated = getIsGatedValue($event_label,$applicationType,$eventType);
							var $button = getDashBoardButton($isGated);
							$actionButton = $button;
							_log($actionButton);
							//TO DO Eventdate
							//					}
						}
					}
			}
		}
		_wait(60000, !_isVisible(_heading3("Application is in progress...")));
		if($applicationType == "SEP"){
			if($csLevelChange){
				$actionButton = "CHANGE PLANS";
			}
			else{
				if(_isVisible(_button("CONFIRM EVENT AND FINALIZE PLANS"))){
					$actionButton = "CONFIRM EVENT AND FINALIZE PLANS";
					verifyElementsOfIndividualDashboard($coverageYear,$people,$actionButton, $eventDate, $groups,$isHealthEnrollmentComplete, $isFinancial, $aptcEligible, $csrElgible,$isDentalEnrollmentComplete,$isSEP,$applicationType,$numberOfMembersInQEP);
					_click(_button($actionButton));
					verifyQualifyingLifeEventPage($people,$indexes,$applicationType);
					$eventDetails = selectQualifyingEventDuringQEPSEP($event,$days,$people,$indexes,$applicationType);
					//set action button too
					_click(_submit("Continue"));
					if(_isVisible(_heading3("Application is in progress..."))){
						_wait(60000, !_isVisible(_heading3("Application is in progress...")));
					}

					if($eventDetails){
						var $event_label = $eventDetails[0];
						//DB to get "Y" or "N" for gated event
						var $isGated = getIsGatedValue($event_label,$applicationType,$eventType);
						var $button = getDashBoardButton($isGated,$eventType,$event_label,$isHealthEnrollmentComplete, $isDentalEnrollmentComplete);
						$actionButton = $button;

						if($actionButton == "UPLOAD DOCUMENTS"){
							_click(_button("UPLOAD DOCUMENTS"));
							//gated event Document upload 
							validFileUpload();
							setTicketAsMarkAsCompleteAfterUploadDocument($household,$CSRLogin);
							_wait(2000);
							if(_isVisible(_heading3("Application is in progress..."))){
								_wait(60000, !_isVisible(_heading3("Application is in progress...")));
							}
							//TODO: APTC during SEP will be automated
							if($isHealthEnrollmentComplete=="Y" && $isDentalEnrollmentComplete == "Y" ){
								$actionButton = "CHANGE PLANS";
							}
						}
						//Getting APTC in SEP - event is Birth and event category is ADD - allow plan select = 1 (CHANGE PLANS)
						if($isHealthEnrollmentComplete=="Y" && $isDentalEnrollmentComplete == "Y" ){
							$actionButton = "CHANGE PLANS";
						}
					}
				}
			}

		}

	}
	// For timeout message on Sign and Submit
	if($actionButton !="CONFIRM EVENT AND FINALIZE PLANS"){
		$numberOfMembersInQEP ="";
	}

	verifyElementsOfIndividualDashboard($coverageYear,$people,$actionButton, $eventDate, $groups,$isHealthEnrollmentComplete, $isFinancial, $aptcEligible, $csrElgible,$isDentalEnrollmentComplete,$isSEP,$applicationType,$numberOfMembersInQEP);
	return $eventDetails;
}
function verifyQualifyingLifeEventPage($ssapInfo,$indexes,$applicationType){
	_heading1("Life Change Reporting Qualifying Life Event")
		_assertVisible(_paragraph("Important: In order to qualify for Special Enrollment Period. you need to report and take action within 60 days of the event date. If you don't your request will most likely be denied."));
	if($applicationType == "QEP"){
		_assertVisible(_select("qualifyEventSelected"));
	}
	if($applicationType == "SEP"){
		_assertEqual("--- Select --- Adoption Birth Cancellation of hardship exemption Change in incarceration status Change in legal presence Change in tribal status Change in U.S. citizenship status Gain of American Indian/Alaska Native status Loss of employer-based health insurance coverage Loss of Medicaid Loss of other minimum essential coverage Marriage Missed Open Enrollment Moved into Nevada", _getText(_div("span5")));
		if($indexes){
			for(var $i =0 ; $i < $indexes.length; $i++){
				var $index = $indexes[$i];
				var $fullName = $ssapPeople[$index].fullName(true);
				_assertVisible(_label($fullName+" Required"));
			}
			_assertVisible(_heading4("Changes in household eligibility"));
			_assertVisible(_heading5("A recent life event may have changed the eligibility status for one or more members of your household. Please confirm the event type and date of the event for each of the people listed below."));
			_assertVisible(_heading5("Newly eligible individuals"));
			_assertEqual("NOTE:We have updated your account on Nevada Health Link and we have forwarded your demographic changes (e.g., name, SSN, mailing address) to your insurance company. There is no need for you to contact your insurance company to report this information.", _getText(_paragraph("alert alert-info margin20-t")));
		}
	}
	_assertVisible(_label("I have provided true answers to all of the questions to the best of my knowledge. I know I may be subject to penalties under federal law if I intentionally provide false information."));
}

function selectQualifyingEventDuringQEPSEP($event,$days,$ssapInfo,$indexes,$applicationType){
	if($applicationType =="QEP"){
		if(!$event && !$days){
			$event = "Marriage";
			$days = "2";
		}
		_setSelected(_select("qualifyEventSelected"), $event);
		var $date = calculateEventDate($days);
		_setValue(_textbox("Event Date Sample text.  M M/ D D/ Y Y Y Y"), $date);
	}
	else{
		for(var $i =0 ; $i < $indexes.length; $i++){
			var $index = $indexes[$i];
			var $fullName = $ssapPeople[$index].fullName(true);
			_setSelected(_select(0, _near(_label($fullName+" Required"))), $event);
			var $date = calculateEventDate($days);
			_setValue(_textbox(" Sample text.  M M/ D D/ Y Y Y Y", _near(_label($fullName+" Required"))), $date);

		}
	}
	_click(_checkbox("terms"));
	return [$event, $date];
}



function verifySSAPQualifyingEventDetails() {
	// Verify accessors
	verifyArray($ssapQualifyingEventDetailsAccessors);
}


function enterSSAPQualifyingEventDetailsInfo($event, $days) {
	/*if($days < -70){
$sepDenied =true;
}
_log($sepDenied+ "SEPDeniedValue");

if($sepDenied){
$ssapPage19Accessors = [$ssapPage19Header, $ssapPage19DoNotQualify, $ssapPage19Back];
}
*/

	// Generate random if necessary
	if (!$event) {
		//		$event = Math.floor(Math.random() * 10) + 1;
		$event = "Marriage";
		$eventNumber = $event;
	}
	else {
		$eventName = $event;
	}

	$date =calculateEventDate($days);
	var $now=_call(window.moment());
	var $currentYear =parseInt(_fetch(window.moment($now).get('year')));
	var $eventYear = parseInt(_fetch(window.moment($eventDate).get('year')));

	if($currentYear != $eventYear){
		$date ="01/01/"+$currentYear;
		//_setValue($ssapQualifyingEventDetailsDate, $date);
	}
	_setSelected($ssapQualifyingEventDetailsEvent, $event);
	_wait(5000);
	_setValue(_numberbox("month"), $date.substring(0,2));
	_setValue(_numberbox("date"), $date.substring(3,5));
	_setValue(_numberbox("year"), $date.substring(6,10));
	if(_getValue(_numberbox("year"))==""){
		_setValue(_numberbox("year"), $date.substring(6,10));
	}
	// Set fields
	$eventName= _getValue(_select("sepEvent"));

	//$eventDate = _getValue(_textbox("sepEventDate[1]"));
	$eventDate = $date;
	//if (!isProductionEnvironment()){
	//	$eventReported = getEventType($eventName,"QUALIFYING_EVENT");
	//} else {
	// Hardcoded $eventReported value for Production Environment
	// This is based on the Event Type being 'Death'
	$eventReported = "1";
	//}
	return [$eventName,$eventDate]
		//takePageScreenShot();
		}

function getDashBoardButton($isGated,$event_type, $event_label,$isHealthEnrollmentComplete, $isDentalEnrollmentComplete){
	var $dashBoardButton ;
	if($isGated == "Y"){
		$dashBoardButton = "UPLOAD DOCUMENTS";
	}
	else if($isHealthEnrollmentComplete=="Y" && $isDentalEnrollmentComplete == "Y" ){
		$dashBoardButton = "CHANGE PLANS";

	}
	else
		$dashBoardButton = "SHOP FOR PLANS";
	return $dashBoardButton
		}

function clickSubmitSSAPQualifyingEventDetails() {
	_click($ssapQualifyingEventDetailsSubmit);

	// HACK for making the AnonymousFlow test cases to run due to a known bug in the application.
	//	_wait(5000, _isVisible(_div("Change in Mailing Address")));
	if (_isVisible(_div("Change in Mailing Address"))) {
		_log("Change in Mailing Address", "CUSTOM4");
		_click(_link("OK"));
	}

	// Verify confirmation page
	//	verifySSAPPage19();
}


function verifySSAPPage19() {

	if($sepDenied){
		// Verify accessors
		verifyArray($ssapPage19Accessors);
	}
}

function clickBackToDashboardFromSSAPPage19($coverageYear,$household,$actionButton, $eventDate,$groups,$isHealthEnrollmentComplete) {
	if(_isVisible(_heading1("Confirmation")) || ($sepDenied)){
		_click($ssapPage19Back);
	}
	// Verify dashboard
	//verifyElementsOfIndividualDashboard();
	verifyElementsOfIndividualDashboard($coverageYear,$household,$actionButton, $eventDate,$groups,$isHealthEnrollmentComplete);
	//verifyUpdatePlanAndEnrollButton();
}

function countssapPeople() {
	// Compute the number of adults and children
	$numberOfAdults = 0;
	$numberOfChildren = 0;
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		$ssapPeople[$i].$age= calculateAge($ssapPeople[$i].$doB);
		if ($ssapPeople[$i].$age > 18 && $ssapPeople[$i].$applying=="Yes") {
			$numberOfAdults++;
		}
		else if ($ssapPeople[$i].$age <= 18 && $ssapPeople[$i].$applying=="Yes") {
			$numberOfChildren++;
		}
	}
}

function viewApplication($num, $isEligibleForCoverage){
	var $fullName = $ssapPeople[$num].fullName(true);
	var $accessors;
	var $div;
	var $number = $num+1;
	$div = _div("hixApplicantInfo[" + $number + "]");

	var $header = _heading5(0, _in($div));
	var $coverage = _cell(1, _in($div));
	var $gender = _cell("camelCaseName", _in($div));
	var $SSN = _cell(5, _in($div));
	var $SSNName = _cell(7, _in($div));
	var $citizen = _cell(9, _in($div));
	var $homeAddress = _cell(11, _in($div));
	if ($num === 0) {
		var $mailingAddress = _cell(13, _in($div));
		$accessors = [$div, $header, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress, $mailingAddress];
	}
	else {
		$accessors = [$div, $header, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress];
	}
	// Verify accessors
	verifyArray($accessors);

	if($num === 0){
		_assertEqual($fullName + " (Primary Contact)", _getText($header));
	}
	else {
		_assertEqual($fullName, _getText($header));
	}

	if($isEligibleForCoverage === undefined || $isEligibleForCoverage){
		_assertEqual($ssapPeople[$num].$applying, _getText($coverage));
	}
	else{
		_assertEqual("No", _getText($coverage));
	}

	_assertEqual("/"+$ssapPeople[$num].$gender+"/i", _getText($gender));

	var $ind = $ssapPeople[$num].$SSN.length - 4;
	var $SSNval = $ssapPeople[$num].$SSN.substring($ind);
	var $expSSN=_getText($SSN);
	if($expSSN=="N/A"){
		$expSSN="NA--";
	}
	_assertTrue(new RegExp($SSNval).test($expSSN));
	var $expected= _getText($SSNName);
	if($expected=="N/A"){
		$expected="--NA--";
	}
	_assertEqual($ssapPeople[$num].$SSNName, $expected);
	_assertEqual($ssapPeople[$num].$citizen, _getText($citizen));
	_assertTrue(new RegExp($ssapPeople[$num].$homeAddress1).test(_getText($homeAddress)));
	if ($ssapPeople[$num].$homeAddress2) {
		_assertTrue(new RegExp($ssapPeople[$num].$homeAddress2).test(_getText($homeAddress)));
	}
	_assertTrue(new RegExp($ssapPeople[$num].$homeCity).test(_getText($homeAddress)));
	_assertTrue(new RegExp($ssapPeople[$num].$homeZip).test(_getText($homeAddress)));

	if ($num === 0) {
		if ($ssapPeople[$num].$mailingAddress1 === "Same as home address") {
			if(_isVisible(_heading3("Final Review and Confirmation Print Download"))) {
				_assertTrue(new RegExp($ssapPeople[$num].$homeAddress1).test(_getText($homeAddress)));
				if ($ssapPeople[$num].$homeAddress2) {
					_assertTrue(new RegExp($ssapPeople[$num].$homeAddress2).test(_getText($homeAddress)));
				}
				_assertTrue(new RegExp($ssapPeople[$num].$homeCity).test(_getText($homeAddress)));
				_assertTrue(new RegExp($ssapPeople[$num].$homeZip).test(_getText($homeAddress)));
			}
			else{
				_assertEqual($ssapPeople[$num].$mailingAddress1, _getText($mailingAddress));
			}
		}
		else {

			_assertTrue(new RegExp($ssapPeople[$num].$mailingAddress1).test(_getText($mailingAddress)));
			if ($ssapPeople[$num].$mailingAddress2) {
				_assertTrue(new RegExp($ssapPeople[$num].$mailingAddress2).test(_getText($mailingAddress)));
			}
			_assertTrue(new RegExp($ssapPeople[$num].$mailingCity).test(_getText($mailingAddress)));
			_assertTrue(new RegExp($ssapPeople[$num].$mailingZip).test(_getText($mailingAddress)));
		}
	}
}

function clickResumeSSAPApplication($pageHeading){
	_click(_button("RESUME APPLICATION"));
	_assertVisible(_heading1($pageHeading),"Verify page heading");
	_assertVisible(_button("Back"),"Verify Back button is displayed");
}

function ssapSubmissionByCSR($event,$days){
	_click($ssapPage18SubmitApp);
	_wait(1500);

	_assertVisible(_div("modalCSRApplicationType"));
	_assertVisible(_radio("optCSRApplicationTypeMail"));
	_assertVisible(_radio("optCSRApplicationTypePhone"));
	_click(_radio("optCSRApplicationTypeMail"));
	var $thisYear = _fetch(window.moment().format('YYYY'));
	if($coverageYear==$thisYear){
		if($frmQEP){
			if (!$event) {
				$event = Math.floor(Math.random() * 10) + 1;
				$eventNumber = $event;
			}
			else {
				$eventName = $event;
			}
			var $inGlobalOEP = inGlobalOEP();
			if($inGlobalOEP == "ON"){
				$event = 3;
			}
			_setSelected(_select("sepEventCSR"), $event);
			$eventName= _getValue(_select("sepEventCSR")).toUpperCase();
			$date =calculateEventDate($days);
			_setValue(_textbox("sepEventDateCSR"), $date);

			$eventDate = _getValue(_textbox("sepEventDateCSR"));
			$eventReported = getEventType($eventName,"QUALIFYING_EVENT");
		}
	}
	_click(_link("btnSubmitCSRApplicationType"));
	_assertVisible(_div("modalMailingAddressNotSameAsHousehold"));
	_click(_link("OK"));
}

function goToHelpPayingForCoverage(){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Help Paying for Coverage"));
	_assertVisible(_heading3("You may be eligible for a free or low-cost plan, or tax credit to help pay your monthly premiums", _in(_div("subsection"))));
	_assertVisible(_fieldset("Do you want to find out if you can get help paying for health coverage?"));
	_assertVisible(_label("No (You will pay full cost for Exchange health coverage)"));
	_assertVisible(_label("Yes (You will have to provide income information to see what you may qualify for)"));
	_assertFalse(_getAttribute(_radio(0, _leftOf(_label("No (You will pay full cost for Exchange health coverage)"))), "checked"));
	_assertTrue(_getAttribute(_radio(0, _leftOf(_label("Yes (You will have to provide income information to see what you may qualify for)"))), "checked"));
}

/**
* clickGetHelpPayingForCoverage - Select "Yes" or "No" radio buttons if Help for Paying Coverage is required.
* 
* Arguments
* $option: "Y" if option has to be selected, "N" otherwise. Default "N".
*/
function clickGetHelpPayingForCoverage($option){
	if ($option === undefined) {
		$option = "N";
	}

	if ($option == "Y") {
		_click(_label("Yes (You will have to provide income information to see what you may qualify for)"));
	}
	else if ($option == "N") {
		_click(_label("No (You will pay full cost for Exchange health coverage)"));
	}
	else {
		_assert(false, "Option '" + $option + "' not recognized. Pass Y or N.");
	}

	if (!$ssapPeople[0].$helpPayingCoverage) {
		$ssapPeople[0].$helpPayingCoverage = $option ;
	}

	$ssapPeople[0].$helpPayingCoverage = $option ;
	_log(JSON.stringify($ssapPeople[0].$helpPayingCoverage));
	return $ssapPeople;
}


function goToHouseholdRelationships(){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Household Relationship"));
	_assertVisible(_heading3("Household Relationship Details"));
	var $membersInHousehold = _collectAttributes("_listItem", "/.*/", "sahiText", _in(_div("subsection")));
	_assertEqual($ssapPeople.length, $membersInHousehold.length);
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		_assertEqual($ssapPeople[$i].$firstName + " " + $ssapPeople[$i].$lastName, $membersInHousehold[$i]);
	}

	for (var $i = 0; $i < $ssapPeople.length - 1; $i++) {
		_assertVisible(_paragraph(($i + 1) + ". How is "+$ssapPeople[$i].$firstName + " " + $ssapPeople[$i].$lastName+" related to the other household members?"));
	}
}

function goToHouseholdAddresses($verifyPage){
	_click(_button("Save & Continue"));

	_assertVisible(_heading1("Household Addresses"));
	_assertVisible(_heading3("Where Household Members Live"));
	if(!$verifyPage){
		_assertVisible(_fieldset("/Do any of the people below live at an address other than .*\\? \\(check all that apply\\)/"));

		var $householdMembers = _collectAttributes("_label", "/.*/", "sahiText", _in(_div("subsection")));
		_assertEqual($ssapPeople.length, $householdMembers.length);
		for (var $i = 1; $i < $householdMembers.length - 1; $i++) {
			var $member = $householdMembers[$i - 1];
			_assertEqual($ssapPeople[$i].$firstName + " " + $ssapPeople[$i].$lastName, $member);
		}
		var $mem = $householdMembers[$householdMembers.length - 1];
		_assertEqual("None of the Above", $mem );
		_click(_label("None of the Above"));
	}
}

function goToSummary(){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Summary"));
	_assertVisible(_heading3("Household Members", _in(_div("subsection"))));
	_assertVisible(_row("NameRelationDate of BirthSeeking Coverage"));
	_assertVisible(_tableHeader("Name", _in(_div("householdMemberSummary"))));
	_assertVisible(_tableHeader("Relation", _in(_div("householdMemberSummary"))));
	_assertVisible(_tableHeader("Date of Birth", _in(_div("householdMemberSummary"))));
	_assertVisible(_tableHeader("Seeking Coverage", _in(_div("householdMemberSummary"))));


	var $householdMembers =_collect("_row", "/.*/", _in(_div("householdMemberSummary")))
		for (var $i = 1; $i < $householdMembers.length; $i++) {
			var $j = $i - 1;
			var $person = $ssapPeople[$j];
			var $row = $householdMembers[$i];

			_assertEqual($person.$firstName + " " + $person.$lastName, _getText(_cell(0, _in($row), _under(_tableHeader("Name"), 10))));
			_assertEqual($person.$relationshipToApplicant, _getText(_cell(0, _in($row), _under(_tableHeader("Relation"), 10))));
			_assertEqual($person.$doB, _getText(_cell(0, _in($row), _under(_tableHeader("Date of Birth"), 10))));
			_assertEqual($person.$applying, _getText(_cell(0, _in($row), _under(_tableHeader("Seeking Coverage"), 10))));
		}

	_assertVisible(_heading3("Household members addresses", _in(_div("subsection"))));


	//_startLookInside(_div("usa-width-one-whole"));

	var $person = $ssapPeople[0];
	//	var $above = $ssapPeople[1];
	//	$above = $above.$firstName + " " + $above.$lastName;

	//	_assertVisible(_heading4($person.$firstName +  " " + $person.$lastName+"(Primary Contact)", _above(_div("/"+$above+"/"), 10)));
	_assertVisible(_div($person.$homeAddress1, _near(_div("/"+$person.$firstName +  " " + $person.$lastName+"/"))));
	_assertVisible(_div($person.$homeCity + " NV, " + $person.$homeZip, _near(_div("/"+$person.$firstName +  " " + $person.$lastName+"/"))));
	_assertVisible(_div("Home Address", _near(_div("/"+$person.$firstName +  " " + $person.$lastName+"/"))));
	_assertVisible(_div("Mailing Address", _near(_div("/"+$person.$firstName +  " " + $person.$lastName+"/"))));
	_assertVisible(_div("Same as home address", _near(_div("/"+$person.$firstName +  " " + $person.$lastName+"/"))));

	//	_assertVisible(_span($person.$homeAddress1, _above(_div("/"+$above+"/"), 10)));
	//	_assertVisible(_span($person.$homeCity + " NV, " + $person.$homeZip, _above(_div("/"+$above+"/"),10)));
	//	_assertVisible(_span("Home Address", _above(_div("/"+$above+"/"), 10)));
	//	_assertVisible(_span("Mailing Address", _above(_div("/"+$above+"/"), 10)));
	//	_assertVisible(_span("Same as home address", _above(_div("/"+$above+"/"), 10)));
	/*
var $i = 1;
for (; $i < $ssapPeople.length - 1; $i++) {
var $under = $ssapPeople[$i - 1];
$under = $under.$firstName + " " + $under.$lastName;

var $person = $ssapPeople[$i];

var $above = $ssapPeople[$i + 1];
$above = $above.$firstName + " " + $above.$lastName;

_assertVisible(_heading4($person.$firstName +  " " + $person.$lastName, _under(_div("/"+$under+"/"),10), _above(_div("/"+$above+"/"),10)));
_assertVisible(_div($person.$homeAddress1, _near(_div("/"+$person.$firstName +  " " + $person.$lastName+"/"))));
_assertVisible(_div($person.$homeCity + " NV, " + $person.$homeZip, _near(_div("/"+$person.$firstName +  " " + $person.$lastName+"/"))));
//		_assertVisible(_span($person.$homeAddress1, _under(_div("/"+$under+"/"),10), _above(_div("/"+$above+"/"),10)));
//		_assertVisible(_span($person.$homeCity + " NV, " + $person.$homeZip, _under(_div("/"+$under+"/"),10), _above(_div("/"+$above+"/"),10)));

if(_isVisible(_span("Other Address", _near(_heading4($i))))){
_assertVisible(_span("Other Address", _near(_div("/"+$person.$firstName +  " " + $person.$lastName+"/"))));
}
else{
_assertVisible(_div("Home Address", _near(_div("/"+$person.$firstName +  " " + $person.$lastName+"/"))));
//			_assertVisible(_span("Home Address", _under(_div("/"+$under+"/"),10), _above(_div("/"+$above+"/"),10)));
}

}

var $under = $ssapPeople[$i - 1];
$under = $under.$firstName + " " + $under.$lastName;

var $person = $ssapPeople[$i];

_assertVisible(_heading4($person.$firstName +  " " + $person.$lastName, _under(_div("/"+$under+"/"),10)));
_assertVisible(_div($person.$homeAddress1, _near(_div("/"+$under+"/"))));
_assertVisible(_div($person.$homeCity + " NV, " + $person.$homeZip, _near(_div("/"+$under+"/"))));
if(_isVisible(_span("Other Address", _near(_heading4($i))))){
_assertVisible(_span("Other Address", _near(_div("/"+$person.$firstName +  " " + $person.$lastName+"/"))));
}
else{
_assertVisible(_div("Home Address", _near(_div("/"+$under+"/"), 10)));
}
_stopLookInside();
*/

}

function goToHouseholdInformation($firstName, $lastName){
	_click(_button("Save & Continue"));
	var $fullName = $firstName+" "+$lastName;
	var $currentCoverageyear =getCurrentCoverageYear();
	_assertVisible(_heading1("Household information"));
	if(_isVisible(_paragraph("Who will file tax return in "+$currentCoverageyear+" year?"))){
		for (var $i = 0; $i < $ssapPeople.length; $i++) {
			_assertVisible(_label($ssapPeople[$i].$firstName + " " + $ssapPeople[$i].$lastName));
		}
	}
	else{
		//		_assertVisible(_paragraph("We found spouses on the application. Please, express their intention to file tax return in "+$currentCoverageyear+" year.", _in(_div("subsection"))));
	}

	//	_assertVisible(_div("Primary Tax Filer on the application is "+$fullName));
}

function selectToMakeChangesOnHouseHoldInformation($index, $makeChange){
	_assertVisible(_fieldset("Do you want to make any changes, including the addition of any household members not listed above?"));
	//	var $fullName = $ssapPeople[$index].fullName(true);
	if($makeChange == "Yes"){
		_assertVisible(_label("Yes"));
		_click(_label("Yes"));
		_assertVisible(_button("Update information"));
	}
	else if($makeChange =="No"){
		_assertVisible(_label("No"));
		_click(_label("No"));
	}
}

function clickUpdateInformationOnHouseHoldInfoPage(){
	_click(_button("Update information"));
	_assertVisible(_heading1("About Your Household"));
}
/*
function selectFederalTaxFiler($index){
var $fullName = $ssapPeople[$index].fullName(true);
var $currentCoverageyear =getCurrentCoverageYear();
//	_click(_label($fullName, _near(_paragraph("Who plans to file a federal income tax return for "+$currentCoverageyear+" year?"))));
_click(_label($fullName, _near(_paragraph("/file a federal income tax return for "+$currentCoverageyear+"/"))));
}

*/
function selectFederalTaxFiler($indexes){

	var $currentCoverageyear =getCurrentCoverageYear();

	for (var $i = 0; $i < $indexes.length; $i++) {
		var $index = $indexes[$i];
		var $fullName = $ssapPeople[$index].fullName(true);
		//	_click(_label($fullName, _near(_paragraph("Who plans to file a federal income tax return for "+$currentCoverageyear+" year?"))));
		_click(_label($fullName, _near(_paragraph("/file a federal income tax return for "+$currentCoverageyear+"/"))));
	}
	if($indexes.length == 0){
		_click(_label("None of the Above", _near(_paragraph("/file a federal income tax return for "+$currentCoverageyear+"/"))));
	}
}
function clickOnFileTaxesOption($taxFiling,$indexes){
	//	_click(_label($taxFiling));
	var $currentCoverageyear =getCurrentCoverageYear();
	//	_assertVisible(_paragraph("Who will file tax return in " + $currentCoverageyear + " year?"));
	//	var $names = _collect("_label", "/.*/", _in(_div("/Who will file tax return in "+$currentCoverageyear+" year?/")));
	//	_assertEqual($ssapPeople.length, $names.length);
	//	for (var $i = 0; $i < $ssapPeople.length; $i++) {
	//		_assertEqual($ssapPeople[$i].$firstName + " " + $ssapPeople[$i].$lastName, _getText($names[$i]));
	//	}
	var $fullName1 = $ssapPeople[$indexes[0]].fullName(true);
	var $fullName = $ssapPeople[$indexes[1]].fullName(true);

	if ($taxFiling == "Jointly") {
		_click(_label("Yes", _near(_span("/ "+$fullName1+" and "+$fullName+" plan to file a joint federal income tax return/"))));
		//		_assertVisible(_paragraph("We found several tax filers on the application. Please, define the Primary Tax Filer"));
		//		_assertVisible(_paragraph("Please, define dependents for each tax filer:"));
	}
	else if ($taxFiling == "Separately") {
		//		_log("TODO: Add assertions");
		_click(_label("No", _near(_span("/ "+$fullName1+" and "+$fullName+" plan to file a joint federal income tax return/"))));
	}

}

function selectMoreInformationForFamilyMember($moreInfo){

	//_click(_label($moreInfo+"[1]"));
	_click(_label($moreInfo, _in(_fieldset("/Do you want to provide more information about the family members who live with/"))));

	if($moreInfo == "No"){
		_assertVisible(_paragraph("usa-alert__text gi-alert__info__text", _near(_fieldset("/Do you want to provide more information about the family members who live with/"))));
	}
	else{
		_assertVisible(_button("Update information"));
	}


}

function selectPrimaryTaxFiler($index){

	var $fullName = $ssapPeople[$index].fullName(true);
	_click(_label($fullName, _near(_paragraph("Please select which of the tax filers below should be considered the primary applicant for this application (if filing a joint return, this would be the Primary Tax Filer)"))));

}

function selectDependents($indexes){

	for (var $i = 0; $i < $indexes.length; $i++) {
		var $index = $indexes[$i];
		var $fullName = $ssapPeople[$index].fullName(true);
		_click(_label($fullName, _near(_paragraph("/Dependents /"))));
		//		_click(_label($fullName+"[1]"));
		//		_click(_label($fullName, _in(_div("/Please, define dependents for each tax filer:/"))));
	}
}

function selectDependentsWithMultipleTaxFilers($claimer, $indexsOfDependents){
	var $name = $ssapPeople[$claimer].fullName(true);
	_assertVisible(_paragraph("Who are the dependents that will be claimed by the tax filer(s) on his/her/their income tax return?"));
	_assertVisible(_paragraph("/Dependents of "+$name+"/"));
	if($indexsOfDependents){
		for (var $i = 0; $i < $indexsOfDependents.length; $i++) {
			var $index = $indexsOfDependents[$i];
			var $fullName = $ssapPeople[$index].fullName(true);
			//			_click(_label($fullName, _near(_paragraph("/Dependents of "+$name+"/"))));
			_click(_label($fullName, _under(_paragraph("/Dependents of "+$name+"/"),20)));
		}
	}

}

function selectIfLivingWithOtherParentAndStepParent($index,$livesWithAnotherParent){
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_fieldset("Does "+$fullName+" live with another parent and/or stepparent?"));
	_click(_label($livesWithAnotherParent, _in(_fieldset("Does " +$fullName+ " live with another parent and/or stepparent?"))))

		}

function selectToProvideMoreInformation($index, $provideInfo){
	//	_assertVisible(_div("Exemption # 1 met:/"));
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_fieldset("Do you want to provide more information about the family members who live with "+$fullName+"?"));
	if($provideInfo ==="Yes")
	{
		_click(_label("Yes", _in(_fieldset("Do you want to provide more information about the family members who live with "+$fullName+"?"))));
		_assertVisible(_button("Update information"));
	}
	else{
		_click(_label("No", _in(_fieldset("Do you want to provide more information about the family members who live with "+$fullName+"?"))));
		_assertVisible(_paragraph("usa-alert__text gi-alert__info__text", _near(_fieldset("Do you want to provide more information about the family members who live with "+$fullName+"?"))));
		_assertEqual("Your decision to not provide more information about family members who live with "+$fullName+" will impact whether an appropriate eligibility result is given. We will provide eligibility results based on the information you have provided on the application", _getText(_paragraph("usa-alert__text gi-alert__info__text", _near(_fieldset("Do you want to provide more information about the family members who live with "+$fullName+"?")))));
	}
}

function goToInformationAboutYourHouseHold($considered, $notConsidered){
	_click(_button("Save & Continue"));
	var $fullName = $ssapPeople[$considered].fullName(true);
	_assertVisible(_div("/Information about your Household/"));
	_assertVisible(_paragraph("Only the household members who are on "+$fullName+"'s Tax return will be considered for subsidy determination."));
	for(var $i=0; $i<$notConsidered.length;$i++){
		var $index = $notConsidered[$i];
		var $name = $ssapPeople[$index].fullName(true);
		_assertEqual("- The household members on "+$name+"'s Tax return will not be considered for healthcare coverage on this application. If they want to be considered for healthcare coverage, then they should submit a separate application.", _getText(_paragraph($i+1)));
	}
}


function goToAIAN(){
	if(_isVisible(_button("Save"))){
		_click(_button("Save"));
	}
	else{
		_click(_button("Save & Continue"));
	}
	_assertVisible(_paragraph("Are any of the people below Federally Recognized American Indian/Alaskan Natives?"));
	for (var $i = 0; $i < $ssapPeople.length; $i++) {
		var $fullName = $ssapPeople[$i].fullName(true);
		_assertVisible(_label($fullName, _in(_div("/Are any of the people below Federally Recognized American Indian\\/Alaskan Natives\\?Please answer this question to continue./"))));
	}
	_assertVisible(_label("None of the Above", _in(_div("/Are any of the people below Federally Recognized American Indian\\/Alaskan Natives\\?Please answer this question to continue./"))));
}

function selectAIANPersons($indexes){
	if ($indexes == undefined || $indexes.length == 0) {
		_assertVisible(_label("None of the Above", _in(_div("/Are any of the people below Federally Recognized American Indian\\/Alaskan Natives\\?Please answer this question to continue./"))));
		_click(_label("None of the Above", _in(_div("/Are any of the people below Federally Recognized American Indian\\/Alaskan Natives\\?Please answer this question to continue./"))));
	}
	else{
		for (var $i = 0; $i < $indexes.length; $i++) {
			var $index = $indexes[$i];
			var $fullName = $ssapPeople[$index].fullName(true);
			_wait(2000)
				if(_getAttribute(_label($fullName),"data-value") == "false"){
					_click(_label($fullName, _in(_div("/Are any of the people below Federally Recognized American Indian\\/Alaskan Natives\\?Please answer this question to continue./"))));
				}
			_wait(2000);
			_assertVisible(_fieldset("Select "+$fullName+"'s membership"));
			_setSelected(_select("state", _rightOf(_label("State["+$i+"]"), 10)), "Nevada");
			_setSelected(_select("tribeName", _near(_label("Tribe Name["+$i+"]"), 10)), 1);
		}
	}
}

function goToMedicaidChipDenialInformation($indexes){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Medicaid/CHIP Denial Information"));
	_assertVisible(_paragraph("Were any of these people found not eligible for Medicaid or Nevada Check Up in the past 90 days?"));
	for (var $i = 0; $i < $indexes.length; $i++) {
		var $index = $indexes[$i];
		var $fullName = $ssapPeople[$index].fullName(true);
		_assertVisible(_label($fullName, _in(_div("/Please answer this question to continue.Were any of these people found not eligible for Medicaid or Nevada Check Up in the past 90 days/"))));
	}
	_assertVisible(_label("None of the Above", _in(_div("/Please answer this question to continue.Were any of these people found not eligible for Medicaid or Nevada Check Up in the past 90 days/"))));
}

function selectMedicaidChipDenialInformation($indexes,$isNotFoundEligible, $month, $date,$year,$ifCitizen, $notEligibleBasedOnImmigration,$changeInImmigrationStatus, $changeInImmigrationSinceNotFoundEligible){
	if ($indexes == undefined || $indexes.length == 0) {
		_click(_label("None of the Above", _in(_div("/Please answer this question to continue.Were any of these people found not eligible for Medicaid or Nevada Check Up in the past 90 days/"))));
		return;
	}

	for (var $i = 0; $i < $indexes.length; $i++) {
		var $index = $indexes[$i];
		var $fullName = $ssapPeople[$index].fullName(true);
		_click(_label($fullName, _in(_div("/Please answer this question to continue.Were any of these people found not eligible for Medicaid or Nevada Check Up in the past 90 days/"))));
		_assertVisible(_fieldset("When was "+$fullName+" denied Medicaid or CHIP coverage?Learn moreEnter the date on the letter from the Medicaid or CHIP. If you don’t have it, make your best estimate of the date.["+$i+"]"));
		var $backDate = getBackDate(59);
		_setValue(_numberbox("month", _near(_div($fullName))), $backDate.substring(0,2));
		_setValue(_numberbox("date", _near(_div($fullName))), $backDate.substring(3,5));
		_setValue(_numberbox("year", _near(_div($fullName))), $backDate.substring(6,10));
		//Non-US citizen
		if(!$ifCitizen){
			_assertVisible(_span("/Was "+$fullName+" found not eligible for Medicaid or CHIP based on immigration/", _near(_div($fullName))));
			if($notEligibleBasedOnImmigration == "Yes"){
				_click(_label("Yes"));
				_assertVisible(_span("/Has "+$fullName+" had a change in their immigration status /"));
				if($changeInImmigrationStatus == "Yes"){
					_click(_label("Yes[1]"));
					_assertVisible(_span("Has "+$fullName+" had a change in their immigration status since they were not found eligible for Medicaid or Nevada Check Up?"));
					if($changeInImmigrationSinceNotFoundEligible == "Yes"){
						_click(_label("Yes[2]"));
					}
					else{
						_click(_label("No[2]"));
					}
				}
				else{
					_click(_label("No[1]"));
				}
			}
			else
				_click(_label("No"));
		}
	}
}

function goToPregnancyInformation($indexes){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Pregnancy Information"));
	_assertVisible(_div("/Please answer this question to continue.Are any of these people pregnant or were pregnant in the last 60 days/"));

	var $parent = _div("/Please answer this question to continue.Are any of these people pregnant/");
	for (var $i = 0; $i < $indexes.length; $i++) {
		var $index = $indexes[$i];
		var $fullName = $ssapPeople[$index].fullName(true);
		_assertVisible(_label($fullName, _in($parent)));
	}
	_assertVisible(_label("None of the Above", _in($parent)));
}

function selectPregnancyInformation($indexes,$dates){
	var $parent = _div("/Please answer this question to continue.Are any of these people pregnant/");
	if ($indexes == undefined || $indexes.length == 0) {
		_click(_label("None of the Above", _in($parent)));
		return;
	}
	for (var $i = 0; $i < $indexes.length; $i++) {
		var $index = $indexes[$i];
		var $fullName = $ssapPeople[$index].fullName(true);
		_click(_label($fullName, _in($parent)));
		_assertVisible(_paragraph("How many babies are expected in this pregnancy?["+$i+"]"));
		_assertVisible(_span("When is the due date for this pregnancy?["+$i+"]"));
		var $date;
		if($dates){
			$date = $dates[$i];
		}
		else{
			$date =_fetch(window.moment().add(1,'months').format("MM-DD-YYYY"));
		}
		var $data =$date.split("-");
		_setValue(_numberbox("month"), $data[0]);
		_wait(1000);
		_setValue(_numberbox("date"), $data[1]);
		_wait(1000);
		_setValue(_numberbox("year"), $data[2]);
		_wait(1000);
	}
}

function goToDisabilityInformation($indexes){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Disability Information"));
	_assertVisible(_paragraph("Do any of these people below have a physical disability or mental health condition that limits their ability to work, attend school, or take care of their daily needs?Learn more"));
	var $under = _paragraph("Do any of these people below have a physical disability or mental health condition that limits their ability to work, attend school, or take care of their daily needs?Learn more");
	//_paragraph("Do any of these people have a physical disability or mental health condition that limits their ability to work, attend school, or take care of their daily needs?Learn more");
	for (var $i = 0; $i < $indexes.length; $i++) {
		var $index = $indexes[$i];
		var $fullName = $ssapPeople[$index].fullName(true);
		_assertVisible(_label($fullName, _under($under,20)));
	}
	_assertVisible(_label("None of the Above", _under($under,10)));

	_assertVisible(_paragraph("Do any of these people need help with activities of daily living (like bathing, dressing, and using the bathroom), or live in a nursing home, or other medical facility?"));
	var $under = _paragraph("Do any of these people need help with activities of daily living (like bathing, dressing, and using the bathroom), or live in a nursing home, or other medical facility?");
	for (var $i = 0; $i < $indexes.length; $i++) {
		var $index = $indexes[$i];
		var $fullName = $ssapPeople[$index].fullName(true);
		_assertVisible(_label($fullName, _under($under,10)));
	}
	_assertVisible(_label("None of the Above[1]", _near($under)));
}

function selectDisabilityInformation($indexes){
	var $under = _paragraph("Do any of these people below have a physical disability or mental health condition that limits their ability to work, attend school, or take care of their daily needs?Learn more");

	if ($indexes == undefined || $indexes.length == 0) {
		_click(_label("None of the Above", _near($under)));
	}
	else {
		for (var $i = 0; $i < $indexes.length; $i++) {
			var $index = $indexes[$i];
			var $fullName = $ssapPeople[$index].fullName(true);
			_click(_label($fullName, _under($under,10)));
			//			_assertVisible(_paragraph("How many babies are expected in this pregnancy?["+$i+"]"));
		}
	}
}
function selectNeedHelpWithActivities($indexes){
	var $under = _paragraph("Do any of these people need help with activities of daily living (like bathing, dressing, and using the bathroom), or live in a nursing home, or other medical facility?");
	if ($indexes == undefined || $indexes.length == 0) {
		_click(_label("None of the Above[1]", _near($under)));
	}
	else {
		for (var $i = 0; $i < $indexes.length; $i++) {
			var $index = $indexes[$i];
			var $fullName = $ssapPeople[$index].fullName(true);
			_click(_label($fullName + "[1]", _near(_paragraph("/Do any of these people need help with activities of daily living/"))))
				//			_click(_label($fullName+"[1]", _under($under)));
				//			_assertVisible(_paragraph("How many babies are expected in this pregnancy?["+$i+"]"));
				}
	}
}

function goToFosterCareInformation($indexes){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Foster Care Information"));
	_assertVisible(_paragraph("Were any of these people ever in foster care?"));

	var $under = _paragraph("Were any of these people ever in foster care?");
	for (var $i = 0; $i < $indexes.length; $i++) {
		var $index = $indexes[$i];
		var $fullName = $ssapPeople[$index].fullName(true);
		_assertVisible(_label($fullName, _near($under)));
	}
	_assertVisible(_label("None of the Above", _near($under)));

}

function selectIfInFosterCare($indexes){
	var $under = _paragraph("Were any of these people ever in foster care?");
	if ($indexes == undefined || $indexes.length == 0) {
		_click(_label("None of the Above", _near($under)));
	}
	else{
		for (var $i = 0; $i < $indexes.length; $i++) {
			var $index = $indexes[$i];
			var $fullName = $ssapPeople[$index].fullName(true);
			_click(_label($fullName, _near($under)));
			_assertVisible(_fieldset("In what state was "+$fullName+" in the foster care system?"));
		}
	}
}

function selectFrosterCareState($index, $state){
	if(!$state){
		$state = "Nevada";
	}
	var $fullName = $ssapPeople[$index].fullName();
	_setSelected(_select("fosterCareState", _near(_span("/"+$fullName+"/"))), "Nevada");
	_setSelected(_select("fosterCareState"), $state);
}
//@param $gotMedicaid = "Yes, No"
function selectIfMedicaidInFosterCare($index, $gotMedicaid){
	var $fullName = $ssapPeople[$index].fullName();
	_click(_label($gotMedicaid, _in(_fieldset("/Was "+$fullName+" getting health care through/"))));
}

function selectWhatAgeLefTheFosterCare($index, $age){
	var $fullName = $ssapPeople[$index].fullName();
	_setSelected(_select("ageWhenLeftFosterCare", _in(_fieldset("How old was "+$fullName+" when she left the foster care system?"))), $age);
}


function goToFamilyAndHouseholdSummary(){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Summary"));
	_assertVisible(_div("Review and Confirm"));
	_assertVisible(_paragraph("Here is the information you provided about everyone who is part of your household. Please take a moment to review and double-check the information. If you see any mistakes, please edit them now"));
	//	_assert(false, "TODO: Need to add assertions here.");
}

function goToIncomeInformation(){
	_assertVisible(_button("Continue"));
	_click(_button("Continue"));
	_assertVisible(_heading1("Get Ready"));
	_assertVisible(_strong("We ask for current information for everyone in your family and household to make sure you get the most benefits possible", _in(_div("usa-alert__body gi-alert__info__body"))));
	_assertEqual("We ask for current information for everyone in your family and household to make sure you get the most benefits possible Before you start, please take a moment now to gather the information listed below", _getText(_paragraph("usa-alert__text gi-alert__info__text", _in(_div("usa-alert__body gi-alert__info__body")))));
	_assertVisible(_paragraph("All fields on this application marked with an asterisk (*) are required unless otherwise indicated."));
	_assertVisible(_paragraph("You may need:"));
	_assertVisible(_listItem("Pay stubs"));
	_assertVisible(_listItem("W-2 forms"));
	_assertVisible(_listItem("Information about income"));
	_assertVisible(_button("Back"));
}

function goToIncomeSources($index){
	_click(_button("Continue"));
	var $currentCoverageyear =getCurrentCoverageYear();
	_assertVisible(_heading1("Income Sources"));
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_heading3("Income of " + $fullName));
	_assertVisible(_paragraph("People can get income in many ways. After you tell us about your current income we will help you estimate income for all of "+$currentCoverageyear+" so you can tell us if you expect changes."));
	_assertVisible(_paragraph("Enter all your current Income Types"));
	_assertVisible(_fieldset("Does "+$fullName+" currently get any income?"));
	_assertVisible(_label("Yes"));
	_assertVisible(_label("No"));
}

function selectIncomeCurrently($index, $haveIncome){
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_fieldset("Does "+$fullName+" currently get any income?"));
	if($haveIncome){
		_click(_label("Yes"));
		_assertVisible(_button("Add Income Source"));
	}
	else{
		_click(_label("No"));
		_assertTrue(_getAttribute(_button("Add Income Source"), "disabled"))
			}
}

function addIncomeSource($index, $type, $amount, $frequency, $hoursPerWeek){
	var $fullName = $ssapPeople[$index].fullName(true);

	_click(_button("Add Income Source"));
	_assertVisible(_heading3("Add Income for " + $fullName));
	_assertVisible(_label("What type of Income would you like to add?"));
	_setSelected(_select("type"), $type);
	if($type === "Social Security Benefits" || $type=== "Self Employment" || $type ==="Retirement"){
		_assertNotVisible(_label("Name of employer"));
	}
	else if($type ==="Unemployment"){
		_setValue(_textbox("sourceName"), $fullName);
	}
	else if($type === "Rental or Royalty"){
		_setSelected(_select("type"), "Rental or Royalty");
	}
	else{
		_assertVisible(_label("Name of employer"));
		_setValue(_textbox("sourceName"), $fullName);
	}
	if(_isVisible(_label("Profit or Loss"))){
		_setSelected(_select("profit"), "Profit");
	}
	// _assertVisible(_strong("How much income do you currently get from this job?"));
	//_setValue(_textbox("amount", _rightOf(_label("Amount"), 10)), $amount);
	_setValue(_textbox("amount"), $amount);
	_wait(6000);
	_setSelected(_select("frequency"), $frequency);
	if(_getValue(_textbox("amount"))===""){
		_setValue(_textbox("amount"), $amount);
		_wait(6000);
	}
	if($hoursPerWeek){
		//if($hoursPerWeek!="null" || $hoursPerWeek!= null){
		_assertVisible(_label("Hours per week:"));
		_setValue(_textbox("cyclesPerFrequency"), $hoursPerWeek);
	}
	_click(_button("Save"));

	if (!$ssapPeople[$index].$incomes) {
		$ssapPeople[$index].$incomes = [];
	}

	var $income = {
		"type": $type,
		"amount": $amount,
		"frequency": $frequency,
		"hoursPerWeek":$hoursPerWeek
	};
	$ssapPeople[$index].$incomes.push($income);
	_log(JSON.stringify($ssapPeople[$index].$incomes));
	return $ssapPeople;
}


function goToTribalIncome(){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Tribal Income"));
}

function addTribalIncome($index, $personIndex, $amount, $frequency){

	_setValue(_textbox("tribalAmount["+$index+"]"), $amount);

	if (!$ssapPeople[$personIndex].$tribal) {
		$ssapPeople[$personIndex].$tribal = [];
	}

	var $tribal = {
		"amount": $amount,
		"frequency": $frequency
	};
	$ssapPeople[$personIndex].$tribal.push($tribal);
	_log(JSON.stringify($ssapPeople[$personIndex].$tribal));
}

function goToDeductionSources($index, $type, $amount, $frequency ){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Deduction Sources"));
	var $fullName = $ssapPeople[$index].fullName(true);

	if ($amount && $frequency && $type) {
		_assertVisible(_span("Add another type of deduction or continue to review a summary of your current deductions."));
		_assertVisible(_div($amount, _near(_div($type, _under(_span("Add another type of deduction or continue to review a summary of your current deductions."))))));
		_assertVisible(_div($frequency, _near(_div($type, _under(_span("Add another type of deduction or continue to review a summary of your current deductions."))))));
	}
}

function selectToTellAboutDeductions($index, $havingDeductionAmount){
	if($havingDeductionAmount == "true" || $havingDeductionAmount == "TRUE" || $havingDeductionAmount == true){
		_click(_label("Yes"));
		_assertVisible(_button("Add Deduction Source"));
	}
	else{
		_click(_label("No"));
		_assertTrue(_getAttribute(_button("Add Deduction Source"), "disabled"))
			}
}

function addDeductionAmount($index, $type, $amount, $frequency){
	_click(_button("Add Deduction Source"));
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_heading3("Add Income for " + $fullName));
	_assertVisible(_div("What type of Income would you like to add?Deduction SourceAlimonyStudent loan interestOther deductions"));
	_setSelected(_select("type"), $type);

	_assertVisible(_label("Amount"));
	_setValue(_textbox("amount"), $amount);
	_assertVisible(_label("How often?"));
	_setSelected(_select("frequency"), $frequency);

	if (!$ssapPeople[$index].$deduction) {
		$ssapPeople[$index].$deduction = [];
	}

	var $deduction = {
		"type":$type,
		"amount": $amount,
		"frequency": $frequency
	};
	$ssapPeople[$index].$deduction.push($deduction);
	_log(JSON.stringify($ssapPeople[$index].$deduction));

	_click(_button("Save"));
}


function goToExpectedIncome($index, $current){
	_click(_button("Save & Continue"));
	//var $currentCoverageyear =getCurrentCoverageYear();
	_assertVisible(_heading1("Expected Income"));
	var $fullName = $ssapPeople[$index].fullName(true);
	//	_assertVisible(_span("Based on what you told us, "+$fullName+"'s income will be about "+$current+". Is this how much you think will get in "+$currentCoverageyear+"?"));
}

function changeExpectedIncome($index, $totalYearlyAmount, $changeExpectedIncome){
	var $fullName = $ssapPeople[$index].fullName(true);
	var $currentCoverageyear =getCurrentCoverageYear();
	if($changeExpectedIncome){
		_click(_label("Yes"));
	}
	else{
		_click(_label("No"));
		_assertVisible(_paragraph("Based on what you know today, how much do you think "+$fullName+" will make in "+$currentCoverageyear+"?"));

		_setValue(_textbox("projectedIncome", _rightOf(_label("Total yearly amount"), 10)), $totalYearlyAmount);
	}
}

function goToIndividualIncomeSummary($index){
	_assertVisible(_button("Save & Continue"));
	_click(_button("Save & Continue"));
	var $currentCoverageyear =getCurrentCoverageYear();
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_heading1("Summary"));
	_assertVisible(_heading3($fullName+"'s income summary"));
	//Assertion need to be done
}


function goToIncomeSummary(){
	_click(_button("Continue"));
	_assertVisible(_heading1("Income Summary"));
	_assertVisible(_heading3("Review and Confirm", _in(_div("subsection"))));
	_assertVisible(_paragraph("Here is the information you provided about everyone who is part of your household. Please take a moment to review and double-check the information. If you see any mistakes, please edit them now.", _in(_div("subsection"))));
	//Need to do assertions
}

function goToOtherHealthCoverage($index){
	if(_isVisible(_button("Save & Continue"))){
		_click(_button("Save & Continue"));
	}
	else{
		_click(_button("Continue"));
	}
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_heading1("Other Health Coverage"));
	_assertVisible(_span("Is "+$fullName+" currently enrolled in health coverage that will extend beyond 60 days from today?", _in(_div("subsection"))));
	_assertVisible(_label("Yes", _in(_div("subsection"))));
	_assertVisible(_label("No", _in(_div("subsection"))));
	_assertVisible(_button("Back"));
	_assertVisible(_button("Save & Continue"));
}

function selectHealthCoverageEnrollment($index, $isEnrolled, $CoverageName, $insuranceName, $policyNumber){
	var $fullName = $ssapPeople[$index].fullName(true);
	if($isEnrolled === "Yes"){
		_click(_label("Yes"));
		_assertVisible(_fieldset("/What type of coverage does "+$fullName+" have/"));
		for(var $i =0; $i < $CoverageName.length ;$i++){
			_click(_label($CoverageName[$i]));

		}
		if($CoverageName == "Other Coverage"){
			$coverageName = $insuranceName;
			_setValue(_textbox("insuranceName"), $insuranceName);
			_setValue(_textbox("policyNumber"), $policyNumber);

		}
		if (!$ssapPeople[$index].$coverageName) {
			$ssapPeople[$index].$coverageName = [];
		}

		var $coverageName = {
			"coverageName":$CoverageName
		};
		$ssapPeople[$index].$coverageName.push($coverageName);
		_log(JSON.stringify($ssapPeople[$index].$coverageName));

	}
	else{
		_click(_label("No"));
	}
	if (!$ssapPeople[$index].$healthEnrollment) {
		$ssapPeople[$index].$healthEnrollment = $isEnrolled ;
	}
	_log(JSON.stringify($ssapPeople[$index].$healthEnrollment));
}



function goToReconcilationOfAPTC($index){
	if(_isVisible(_button("Save & Continue"))){
		_click(_button("Save & Continue"));
	}
	else{
		_click(_button("Continue"));
	}
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_heading1("Reconciliation of APTC"));
	_assertVisible(_fieldset("Did "+$fullName+" reconcile premium tax credits on their tax return for past years?"));
	_assertVisible(_label("Yes"));
	_assertEqual("Yes", _getText(_label("Yes")));
	_assertVisible(_label("No"));
	_assertEqual("No", _getText(_label("No")));
	_assertVisible(_label("I have never received premium tax credit in past years"));
	_assertEqual("I have never received premium tax credit in past years", _getText(_label("I have never received premium tax credit in past years")));
	_assertVisible(_button("Back"));
	_assertVisible(_button("Save & Continue"));
}

function selectReconciledAPTCPastYear($index, $haveReconciled){
	var $fullName = $ssapPeople[$index].fullName(true);
	if($haveReconciled ==="Yes"){
		_click(_label("Yes"));
	}
	else if($haveReconciled ==="Never"){
		_click(_label("I have never received premium tax credit in past years"));
	}
	else{
		_click(_label("No"));
	}
	if (!$ssapPeople[$index].$reconciledAPTC) {
		$ssapPeople[$index].$reconciledAPTC = $haveReconciled ;
	}
	_log(JSON.stringify($ssapPeople[$index].$reconciledAPTC));
}

function goToEmployerCoverageDetail($index){
	if(_isVisible(_button("Save & Continue"))){
		_click(_button("Save & Continue"));
	}
	else{
		_click(_button("Continue"));
	}
	var $fullName = $ssapPeople[$index].fullName(true);
	var $currentCoverageyear =getCurrentCoverageYear();
	_assertVisible(_heading1("Employer Coverage Detail"));
	_assertVisible(_fieldset("/Will "+$fullName+" be offered health coverage through a job (including another person's job, like a spouse or parent)?/"))
		_assertVisible(_label("Yes"));
	_assertVisible(_label("No"));
	_assertVisible(_button("Back"));
	_assertVisible(_button("Save & Continue"));
}

function selectEmployerCoverageDetails($index, $offerCoverage, $indexes,$phoneNumber, $meetsMinValue, $premiumAmount, $frequency){
	var $fullName = $ssapPeople[$index].fullName(true);
	if($offerCoverage === "Yes"){
		_click(_label("Yes"));
		for(var $i= 0; $i<$indexes.length; $i++){
			var $name = $ssapPeople[$indexes[$i]].fullName(true);
			_assertVisible(_span($name, _in(_fieldset("Employer NameEmployee Name"))));
		}
		_click(_span($fullName, _in(_fieldset("Employer NameEmployee Name"))));
		_assertVisible(_button("Add Employer Detail", _near(_span($fullName))));
		_assertVisible(_label("Phone", _near(_span($fullName))));
		var $phone = $phoneNumber[0]+""+$phoneNumber[1]+""+$phoneNumber[2];
		_setValue(_textbox("phone", _near(_span($fullName))), $phone);
		_assertVisible(_fieldset("/Does "+$fullName+" offer a health plan that meets the minimum value standard/", _near(_span($fullName))))
			if($meetsMinValue === "Yes"){
				_assertVisible(_label("Yes", _near(_span($fullName))));
				_click(_label("Yes", _near(_span($fullName))));
				_assertVisible(_div("What is the premium amount for the lowest cost plan available to "+$fullName+" that meets the minimum value standard?", _near(_span($fullName))));
				_assertVisible(_label("Total amount", _near(_span($fullName))));
				_setValue(_textbox("employerPremium", _near(_span($fullName))), $premiumAmount);
				_assertVisible(_label("How often?", _near(_span($fullName))));
				_setSelected(_select("employerPremiumFrequency", _near(_span($fullName))), $frequency);

			}
		else{
			_assertVisible(_label("No", _near(_span($fullName))));
			_click(_label("No", _near(_span($fullName))));
		}

	}
	else{
		_click(_label("No"));
	}
	if (!$ssapPeople[$index].$employerCoverage) {
		$ssapPeople[$index].$employerCoverage = $offerCoverage ;
	}
	if (!$ssapPeople[$index].$meetsMinValueStandard) {
		$ssapPeople[$index].$meetsMinValueStandard = $meetsMinValue ;
	}
	if (!$ssapPeople[$index].$PremiumAmt) {
		$ssapPeople[$index].$PremiumAmt = $premiumAmount ;
	}
	if (!$ssapPeople[$index].$PremiumAmtFrequency) {
		$ssapPeople[$index].$PremiumAmtFrequency = $frequency ;
	}
	_log(JSON.stringify($ssapPeople[$index].$employerCoverage));
	_log(JSON.stringify($ssapPeople[$index].$meetsMinValueStandard));
	_log(JSON.stringify($ssapPeople[$index].$PremiumAmt));
	return $ssapPeople;
}

function goToStateEmployeeHealthBenefit($index){
	if(_isVisible(_button("Save & Continue"))){
		_click(_button("Save & Continue"));
	}
	else{
		_click(_button("Continue"));
	}
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_heading1("State Employee Health Benefit"));
	_assertVisible(_fieldset("Is "+$fullName+" offered the Nevada state employee health benefit plan through a job or a family member’s job?"));
	_assertVisible(_label("Yes"));
	_assertVisible(_label("No"));
}

function selectStateEmployeeHealthBenefit($index, $isOfferedHealthBenefit){
	var $fullName = $ssapPeople[$index].fullName(true);
	if($isOfferedHealthBenefit === "Yes"){
		_click(_label("Yes"));
	}
	else if($isOfferedHealthBenefit === "No"){
		_click(_label("No"));
	}
}

function goToAdditionalInformationPage($index){
	if(_isVisible(_button("Save & Continue"))){
		_click(_button("Save & Continue"));
	}
	else{
		_click(_button("Continue"));
	}
	_assertVisible(_heading1("Additional Information"));
}

function selectIfEligibleForHealthServices($index, $option){
	var $fullName = $ssapPeople[$index].fullName(true);
	var $parentEl = _div("/Is "+$fullName+" eligible to get health services from the Indian Health Service, a tribal health program, or an urban Indian health program or through referral from one of these programs/");
	_assertVisible($parentEl);
	_click(_label($option, _in($parentEl)));
}

function selectIfEverGottenHealthServices($index, $option){
	var $fullName = $ssapPeople[$index].fullName(true);
	var $parentEl = _div("/Has "+$fullName+" ever gotten a health service from the Indian Health Service, a tribal health program, or urban Indian health program or through a referral from one of these programs/");
	_assertVisible($parentEl);
	_click(_label($option, _in($parentEl)));
}

function selectIfNeedHelpPayingBills($index, $option){
	var $fullName = $ssapPeople[$index].fullName(true);
	var $parentEl = _div("/Would "+$fullName+" like help paying for medical bills from the last 3 months/");
	_assertVisible($parentEl);
	_click(_label($option, _in($parentEl)));
}

function selectIfParentLivingDifferentAddress($index, $option){
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_fieldset("Does "+$fullName+" have a parent living outside the home?"));
	_assertVisible(_label("Yes", _in(_fieldset("Does "+$fullName+" have a parent living outside the home?"))));
	_assertVisible(_label("No", _in(_fieldset("Does "+$fullName+" have a parent living outside the home?"))));
	if($option === "Yes"){
		_click(_label("Yes", _in(_fieldset("Does "+$fullName+" have a parent living outside the home?"))));
	}
	else{
		_click(_label("No", _in(_fieldset("Does "+$fullName+" have a parent living outside the home?"))));
	}
}


function goToAddtionalInformationSummary($indexes){
	//	_lockWindow();
	//	_focusWindow();
	//	_takePageScreenShot();
	//	_unlockWindow();

	if(_isVisible(_button("Save & Continue"))){
		_click(_button("Save & Continue"));
	}
	else{
		_click(_button("Continue"));
	}
	_assertVisible(_heading1("Summary"));
	_assertVisible(_heading3("Review and Confirm"));
	_assertVisible(_paragraph("Here is the information you provided about everyone who is part of your household. Please take a moment to review and double-check the information. If you see any mistakes, please edit them now", _in(_div("subsection"))));
	_assertVisible(_button("Back"));
	//Need to do assertions
}

function goToReviewAndSign(){
	if(_isVisible(_button("Save & Continue"))){
		_click(_button("Save & Continue"));
	}
	else{
		_click(_button("Continue"));
	}
	_assertVisible(_heading1("Review and Sign"));
	_assertEqual("Now it's time to review and sign your health insurance application. Please review all the detailed application information about every household member who is applying for health insurance. In a moment, you will finalize your application and provide your eSignature.", _getText(_paragraph("usa-alert-text", _in(_div("usa-alert-body gi-alert__info__body")))));
	_assertVisible(_button("Back"));
	_assertVisible(_button("Continue"));
}

function goToFinalReview($ssapInformation, $isFinancial){
	_click(_button("Continue"));
	//assertion to be done
	_assertVisible(_heading1("Final Review"));
	_assertVisible(_heading3("Household and Demographic Information"));
	_assertVisible(_button("Download"));
	_assertVisible(_button("Print"));
	_assertVisible(_heading3("Applying for Health Coverage"));
	_assertVisible(_heading3("Household Members"));
	if($isFinancial !== "NO"){
		_assertVisible(_heading3("Income Information"));
		_assertVisible(_heading3("Additional Information"));
	}
	_assertVisible(_button("Back"));
	_assertVisible(_button("Continue"));
}

function goToSignAndSubmit($indexes, $isFinancial){
	_click(_button("Continue"));
	_wait(1000);
	var $fullName = $ssapPeople[$indexes[0]].fullName(true);
	_assertVisible(_heading1("Sign and Submit"));
	_assertVisible(_heading3("Read and check the box next to each statement if you agree"));
	_assertVisible(_fieldset("Are any applicants incarcerated (in prison or jail)"));
	//Assertion to be done
	if($isFinancial !== "NO"){
		_assertVisible(_fieldset("To make it easier to determine my eligibility for help paying for coverage in future years, I agree to allow the Marketplace to use my income data, including information from tax returns, for the next 5 years. The Marketplace will send me a notice and let me make changes. I can opt out at any time.Learn moreIf you enroll in coverage through the Exchange we want to help you keep your coverage. One way to do that is to allow us to check electronically available income data in the future, instead of asking you to verify that your income still qualifies. Agreeing to this statement allows us to use available income information from the IRS for up to 5 years to renew your application. Select “I disagree” to change the period of time you’d like us to check your federal income tax return. Selecting this option may affect your ability to get help paying for coverage at renewal or require you to provide more information."));
		_assertEqual("I understand that if anyone on my application who enrolls in coverage through a Marketplace plan, is later found to have other qualifying health coverage (including Medicare, Medicaid, or CHIP), Nevada Health Link will automatically end their Marketplace coverage.", _getText(_div("gi-component gi-checkbox disp-styl[1]")));
	}
	_assertVisible(_listItem("I agree"));
	_assertVisible(_listItem("I disagree"));
	_assertEqual("I understand that I have 30 days to notify Nevada Health Link of any change of information in this application. I will report any changes within this time period. I understand that changes in my household size, address or other details might affect my or my household's eligibility for specific benefits. I understand and will notify Nevada Health Link if my application information changesLearn moreYou must report any changes that might affect your health coverage, like if you or a member of your household move, have any income changes, get married, get divorced, become pregnant, or have a child. If a person is enrolled in Medicaid or the Children’s Health Insurance Program (CHIP), you can report these changes by contacting your state Medicaid or CHIP program. If you’re enrolled in an Exchange health plan and need to report a change, log in to your Exchange account on Nevada Health Link, or call the Nevada Call Center at 800-547-2927, TTY 711", _getText(_div("gi-component gi-checkbox disp-styl-none")));
	_assertVisible(_label($fullName+"'s Electronic Signature"));
	_assertVisible(_textbox("signature"));
	_assertVisible(_button("Back"));
	_assertVisible($submitApplication);
}

function selectIncarceratedIndividual($indexes, $isFinancial){
	if($indexes.length == 0 || $indexes === undefined){
		var $fullName = $ssapPeople[0].fullName(true);
		if(!_getAttribute(_label("No. No one listed on this health insurance application is incarcerated (in prison or jail)."),"data-value")){
			_click(_label("No. No one listed on this health insurance application is incarcerated (in prison or jail)."));
		}
		_click(_label("I agree"));
		_wait(1000);
		if($isFinancial !== "NO"){
			_assertEqual("I understand that if anyone on my application who enrolls in coverage through a Marketplace plan, is later found to have other qualifying health coverage (including Medicare, Medicaid, or CHIP), Nevada Health Link will automatically end their Marketplace coverage.", _getText(_label("/agreeToEndCoverage/")));
			_click(_label("/agreeToEndCoverage/"));
			_wait(1000);
			_assertEqual("If anyone on this application enrolls in Medicaid, I’m giving the Medicaid agency the right to pursue and get any money from other health insurance, legal settlements, or other third parties. I’m also giving the Medicaid agency rights to pursue and get medical support from a spouse or parent.", _getText(_label("/agreeToCooperateMedicaid/")));
			_click(_label("/agreeToCooperateMedicaid/"));
			_wait(1000);
		}
		_assertEqual("If a child on this application has a parent living outside of the home, I know I’ll be asked to cooperate with the agency that collects medical support from an absent parent. If I think that cooperating to collect medical support will harm me or my children, I can tell the agency and I may not have to cooperate.", _getText(_label("/acknowledgeOutsideParent_label/")));
		_click(_label("/acknowledgeOutsideParent_label/"));
		_wait(1000);
		//30 days
		_assertEqual("I understand that I have 30 days to notify Nevada Health Link of any change of information in this application. I will report any changes within this time period. I understand that changes in my household size, address or other details might affect my or my household's eligibility for specific benefits. I understand and will notify Nevada Health Link if my application information changes", _getText(_label("/isReadyToReportForChanges/")));
		_click(_label("/isReadyToReportForChanges/"));
		//by typing
		_wait(1000);
		_assertEqual("By typing my name in the box below, I’m signing this application under penalty of perjury, which means I’ve provided true answers to all of the questions to the best of my knowledge. I know I may be subject to penalties under federal law if I intentionally provide false information.", _getText(_label("/isTruthful_label/")));
		_click(_label("/isTruthful/"));
		_wait(1000);
		_setValue(_textbox("signature"), $fullName);
	}
	else{
		var $fullName = $ssapPeople[0].fullName(true);
		//TODO
	}
}

function goToPreeligibiltyModal($indexes,$event,$days){
	_assertVisible($submitApplication);
	_click($submitApplication);
	_wait(4000);
	if(_isVisible(_div("/Information about your Eligibility/"))){
		_assertVisible(_paragraph("Please select applicants you would like to enroll in a full-priced exchange plan while awaiting Medicaid eligibility determination:"));
		_assertEqual("If you need additional information about your Medicaid/CHIP assessment, then please reach out to 800-992-0900. If you need information about enrolling in a Nevada Health Link Exchange plan, then please call 800-547-2927, TTY 711", _getText(_paragraph(2)));
		for(var $i =0; $i<$indexes.length; $i++){
			var $fullName = $ssapPeople[$indexes[$i]].fullName(true);
			_assertVisible(_label($fullName));
			_click(_label($fullName));
		}
		_assertVisible(_button("Cancel"));
		_assertVisible(_button("Save"));
	}
	_click(_button("Save"));
	_wait(5000);
	_wait(60000, !_isVisible(_heading3("Application is in progress...")));
}

function goToMyEligibilityResults($coverageYear, $isPresentOptionalActionsMedicaid, $isPresentfullDeteremination){
	_assertVisible($submitApplication);
	_click($submitApplication);
	_wait(5000);
	_wait(100000, !_isVisible(_heading3("Application is in progress...")));
	_assertEqual($coverageYear+" Eligibility Overview", _getText(_heading2("eligibility-overview__header")));
	if($isPresentOptionalActionsMedicaid == "No"){
		verifyOptionalActionsForMedicaidChipAssessed($isPresentOptionalActionsMedicaid);
	}
	verifyFullDetermination($isPresentfullDeteremination);
}

function verifyFullDetermination($isPresent){
	if($isPresent == "Yes"){
		_assertVisible(_heading2("Optional actions"));
		_assertEqual("Based on the information you provided, you are eligible to enroll in a health plan through Nevada Health Link and you do not appear to be eligible for Medicaid. Per paragraph of 45 CFR 155.345(c), promulgated under the Patient Protection and Affordable Care Act, your household has the option to request a full determination of Medicaid eligibility.You should only request this option if you have a specific reason to think you may be eligible for Medicaid that was not included in the application (such as being over age 65, blind or disabled pursuant to Social Security regulations). You will have to provide Medicaid with additional information on your living arrangements, assets, resources and gross income. By requesting a full determination, you acknowledge that if you enroll in Medicaid, the Division Welfare and Support Services has the authority to recover all payments for services received on or after age 55 for deceased Medicaid beneficiaries. More information regarding Medicaid Estate Recovery can be found at the following link: Estate Recovery - What You Should KnowRequest Full Medicaid Determination", _getText(_div("request-determination")));
		_assertEqual("Request Full Medicaid Determination", _getText(_button("eligibilityRequestFullDetermination")));
	}
	else{
		_assertNotVisible(_div("request-determination"));
	}
}

var $eligibilityOverviewList = _list("eligibility-overview__list");
function verifyEligibilitySummary($isFinancial, $eligibilitySummary, $aptcValue){
	_assertVisible(_heading3("Summary"));
	if($isFinancial == "Yes"){
		_assertVisible(_paragraph("Based on the information you provided, one or more members of your household are eligible for"));
		_assertVisible(_paragraph("Detailed eligibility for each member of the household is as below. Click on 'Go To Dashboard' to enroll in a plan."));
	}
	else if($isFinancial == "No"){
		_assertVisible(_paragraph("Based on your application your household is eligible for"));
		_assertVisible(_paragraph("You are not eligible for any subsidies as you did not request consideration for subsidies."));

	}
	var $eligibilitySummaryLength = _count("_listItem", "/.*/", _in($eligibilityOverviewList));
	_assertEqual($eligibilitySummary.length, $eligibilitySummaryLength);
	for(var $i = 0; $i<$eligibilitySummary.length; $i++){
		if($eligibilitySummary[$i] == "Potential Medicaid"){
			_assertEqual("Potentially eligible for Medicaid", _getText(_listItem("eligibility-overview__list-item"+"["+$i+"]", _in($eligibilityOverviewList))));
			_assertEqual("Medicaid provides comprehensive free or low cost coverage for those who are eligible. Nevada's Medicaid department will continue the review of your application for health benefits and reach out by mail when an eligibility determination is made and if any additional information is needed to make a final eligibility decision.", _getText(_paragraph(1)));
		}
		if($eligibilitySummary[$i] == "Chip"){
			_assertEqual("Potentially eligible for CHIP", _getText(_listItem("eligibility-overview__list-item"+"["+$i+"]", _in($eligibilityOverviewList))));
		}
		if($eligibilitySummary[$i] == "QHP"){
			_assertEqual("Marketplace Qualified Health and Dental plans.", _getText(_listItem("eligibility-overview__list-item"+"["+$i+"]", _in($eligibilityOverviewList))));
		}
		if($eligibilitySummary[$i] == "APTC"){
			$aptcValue= parseInt($aptcValue).toFixed(2);
			_assertEqual("Advanced Premium Tax CreditA tax credit you can take in advance to lower your monthly health insurance payment (or “premium”). When you apply for coverage in the Health Insurance Marketplace, you estimate your expected income for the year. If you qualify for a premium tax credit based on your estimate, you can use any amount of the credit in advance to lower your premium. of up to $"+$aptcValue+" in advance premium tax credits for your household to lower your monthly insurance bill.", _getText(_listItem("eligibility-overview__list-item["+$i+"]", _in($eligibilityOverviewList))));
			_assertVisible(_link("Advanced Premium Tax Credit", _in($eligibilityOverviewList)));

		}
		if($eligibilitySummary[$i] == "CSR"){
			_assertVisible(_link("Cost Sharing Reductions", _in($eligibilityOverviewList)));
			_assertEqual("Cost Sharing ReductionsCost-sharing reductions (CSR) are a form of financial help that help to reduce the out-of-pocket costs associated with private health insurance, such as deductibles, co-insurance and co-payments. If you qualify for cost-sharing reductions, you can only get those savings if you pick a silver plan. (This silver plan limit does not apply to members of federally recognized tribes.) for lower copaymentsA copayment, or copay, is a fixed amount you pay for a covered healthcare service, usually at the time you use the service., coinsuranceYour share of the costs of a covered health care service, calculated as a percent (for example, 20%) of the allowed amount for the service. You pay co-insurance plus any deductibles you owe. For example, if the health insurance or plan's allowed amount for an office visit is $100 and you've met your deductible, your co-insurance payment of 20% would be $20. The health insurance or plan pays the rest of the allowed amount. and deductiblesYour plan's deductible is the amount you owe before your insurance company covers costs. Generally, copays do not count toward the deductible. Please refer to your insurance company for details..", _getText(_listItem("eligibility-overview__list-item"+"["+$i+"]", _in($eligibilityOverviewList))));
			_assertVisible(_link("copayments", _in($eligibilityOverviewList)));
			_assertVisible(_link("coinsurance", _in($eligibilityOverviewList)));
			_assertVisible(_link("deductibles", _in($eligibilityOverviewList)));
		}
	}
}

function verifyEligibilityResultsForMembers($householdMember, $eligibility, $actionNeeded){
	_assertVisible(_heading2("Eligibility Results for members of your household"));
	_assertVisible(_row("Household memberEligible for the followingAction needed"));
	var $fullName = $ssapPeople[$householdMember].fullName(true);
	var $eligibilityResultsLength = _count("_listItem", "/[A-Za-z]/", _in(_list("eligibility-details__list",_under(_tableHeader("Eligible for the following")),_rightOf(_cell($fullName)))));
	_assertEqual($eligibility.length, $eligibilityResultsLength);
	for(var $i = 0; $i < $eligibility.length; $i++){
		if($eligibility[$i] == "Not Eligible"){
			_assertVisible(_listItem("Not EligibleMember is not eligible to enroll in plan on the exchange. to enroll in a Market Place Health or Dental Plan", _rightOf(_cell($fullName))));
		}
		if($eligibility[$i] == "Not seeking coverage"){
			_assertVisible(_link("Not seeking coverage", _rightOf(_cell($fullName))));
			_assertVisible(_listItem("Not seeking coverageMember is not seeking to enroll in a plan on the exchange.", _rightOf(_cell($fullName))));
		}
		if($eligibility[$i] == "Medicaid Referral"){
			_assertVisible(_link("Medicaid Referral", _rightOf(_cell($fullName))));
			_assertVisible(_listItem("Medicaid ReferralPotentially eligible for Medicaid for basis other than income.", _rightOf(_cell($fullName))));
		}
		if($eligibility[$i] == "QHP"){
			_assertVisible(_listItem("Market Place Qualified Health and Dental plans", _rightOf(_cell($fullName))));
		}
		if($eligibility[$i] == "Potential Medicaid"){
			_assertVisible(_listItem("Potentially Medicaid eligible", _rightOf(_cell($fullName))));
		}
		if($eligibility[$i] == "APTC"){
			_assertVisible(_link("Advanced Premium Tax Credit", _rightOf(_cell($fullName))));
		}
		if($eligibility[$i] == "CSR"){
			_assertVisible(_link("Cost Sharing Reductions", _rightOf(_cell($fullName))));
		}
		if($eligibility[$i] == "Chip"){
			_assertVisible(_listItem("Potentially CHIP Eligible", _rightOf(_cell($fullName))));
		}
	}

}

function verifyOptionalActionsForMedicaidChipAssessed($sectionIsVisible, $numberOfMembers, $eligibilities){
	if($sectionIsVisible == "Yes"){
		_assertVisible(_heading2("Optional actions"));
		_assertEqual("Options for Medicaid/CHIP Assessed Individuals", _getText(_heading3("seeks-QHP__toggle")));
		_assertEqual("The following member(s) of the household are potentially eligible for Medicaid or CHIP. If you are still interested -in shopping for a Qualified Health Plan for these individual(s) on the marketplace, please select the checkbox and save changes. This will enable you to shop for marketplace plans at full price for these member(s). Please note, that a request for confirming the Medicaid eligibility has been sent to Nevada's Medicaid department. Once these member(s) are enrolled in a qualified health plan and we receive confirmation of Medicaid/CHIP acceptance, they will be dis-enrolled from their qualified health plan.", _getText(_paragraph("seeks-QHP__note")));
		_assertVisible(_row("Household memberWants to enroll in a plan?"));
		var $membersList = _count("_paragraph", "text-bold", _in(_table(0, _in(_div("seeks-QHP")))));
		_assertEqual($numberOfMembers.length, $membersList);
		for(var $i =0; $i<$membersList; $i++){
			var $fullName = $numberOfMembers[$i].fullName(true);
			_assertVisible(_paragraph("Potentially eligible for " + $eligibilities[$i], _in(_parentNode(_paragraph($fullName)))))
				}
	}
	else{
		_assertNotVisible(_row("Household memberWants to enroll in a plan?"));
	}

}

function selectMedicaidChipIndicatorAndSave($members){
	for(var $i = 0; $i < $members.length; $i++){
		var $fullName = $ssapPeople[$members[$i]].fullName(true);
		_click(_checkbox("on", _near(_paragraph($fullName))));
	}
	_assertEqual("Save changes", _getText(_button("eligibilitySave")));
	_click(_button("eligibilitySave"));
	_wait(5000);
	_wait(60000, !_isVisible(_heading3("Application is in progress...")));
}

function clickGoToMyDashboard(){
	_assertVisible($goToMyDashboard);
	_click($goToMyDashboard);
	_wait(60000, !_isVisible(_heading3("Application is in progress...")));
}
function goToInformationAboutMedicareModal($index){
	_click(_button("Save & Continue"));
	var $fullName = $ssapPeople[$index].fullName(true);
	_assertVisible(_div("Information About Medicare"));
	_assertVisible(_paragraph($fullName+" looks like you may be eligible for Medicare. If you have Medicare, you cannot enroll in Exchange coverage"));
	_assertVisible(_paragraph("If someone has a Medicare coverage, he or she cannot enroll in Marketplace coverage."));

	_assertVisible(_button("Close"));
	_assertVisible(_button("Ok"));
	_click(_button("Ok"));
}

function selectIndividualWithDifferentAddress($index){
	var $fullName = $ssapPeople[$index].fullName(true);
	_click(_label($fullName));
}

function addHouseholdAddress($index, $address1, $address2, $city, $zip, $state, $county, $haveSameAddress){
	if($haveSameAddress === "Yes"){
		var $address = $address1 +", "+$city+", NV, "+$zip;
		var $i = $index - 1;
		_click(_label($address+"["+$i+"]"));
	}
	else{
		_click(_submit("Add Address"));
		_assertVisible(_heading3("Add address"));
		_setValue(_textbox("streetAddress1"), $address1);
		_setValue(_textbox("streetAddress2"), $address2);
		_setValue(_textbox("city"), $city);
		_setValue(_textbox("postalCode"), $zip);
		_setSelected(_select("state"), $state);
		_setSelected(_select("countyCode"), $county);
		_click(_button("Save"));
	}
	var $fullName = $ssapPeople[$index].fullName(true);
	$ssapPeople[$index].$homeAddress1 = $address1;
	$ssapPeople[$index].$homeAddress2 = $address2;
	$ssapPeople[$index].$homeCity = $city;
	$ssapPeople[$index].$homeZip = $zip;
	$ssapPeople[$index].$homeCounty = $county;

	_log(JSON.stringify($ssapPeople[$index]));
	return $ssapPeople;
}

function selectHouseholdAddress($index, $addressInfo, $positionOnPage){
	var $fullName = $ssapPeople[$index].fullName(true);
	var $address = $addressInfo[$index].$homeAddress1 +", "+$addressInfo[$index].$homeCity+", NV, "+$addressInfo[$index].$homeZip;
	if($positionOnPage){
		_click(_label($address+"["+$positionOnPage+"]", _near(_label($fullName))))
			}
	else{
		_click(_label($address));
	}
}

function selectNoSSNReason($reason){
	if($reason){
		_setSelected(_select("reasonableExplanationForNoSSN"), $reason);
	}
	else{
		_setSelected(_select("reasonableExplanationForNoSSN"), "Religious Exception");
	}
}

function goToParentCareTakerInformation($mainperson, $indexes, $takingCare){

	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Parent / Caretaker Information"));
	var $name = $ssapPeople[$mainperson].fullName(true);
	_assertVisible(_paragraph("Is "+$name+" the main person taking care of any of these children?"));

	for(var $i= 0; $i<$indexes.length; $i++){
		var $name = $ssapPeople[$indexes[$i]].fullName(true);
		_assertVisible(_listItem("/"+$name+"/"));
	}
	_click(_label($takingCare));
}

function goToFullTimeStudent($indexes){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Full Time Student"));
	_assertVisible(_paragraph("Are any of these people full time students?"));
	for(var $i= 0; $i<$indexes.length; $i++){
		var $name = $ssapPeople[$indexes[$i]].fullName(true);
		_assertVisible(_listItem("/"+$name+"/"));
	}

}
function selectFullTimeStudent($indexes){
	for(var $i = 0; $i < $indexes.length; $i++){
		var $index = $indexes[$i];
		Ma
			var $name = $ssapPeople[$index].fullName(true);
		_assertVisible(_label($name));
		_click(_label($name));
	}
	_click(_label("None of the Above"));
}


function goToMaritalStatus($index, $option, $spouseOnApplication,$optionSelected){

	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Marital Status"));
	var $name = $ssapPeople[$index].fullName(true);
	_assertVisible(_fieldset("Is "+$name+" married?"));
	if(!$optionSelected){
		_click(_label($option));
		if($option == "Yes"){
			_assertVisible(_fieldset("Who is "+$name+"'s spouse?"));
			_assertVisible(_label("Someone already on the application"));
			_assertVisible(_label("Someone else who isn't applying for health coverage"));
			if($spouseOnApplication == "Yes"){
				_click(_label("Someone already on the application"));
				_assertVisible(_paragraph("Select "+$name+"'s spouse."));
				_assertVisible(_button("Select Spouse"));
			}
			else{
				_click(_label("Someone else who isn't applying for health coverage"));
				_assertVisible(_paragraph("Enter "+$name+" spouse's information."));
				_assertVisible(_button("Add Spouse"));
			}
		}
	}

}

function clickSelectSpouseFromMaritalStatus(){
	_click(_button("Select Spouse"));
	_assertVisible(_heading1("Household Relationship"));

}

function clickaddSpouseFromMaritalStatus(){
	_click(_button("Add Spouse"));
	_assertVisible(_heading1("About Your Household"));
}

function goToPersonalInformation(){
	if(_isVisible(_button("Save & Continue"))){
		_click(_button("Save & Continue"));
	}
	else{
		_click(_button("Continue"));
	}
	_assertVisible(_heading1("Personal Information"));

}

function goToCitizenshipImigrationStatus(){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Citizenship/Immigration Status"));

}

function goToEthnicityAndRace(){
	_click(_button("Save & Continue"));
	_assertVisible(_heading1("Ethnicity and Race"));
}

function selectIfChildrenCurrentlyHaveHealthCoverage($indexes){
	_assertVisible(_fieldset("Do Children listed below currently have health coverage?"));
	if($indexes){
		for(var $i = 0; $i<$indexes.length;$i++){
			var $index = $indexes[$i];
			var $name = $ssapPeople[$index].fullName(true);
			_click(_label($name, _in(_fieldset("Do Children listed below currently have health coverage?"))));
		}
	}
}

function removeMemberFromGroup($group,$memberNum){
	$group.member.splice($memberNum,1);
	return $group;
}



