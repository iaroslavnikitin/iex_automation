_includeOnce("QuickLinksMenu.sah");
_includeOnce("AccessCodeMenu.sah");
_includeOnce("QEPHome.sah");
_includeOnce("QEPEligible.sah");
_includeOnce("Esign.sah");
_includeOnce("ManageMember.sah");
_includeOnce("Ssap.sah");
_includeOnce("Login.sah");
_includeOnce("Results.sah");
_includeOnce("JenkinsAndDBSetUp.sah");
_includeOnce("CustomGrouping.sah");
_resource("../pic.jpg");	
// Variables
var $Indportal = true;
var $indportalYear;

// Open Enrollment menu
var $openEnrollmentHeader = _heading4("Open Enrollment");
var $openEnrollmentDaysRemaining = _div("square-content");
var $openEnrollmentDaysRemainingLink = _link("Days Remaining");
var $openEnrollmentAccessors = [$openEnrollmentHeader, $openEnrollmentDaysRemaining, $openEnrollmentDaysRemainingLink];

// Rest of accessors
var $indportalHeader = _heading1("skip");
var $indportalCheckForSavings = _submit("Check for Savings");
var $indportalCheckForSavingsAgain = _link("Check for Savings Again");
var $indportalQualifyingEvents = _submit("DO YOU HAVE ANY QUALIFYING EVENTS TO REPORT?");
var $indportalQualifyingEvents1 = _submit("DO YOU HAVE ANY QUALIFYING EVENTS TO REPORT?[1]");
var $indportalQualifyingEvents2 = _link("Start Application");_submit("Start Your Application[3]");
var $indportalQualifyingEvents3 = _submit("Start Your Application");
var $indportalReportLifeEventAndShop =_button("REPORT LIFE EVENT AND SHOP[1]")//_button("/REPORT LIFE EVENT AND SHOP/");
var $indportalShopForPlans = _button("SHOP FOR PLANS");
var $indportalShopForPlans2 = _span("SHOP FOR PLANS");
var $indportalFinalizePlans = _span("FINALIZE PLANS");
var $indportalReportAChange = _button("REPORT A CHANGE");
var $indportalStartNewApplication = _button("START NEW APPLICATION");
var $indportalContinueShopping = _button("CONTINUE SHOPPING");
var $indportalChangePlans = _button("CHANGE PLANS");
var $indportalViewApplication = _link("/View Your Application/i");
var $indportalResumeApplication = _submit("Resume Your Application[2]");
var $indportalHealthPlan = _div("info-header txt-center[1]");
var $indportalHealthPlanDetails = _link("View Plan Details");
var $indportalDentalPlan = _div("info-header txt-center[3]");
var $indportalDentalPlanDetails = _link("View Plan Details[1]");
var $indportalFinalizeYourPlan =_submit("FINALIZE YOUR PLAN CHOICE & ENROLL");
var $indportalFinalizeYourPlan2 =_link("FINALIZE YOUR PLAN CHOICE & ENROLL");
var $indportalCheckQualifyforHardshipExemption=_checkbox("sc3");
var $indportalSaveAndContinue=_link("Save and Continue");
var $indportalNumberOfExemptedMember=_textbox("sc3");
var $indportalReportChange=_submit("Report a Change");
var $indportalViewYourApplication =_submit("View Your Application[2]");
var $indportalViewYourApplication2 =_span("View Application");
var $applicantVerifications=_link("Applicant Verifications");
var $indportalPlanSummaryPopUpHeader = _heading3("disenrollDateModal");
var $indportalPlanSummaryTerminateCurrentMonth = _radio("disenrollmentdate");
var $indportalPlanSummaryTerminateNextMonth = _radio("disenrollmentdate[1]");
var $indportalPlanSummaryTerminateMonthAfterNext = _radio("disenrollmentdate[2]");
var $indportalPlanSummaryButton=_link("Plan Summary");
var $myApplications=_link("My Applications");
var $currentEnrollment = true;
var $pastEnrollment = true;
var $healthPlanInCart = _span("In your Cart", _under(_div("Your Health Plans")));
var $dentalPlanInCart = _span("In your Cart", _under(_div("Your Dental Plans")));
var $disenrollFromHealthPlan = _link("/disenrollPlan/i", _near(_div("/Medical Insurance/i")));
var $disenrollFromHealthPlan2 = _link("Disenroll From Health Plan Cancel coverage", _near(_div("Health Plan")));
var $disenrollFromDentalPlan = _link("/disenrollPlan/i", _near(_div("/Dental Insurance/i")));
var $disenrollFromDentalPlan2 = _link("Disenroll From Dental Plan Cancel coverage", _near(_div("Dental Plan")));
var $disenrollFromHealthAndDentalPlans = _link("disenrollBoth");
var $disenrollModalHeading = _heading3("disenrollModal");
var $healthPlanCoverageStatus = _dDesc("/generic-medic/i", _near(_div("/Medical Insurance/i")));
var $healthPlanCoverageStatus2 = _link("ttclass ng-scope ng-binding", _near(_div("Health Plan")));
var $dentalPlanCoverageStatus = _dDesc("/generic-medic/i", _near(_div("/Dental Insurance/i")));
var $dentalPlanCoverageStatus2 = _link("ttclass ng-scope ng-binding[1]", _near(_div("Dental Plan")));

function verifyElementsOfIndividualDashboard($HouseHold,$Eligibility) {
	if(_isVisible(_link("Go to Dashboard"))){
		_click(_link("Go to Dashboard"));
	}
	
	$selectedYear = getCurrentPreeligibilityYear();
	_click(_link("/"+$selectedYear+"/"));
	$indportalYear = $selectedYear;
	
	_log("Disenroll Health "+$disenrollHealth);
	_log("Disenroll Dental "+$disenrollDental);
	// Close popup if necessary
	var $closePopup = _link("Don't ask again");
	_wait(5000, _isVisible($closePopup));
	if (_isVisible($closePopup)) {
		_click($closePopup);
	}

	// Agent icon
	verifyAgentIcon();

	// My Stuff menu
	myStuffVerify();

	// Quick Links menu
	quickLinksVerify();

	// Access Code menu
	verifyElementsOfAccessCodeOnIndividualDashboard();

	// Accessors
	_assertVisible($indportalHeader);
	/*if(!(_isVisible($indportalViewApplication))){
		_assertTrue(_isVisible($indportalCheckForSavings) || _isVisible($indportalCheckForSavingsAgain));
	}*/
	_assertTrue(
				_isVisible($indportalReportLifeEventAndShop) || 
				_isVisible($indportalQualifyingEvents) || 
				_isVisible($indportalQualifyingEvents1) || 
				_isVisible($indportalViewApplication) || 
				_isVisible($indportalResumeApplication)|| 
				_isVisible($indportalQualifyingEvents2)|| 
				_isVisible($indportalQualifyingEvents3) || 
				_isVisible($indportalReportChange) || 
				_isVisible(_link("Disenroll From Plan")) || 
				
				_isVisible($indportalStartNewApplication) || 
				_isVisible($indportalShopForPlans ) || 
				_isVisible($indportalShopForPlans2 ) ||
				_isVisible($indportalFinalizePlans ) ||
				_isVisible($indportalReportAChange) || 
				_isVisible($indportalContinueShopping) || 
				_isVisible(_button("UPLOAD DOCUMENTS")) ||
			   _isVisible($indportalChangePlans));

	// Verify name
	_assertTrue(new RegExp("Welcome, " + $firstName + " " + $lastName, "i").test(_getText($indportalHeader)));

	// Verify APTC amount
	if ($taxCreditValue) {
	
	//	var $amount = _collect("_strong", "/.*/", _in(_dDesc("prem-tax-credit")));
	/*	_assertTrue($amount.length === 1);
		$amount = $amount[0]; 
		_log("APTC amt in Dashboard:" +$amount);
	*/	
	
	if(_isVisible(_span("Start Application", _near(_span("Your Application Status"))))){
		
		if($Eligibility == "APTCAndCSR"){
		_assertEqual("Your household member and eligibility information will show up here once you have completed your application Based on household and income information you used in our eligibility estimator, you are likely eligible for Tax Credit and Cost Sharing Reduction program", _getText(_div("household_elig_content")),"Verify text in Your Household Eligibility section");
		}else if ( $Eligibility == "APTC"){
		_assertEqual("Your household member and eligibility information will show up here once you have completed your application Based on household and income information you used in our eligibility estimator, you are likely eligible for Tax Credit", _getText(_div("household_elig_content")),"Verify text in Your Household Eligibility section");	
		} else if ( $Eligibility == null){
			_assertEqual("Your household member and eligibility information will show up here once you have completed your application", _getText(_div("household_elig_content")),"Verify text in Your Household Eligibility section");	
		}
	}
		
	}

	// Verify showing selected plans, also check if anonymous shopping for plans was done for current year
	// Uncomment once Dashbaord is stable
/*
	if(isPlanSelectedForCurrentYear()){
		if (($planName) && ($disenrollHealth == "false")) {
			if(_isVisible($indportalReportChange)){
				_assertVisible(_link("VIEW HEALTH PLAN DETAILS"));
			}
			else {
			_assertVisible($indportalHealthPlanDetails);
			}
			_assertTrue(new RegExp($planName).test(_getText($indportalHealthPlan)));
		}

		if($planName==""){
			_assertVisible(_image("Health Plan Image"));
			_assertVisible(_image("Sample Plan Image"));
			_assertVisible(_image("This is a sample plan summary"));
		}
		if (($dentalPlanName )  && ($disenrollDental == "false")) {
			if(_isVisible($indportalReportChange)){
				_assertVisible(_link("VIEW DENTAL PLAN DETAILS"));
			}
			else {
				_assertVisible($indportalDentalPlanDetails);
			}
			_assertTrue(new RegExp($dentalPlanName).test(_getText($indportalDentalPlan)));
		}
	}
*/
	if(_isVisible(_heading4("Your Selected Plans (To Be Enrolled)"))){
		$currentEnrollment =false;
		if($disenrollDental == "false"  && $disenrollHealth =="false"){
			$pastEnrollment=false;
		}
	}
	
}

//function clickAgentIcon() {
//	clickAgentIcon();
//}

function selectApplicationYear($year) {
     
	if($year == "previous_year"){
		$coverageYear = _getText(_list("nav nav-tabs multi-year-tab")).split(" ")[0];//get text of first tab
	 }
	else {
		$coverageYear = getCurrentPreeligibilityYear();		
	}
	
	var $coverageYearLink = _link("/"+$coverageYear+"/", _in(_list("/tabs/")));
	_wait(5000, _isVisible($coverageYearLink));
	_click($coverageYearLink);
	
	$indportalYear =$coverageYear;
}

function clickCheckForSavingsOnIndividualDashboard() {
	_click($indportalCheckForSavings);
	verifyElementsOnPreeligibility();
}

function clickStartApplication($year) {

	
	$appYear = getCurrentPreeligibilityYear();
	_click(_link("/"+$appYear+"/"));

	if(_isVisible(_heading3("Find Help Near You")))
		_click(_link("Don't ask again"));
	
	if (_isVisible($indportalQualifyingEvents)) {
		_click($indportalQualifyingEvents);
	}
	else if (_isVisible($indportalQualifyingEvents1)) {
		_click($indportalQualifyingEvents1);
	}
	else if (_isVisible($indportalStartNewApplication)) {
		_click($indportalStartNewApplication);
	} 
	else if (_isVisible($indportalReportLifeEventAndShop)){
		_click($indportalReportLifeEventAndShop);
	}
	else {
		_click($indportalQualifyingEvents2);
	}
}

function clickFinalizeYourPlan(){
	if(_isVisible(_div("navtopview"))){
			_click(_link("My Dashboard"));
			selectApplicationYear();
		}
		else{
			_click(_link("My Account Dropdown Menu. Press enter to open it and tab through its options"));
			_click(_link("Dashboard"));
			selectApplicationYear();
		}
	/*
	//var $timeout=0; //Code has to be added here.
	var $i=0;
	do{
		if(_isVisible(_div("navtopview"))){
			_click(_link("My Dashboard"));
			selectApplicationYear();
		}
		else{
			_click(_link("My Account Dropdown Menu. Press enter to open it and tab through its options"));
			_click(_link("Dashboard"));
			selectApplicationYear();
		}
		$i++;
		if(_isVisible($indportalFinalizeYourPlan) || _isVisible($indportalFinalizeYourPlan2) || _isVisible($indportalShopForPlans ) || _isVisible($indportalShopForPlans2 ) || _isVisible($indportalFinalizePlans ))
			break;
	}
	while($i<5);
	
	_assertTrue(_isVisible($indportalFinalizeYourPlan) || _isVisible($indportalFinalizeYourPlan2) || _isVisible($indportalShopForPlans) || _isVisible($indportalShopForPlans2 ) || _isVisible($indportalFinalizePlans ));

	//	_click($indportalFinalizeYourPlan);
	*/
	
	clickShopForPlans();
}

function clickSaveAndContinue($shopForPlan){

	
	_log ("Indportal, clickSaveAndContinue: $ssapPeople.length = " + $ssapPeople.length + " , $ssapPeople = " + $ssapPeople);
	
	for(var $i =0; $i< $ssapPeople.length; $i++){
		
		var $tobaccoUse = false;
		if ($people[$i] === undefined) {
			_log("Indportal, clickSaveAndContinue: $people[$i] is undefined for $i=" + $i);
		}
		else {
			$tobaccoUse = $people[$i].$tobacco;
		}
		
		var $age = calculateAge($ssapPeople[$i].$doB);
		if ($age <= 18) {
			_log("Indportal, clickSaveAndContinue: $ssapPeople[$i].$age <=18 for $i=" + $i + " , $ssapPeople[$i].$firstName=" + $ssapPeople[$i].$firstName + " , $ssapPeople[$i].$lastName=" + $ssapPeople[$i].$lastName);
			continue;
		}
			
		if($tobaccoUse == true){
			_log("Indportal, clickSaveAndContinue: $ssapPeople[$i].$tobaccoUse == true for $i=" + $i + " , $ssapPeople[$i].$firstName=" + $ssapPeople[$i].$firstName + " , $ssapPeople[$i].$lastName=" + $ssapPeople[$i].$lastName);
			_click(_radio("tobaccoUser-yes", _rightOf(_tableHeader($ssapPeople[$i].$firstName+" "+$ssapPeople[$i].$lastName))));
			}
		else{
			_log("Indportal, clickSaveAndContinue: $ssapPeople[$i].$tobaccoUse == false for $i=" + $i + " , $ssapPeople[$i].$firstName=" + $ssapPeople[$i].$firstName + " , $ssapPeople[$i].$lastName=" + $ssapPeople[$i].$lastName);
			//_click(_radio("tobaccoUser-no", _near(_tableHeader($ssapPeople[$i].$firstName+" "+$ssapPeople[$i].$lastName))));
			_click(_radio("tobaccoUser-no["+$i+"]"));
			}
	}
	
	_click($indportalSaveAndContinue);
	countssapPeople();
	verifyCustomGroupingPage();
	if($shopForPlan !="false"){
		clickShopHealthPlan();
	}
}

function clickReportAChange(){
	$overrideCoverage="";
	
	if (!(_isVisible($indportalReportChange))){
		_click(_link("My Account Dropdown Menu. Press enter to open it and tab through its options"));
		_click(_link("Dashboard"));
		selectApplicationYear();
		_wait(5000, _isVisible($indportalReportChange));
	}
	
	if (_isVisible($indportalReportChange))
		_click($indportalReportChange);
	else if (_isVisible(_span("Report a Change")))
		_click(_span("Report a Change"));
	
	eventHomeVerify();
}

function clickViewSelectedHealthPlanDetails(){
//	$selectedYear = _fetch(window.moment().get('year'));
	$selectedYear=$coverageYear;
	_click(_link(""+$selectedYear));
//	_click(_link("VIEW HEALTH PLAN DETAILS"));
	_click(_span("View Details", _near(_div("Your Health Plans"))));
//	verifyElementsOnIndportalPlanSummaryPage();
	verifyElementsOnEnrollmentHistoryPage();
}

function clickViewSelectedDentalPlanDetails(){
//	$selectedYear = _fetch(window.moment().get('year'));
	$selectedYear=$coverageYear;
	_click(_link(""+ $selectedYear));
//	_click(_link("VIEW DENTAL PLAN DETAILS"));
	_click(_span("View Details", _near(_div("Your Dental Plans"))));
//	verifyElementsOnIndportalPlanSummaryPage();
	verifyElementsOnEnrollmentHistoryPage();
}

//Indportal-plansummary     
var $disenrollHealth = "";
var $disenrollDental = "";
var $CoverageStartDate = "";

function fillCoverageStartDate() {
	_log("Indportal, fillCoverageStartDate begin function: $CoverageStartDate = " + $CoverageStartDate);
	if ( ($CoverageStartDate == undefined) || ($CoverageStartDate == null) || ($CoverageStartDate == "") ) {
		if (_isVisible(_cell("ng-binding", _near(_tableHeader("Coverage Start Date:")))))
			$CoverageStartDate = _getText(_cell("ng-binding", _near(_tableHeader("Coverage Start Date:"))));
		else if (_isVisible(_dDesc("ng-binding", _near(_dTerm("Coverage Start Date:")))))
			$CoverageStartDate = _getText(_dDesc("ng-binding", _near(_dTerm("Coverage Start Date:"))));
	}
	_log("Indportal, fillCoverageStartDate end function: $CoverageStartDate = " + $CoverageStartDate);
}

function verifyElementsOnIndportalPlanSummaryPage(){
	
	fillCoverageStartDate();
	
	var $healthPlanCoverageStatusText = "";
	if (_isVisible($healthPlanCoverageStatus))
		$healthPlanCoverageStatusText = _getText($healthPlanCoverageStatus);
	else if (_isVisible($healthPlanCoverageStatus2))
		$healthPlanCoverageStatusText = _getText($healthPlanCoverageStatus2);
	
	var $dentalPlanCoverageStatusText = "";
	if (_isVisible($dentalPlanCoverageStatus))
		$dentalPlanCoverageStatusText = _getText($dentalPlanCoverageStatus);
	else if (_isVisible($dentalPlanCoverageStatus2))
		$dentalPlanCoverageStatusText = _getText($dentalPlanCoverageStatus2);	
	
	var $endCovDate = $CoverageStartDate.split(" - ")[1];
	_log("eventReported: " + $eventReported);
	
	if($eventReported == 1 || $overrideCoverage!=""){
		var $now=_call(window.moment());
		var $currentDate = _call(window.moment($now).format('MM/DD/YYYY'));
		var $futureDate = _fetch(window.moment($currentDate).isAfter($eventDate));
		var $reportedOnPastDate = _fetch(window.moment($currentDate).isBefore($eventDate));
		if(($futureDate&&$reportedOnPastDate)){
			var $status = verifyCoverageDateStartsToday($CoverageStartDate);
		}
		else{
			var $status=true;
		}
	}
	else if($pastDate == false){
		$status =true;
	}
	else {
		var $status = verifyCoverageDateGreaterThanToday($coverageDate);
	}
	_assertTrue($status, "Status is not true." );
	if($disenrollHealth == "true"){
		_assertEqual("Cancelled", $healthPlanCoverageStatusText);
	}
	else if(_isVisible(_strong("Medical Insurance"))){
//			if($enrollStatus==true){
//				_assertEqual("Enrolled", $healthPlanCoverageStatusText);
//				_assertVisible($disenrollFromHealthPlan);
//			}
//			else {
				_assertEqual("Pending", $healthPlanCoverageStatusText);
				_assertVisible($disenrollFromHealthPlan);
//			}
	}
	else {
		_assertNotVisible(_strong("Medical Insurance"));
	}

	if($disenrollDental=="true"){
		_assertEqual("Cancelled", $dentalPlanCoverageStatusText);
	}
	else if(_isVisible(_div("Dental Insurance"))){
			if($enrollStatus==true){
				_assertEqual("Enrolled", $dentalPlanCoverageStatusText);
			}
			else {
			_assertVisible(_dDesc("Pending",_under(_div("Dental Insurance"))),"Verify if dental insurance status is pending");	
//			_assertVisible(_dDesc("Pending", _rightOf(_dTerm("Status:[1]")),_near(_div("Dental Insurance"))));
		}
	}
	else {
		_assertEqual("Pending", $healthPlanCoverageStatusText);
	}

	_assertVisible(_link("View Benefit Details"));
}

function verifyCoverageDateStartsToday($coverageStarts) {
	$coverageStarts = $coverageStarts.split (" - ")[0];
	var $now=_call(window.moment());
	var $currentDate = _call(window.moment($now).format('MM/DD/YYYY'));
	var $strt= _fetch(window.moment($currentDate).isSame($coverageStarts));
	return $strt;
}

function verifyCoverageDateGreaterThanToday($coverageStarts){
	$coverageStarts = $coverageStarts.split (" - ")[0];
	var $now=_call(window.moment());
	var $currentDate = _call(window.moment($now).format('MM/DD/YYYY'));
	var $strt= _fetch(window.moment($currentDate).isBefore($coverageStarts));
	return $strt;
}

function clickDisenrollFromHealthAndDentalPlans(){
	_click($disenrollFromHealthAndDentalPlans);
	$disenrollHealth = "true";
	$disenrollDental ="true";
	_assertVisible($disenrollModalHeading);
}

function clickDisenrollFromDentalPlans(){
	if (_isVisible($disenrollFromDentalPlan))
		_click($disenrollFromDentalPlan);
	else if (_isVisible($disenrollFromDentalPlan2))
		_click($disenrollFromDentalPlan2);
	else
		_log("'Cancel Coverage' or 'Disenroll From Plan' button was not found in Dental Plan section of the page");

	$disenrollDental ="true";
	$disenrollHealth = "false";

	_assertVisible($disenrollModalHeading);
	
	var $statement = _getText(_div("margin5-l margin5-r margin20-t alert alert-info margin0-b ng-scope"));
	_assertEqual("If you would like to report a Life Change Event, such as moving out of Idaho, gaining coverage through an employer, had a change in income or had a birth or death in the household, please report this event by navigating to your Dashboard and selecting “Report a Change”. If you are receiving Advanced Premium Tax Credit (APTC) or if you have other questions, please call 1-855-YH-IDAHO (1-855-944-3246) to report this change.",  $statement);
}

function clickDisenrollFromHealthPlans(){
	if (_isVisible($disenrollFromHealthPlan))
		_click($disenrollFromHealthPlan);
	else if (_isVisible($disenrollFromHealthPlan2))
		_click($disenrollFromHealthPlan2);
	else
		_log("'Cancel Coverage' or 'Disenroll From Plan' button was not found in Health Plan section of the page");
			
	$disenrollDental ="false";
	$disenrollHealth = "true";
	
	_assertVisible($disenrollModalHeading);
	
	var $statement = _getText(_div("margin5-l margin5-r margin20-t alert alert-info margin0-b ng-scope"));
	_assertEqual("If you would like to report a Life Change Event, such as moving out of Idaho, gaining coverage through an employer, had a change in income or had a birth or death in the household, please report this event by navigating to your Dashboard and selecting “Report a Change”. If you are receiving Advanced Premium Tax Credit (APTC) or if you have other questions, please call 1-855-YH-IDAHO (1-855-944-3246) to report this change.",  $statement);
}

function selectReasonToDisenrollFromPlan($Reason){
	var $reason = $Reason.toLowerCase();
	if($reason == "cannot afford the premium")
		_click(_radio("disaffordability"));
	if($reason =="not happy with the service received from the health and dental plan")
		_click(_radio("disnothappywithplan"));
	if($reason == "provider is out of network")
		_click(_radio("outOfnetwork"));
	if($reason =="enrollment Counselors/Agent error")
		_click(_radio("agentError"));
	if($reason == "other(please explain)")
		_click(_radio("other"));

}

function clickContinueForVoluntaryDisenrollment(){
	fillCoverageStartDate();
	_click(_link("/Continue/i", _in(_div("disenrollDialog"))));
	_assertVisible(_span("ng-scope[1]"));
}

function clickYesToConfirmDisenrollment(){

	fillCoverageStartDate();
	var $cov="";
	
	if($overrideCoverage == ""){
		$cov = $CoverageStartDate;
	}
	else {
		$cov =$overrideCoverage;
	}

	_log("Indportal, clickYesToConfirmDisenrollment: $CoverageStartDate = " + $CoverageStartDate + " , $cov = " + $cov);

	if(verifyCoverageDateGreaterThanToday($cov)==true)
	{
		_log("Indportal, clickYesToConfirmDisenrollment: Coverage start date is greater than today");
		_assertVisible(_heading3("submitDisenrollModal"));
	}
	else {
		_log("Indportal, clickYesToConfirmDisenrollment: Coverage start date is lesser or equal than today");
		_assertVisible($indportalPlanSummaryPopUpHeader);
		verifyElementsOnTerminationPopUp();
		selectTerminationDate();
	}
}

function selectTerminationDate(){
	_setStrictVisibilityCheck(true);
	_click(_radio("disenrollmentdate"));
//	_click(_submit("Continue"));
	_click(_submit("OK"));
//	_click(_link("Continue"));
	_link("OK")
//	_click(_link("Submit"));
	_click(_link("OK"));
	_link("Go To Dashboard")
	_setStrictVisibilityCheck(false);
}

//function selectTerminationDate($date){
//	if($date == "Current Month"){
//		_check($indportalPlanSummaryTerminateCurrentMonth);
//	}
//
//	if($date == "Next Month") {
//		_check($indportalPlanSummaryTerminateNextMonth);
//	}
//
//	if($date == "Month After Next"){
//		_check($indportalPlanSummaryTerminateMonthterNext);
//	}
//}

function clickGoToDashBoardFromPlanSummaryPage(){
	_click(_link("Go To Dashboard"));
	verifyElementsOfIndividualDashboard();
}

function clickMyEnrollment(){
	_click(_link("My Enrollments"));
	_log("Health Plan Name " + $planName);
	_log("Dental Plan Name " + $dentalPlanName);
	_log("disenrollHealth " + $disenrollHealth);
	_log("disenrollDental " + $disenrollDental);
	if(_isVisible(_select(0))){
		if($overrideCoverage != ""){
			var $now= _call(window.moment()).format("MM/DD/YYYY");
			$Year = parseInt(_fetch(window.moment($now).get('year')));
			_setSelected(_select(0), "/"+$Year+"/");
		}
		else {
			_setSelected(_select(0), "/"+$coverageYear+"/");
		}
	}

	var $enrollmentOrder =  _collectAttributes("_heading4", "/.*/", "sahiText");
	if($disenrollHealth == "true" && $disenrollDental == "true" ||( $planName=="" && $dentalPlanName=="" )){
		_assertVisible(_heading4("/My Enrollments Enrollmen/"));
	}
	else{
		//_assertTrue(new RegExp("Current Enrollments").test($enrollmentOrder[4]))
			//_assertEqual("/Current Enrollments/",$enrollmentOrder[4]);
			_assertVisible(_heading4("/Current Enrollments Enrollment/"));
	}
	if($planName == "" &&  $dentalPlanName == ""  && ($disenrollHealth == "false" && $disenrollDental == "false" )) {
		_assertVisible(_paragraph("No enrollments found.", _near(_heading4("My Enrollments"))));
	}
	else {

		verifyElementsOnEnrollmentHistoryPage();
	}
}

function verifyElementsOnEnrollmentHistoryPage(){
	_assertVisible(_link("View Benefit Details"));
	if(($dentalPlanName != "")&&(!(_isVisible(_heading4("My Enrollments")))) && ($planName!="") && ($disenrollHealth == "false")&& ($disenrollDental == "false")){
		var $planOrder =  _collectAttributes("_div", {
			className:"plan-title collapse-header ng-scope"}
											 , "sahiText");
		_assertEqual("Health Plan", $planOrder[0]);
	}
	if(($disenrollHealth == "true") ||($disenrollDental == "true") ){
		if($disenrollDental == "true"){
			clickDentalTabOnEnrollmentHistoryPage();
		}
		if($disenrollHealth == "true"){
			verifyElementsOfCancelledHealthPlan();
		}
	}
	else if($enrollStatus==true){
		//_assertEqual("Enrolled", _getText(_link("ttclass ng-scope ng-binding", _near(_tableHeader("Enrollment Status:")))));
		_assertVisible(_row("Enrollment Status: Enrolled"));
		fillCoverageStartDate();
		//_assertEqual($CoverageStartDate, _getText(_cell("ng-binding[12]"), _in(_table("table table-condensed[3]"))));
		_assertVisible(_row("Coverage Start Date: "+$CoverageStartDate));
	}
	else {
		_assertEqual("Pending", _getText(_link("ttclass ng-binding ng-scope", _near(_tableHeader("Enrollment Status:")))));
		fillCoverageStartDate();
		_assertTrue(new RegExp($CoverageStartDate).test(_getText(_row("/Self/", _in(_div("activeEnrollment ng-scope"))))));
	}
}

function  clickDentalTabOnEnrollmentHistoryPage(){
	if($disenrollDental =="true" && $disenrollHealth =="true" )
		_click(_link("Dental Plan"));
	if($disenrollDental == "true"){
		verifyElementsOfCancelledDentalPlan();
	}
	else
		_assertEqual("Pending", _getText(_cell("ng-binding", _near(_tableHeader("Enrollment Status:")))));
}

function verifyElementsOfCancelledDentalPlan(){
	if((_getText(_cell("ng-binding", _near(_tableHeader("Enrollment Status:[1]")))))=="Terminated"){
		_assertNotEqual(_getText(_cell("ng-binding", _near(_tableHeader("Coverage End Date:[1]")))),_getText(_cell("ng-binding", _near(_tableHeader("Coverage Start Date:[1]")))));
	}
	else {
		_assertEqual(_getText(_cell("ng-binding", _near(_tableHeader("Coverage End Date:[1]")))),_getText(_cell("ng-binding", _near(_tableHeader("Coverage Start Date:[1]")))));
		_assertEqual("Cancelled", _getText(_span("ng-binding ng-scope", _near(_tableHeader("Enrollment Status:[1]")))));
		var $rows = _collect("_cell", "/ng-binding.*/",_in(_table("table table-condensed[7]")));
		for (var $i = 2; $i < $rows.length; $i=$i+3){
			var $coverageDates = _getText($rows[$i]).split(" -");
			_assertEqual($coverageDates[0], $coverageDates[1]);
		}
	}
}

function verifyElementsOfCancelledHealthPlan(){
	_click(_link("Health Plan"));
	if($disenrollDental =="true"){
		_assertVisible(_cell("Cancelled"));
		_assertEqual(_getText(_cell("ng-binding[3]")), _getText(_cell("ng-binding[4]")));
		//cov start and end date of health plan are same if cancelled

		//cov of family member
		var $rows = _collect("_cell", "/ng-binding.*/",_in(_table("table table-condensed[3]")));
		for (var $i = 2; $i < $rows.length; $i=$i+3) {
			var $coverageDates = _getText($rows[$i]).split(" -");
			_assertEqual($coverageDates[0], $coverageDates[1]);
		}
	}
	else{
		verifyElementsOfCancelledDentalPlan();
	}
}

function clickViewYourApplication(){
	
	_wait(60000, !_isVisible(_heading3("Application is in progress...")));
    //_click($indportalViewYourApplication);
	_click($indportalViewYourApplication2);
	_wait(3000);
	if(_isVisible(_select(0))){
			var $now= _call(window.moment()).format("MM/DD/YYYY");
			$Year = parseInt(_fetch(window.moment($now).get('year')));
			_setSelected(_select(0), "/"+$Year+"/");
	} 
	else{
	_log("Application year selection drop down is not displayed!");	
	}
	_wait(3000);
	_click(_link("here"));
	//_click($indportalViewApplication);
	_assertExists(_heading4("Application Summary"));
	//for (var $i = 0; $i < $ssapPeople.length; $i++) {
		viewApplication(0);
		verifyNativeOnSSAPPage15(0);
	//}
}

function verifyElementsOnTerminationPopUp(){
	var now=_call(window.moment()).format("MMMM DD, YYYY");
	var $currentDate = _call(window.moment(now)).add(0,'months').endOf('month').format("MMMM DD, YYYY");
	var $nextMonth = _call(window.moment(now)).add(1,'months').endOf('month').format("MMMM DD, YYYY");
	var $monthAfterNextMonth = _call(window.moment(now)).add(2,'months').endOf('month').format("MMMM DD, YYYY");
	var $header1 = _getText(_label("radio margin5-b ng-binding ng-scope"));
	_assertEqual("Last day of the current month (" +$currentDate +")",$header1);
	var $currentMonth = _fetch(window.moment().get('month')) + 1;
	if($currentMonth != 11 && $currentMonth != 12){
		var $header2 = _getText(_label("radio margin5-b ng-binding ng-scope[1]"));
		_assertEqual("Last day of next month ("+$nextMonth+")", $header2);
		var $header3 = _getText(_label("radio margin5-b ng-binding ng-scope[2]"));
		_assertEqual("Last day of the month after next ("+$monthAfterNextMonth+")", $header3);
		
	}
}

function clickContinueToTerminate(){
	_click(_submit("Continue"));
	_assertVisible(_heading3("Confirm your coverage end date"));
	_click(_link("Continue[2]"));
	_click(_link("Submit"));
	_assertVisible(_heading3("Voluntary Disenrollment Request Submitted"));
	_click(_link("Go To Dashboard"));
}

function verifyPolicyIDOnPlanDetails(){
	if(_isVisible(_heading4("My Plan Details"))){
		var $indportalPolicyID = _getText(_dDesc("plan-type", _near(_dTerm("Policy ID:"))))
		$healthPlanCoverageStatus = _getText(_dDesc("generic-medic", _near(_dTerm("Status:"))));
	}
	else{
		var $indportalPolicyID = _getText(_span("ng-binding", _near(_tableHeader("Policy ID:"))));
	//	_log($indportalPolicyID);
	//_log(_getText($healthPlanCoverageStatus));
		$healthPlanCoverageStatus = _getText(_span("ng-scope ng-binding", _near(_tableHeader("Enrollment Status:"))));
	}
	if($healthPlanCoverageStatus =="Enrolled")
		_assertNotEqual("N/A", $indportalPolicyID);
}

function clickPlanSummaryButton(){
	_click(_link("Plan Summary"));
	_assertVisible(_heading4("My Plan Details"));
	verifyElementsOnIndportalPlanSummaryPage();
	if(($planName!="")&&($issuerDetails== "Blue Cross of Idaho")){
		_assertVisible(_link("Pay for Health Insurance", _near(_div("Medical Insurance"))));
		_click(_link("Pay for Health Insurance", _near(_div("Medical Insurance"))));
		verifyElementsOnCompletePaymentDialogue();
	}

	if(($dentalPlanName!="")&&($issuerDetails == "Blue Cross of Idaho")){
		_assertVisible(_link("Pay for Dental Insurance", _near(_div("Dental Insurance"))));
		_click(_link("Pay for Dental Insurance", _near(_div("Dental Insurance"))));
		verifyElementsOnCompletePaymentDialogue();
	}
}

function verifyElementsOnCompletePaymentDialogue(){
	_assertVisible(_div("modal-content[9]"));
	_assertVisible(_paragraph("Click 'Proceed To Payment' to complete your payment on the payment portal."));
	_click(_submit("Proceed To Payment"));
	_selectWindow("/"+$issuerDetails+"/");
	_windowExists("/"+$issuerDetails+"/");
}

var  $expectedCoverageDate;

var $actualEffectiveStartDate="";

function clickUpdatePlanAndEnrollButton(){
	_click(_link("Update Plan and Enroll"));
}

function verifyUpdatePlanAndEnrollButton(){
	if ( (_isVisible(_span("You are eligible for Tax Credit or cost sharing reduction"))) &&
		(!(_isVisible($indportalShopForPlans))) &&
		(!(_isVisible($indportalShopForPlans2))) &&
		(!(_isVisible($indportalFinalizePlans ))) &&
		(!(_isVisible($indportalFinalizeYourPlan))) &&
		(_isVisible(_div("initial-eligibility"))) &&
		(_getText(_div("initial-eligibility")) != "We are still processing your application and will notify you when we have the results.") &&
		(!_isVisible($indportalFinalizeYourPlan2)) &&
		(!_isVisible(_link("Upload Documents"))) ) {
		_assertVisible(_link("Update Plan and Enroll"));
	}
}

function clickDisEnrollFromPlan(){
	var $i=0;
	do{
		if(_isVisible(_div("navtopview"))){

			_click(_link("My Dashboard"));
		}
		else{

			_click(_link("My Account Dropdown Menu. Press enter to open it and tab through its options"));
			_click(_link("Dashboard"));
		}
		$i++;
		if(_isVisible(_link("Disenroll From Plan")))
			break;
	}
	while($i<15){
	}

	_click(_link("Disenroll From Plan"));
	_assertVisible(_heading4("Your need to disenroll from existing coverage"));
	_assertVisible(_paragraph("Based on updated eligibility information, you and your household are no longer eligible under your current plan(s) through Your Health Idaho. Please click below to disenroll from your current plan(s)."));
	_assertVisible(_link("Disenroll"));
	_click(_link("Disenroll"));
	_assertVisible(_heading3("You have successfully disenrolled."));
	$planName = "";
	$dentalPlanName = "";
	_click(_link("Go To Dashboard"));
}

function selectQualifyforExemption(){
	_assertVisible(_strong("Does your family qualify for a hardship exemption?"));
	_click(_checkbox("exemptionCheckbox"));
	for(var $i=0;$i<$people.length;$i++){
		_assertVisible(_textbox("sc3["+$i+"]"));
	}
}

function enterExemptionAmount($num,$amount){
	_setValue(_textbox("sc3["+$num+"]"), $amount);
}

function createIndividualAndSubmitSSAP(){
	verifyHeaderAndFooter();
	clickStartShopping();
	selectCoverageYear();
	clickSkipAndSignUp();
	clickSubmitOnSignUpPage("teddbrown","Tedd","Brown");
	clickContinueOnCommunicationPreference("417 S 6th St","","Boise","Idaho","83702","Boise","","","","English","English");
	loginAdminAndVerifyIdentity();
	clickStartApplication();
	clickNoCostSavings();
	selectPrivacyCheckboxForSSAP();
	clickContinueButton();
	clickContinueButton();
	enterContactNameForPrimary("Tedd","","Brown","","10/25/1990");
	enterContactHomeAddress("417 S 6th St","","Boise","83702","Idaho","Boise");
	enterContactMailingAddress("TRUE");
	enterContactPhone("(461) 237-8416","(680) 957-6589","5443");
	enterContactPreferences("English","English","Email");
	clickContinueButton();
	clickHelpingMyself();
	clickContinueButton();
	selectMeOnly();
	clickContinueButton();
	enterInformation	(0,"Tedd","","Brown","","10/25/1990","true");
	clickContinueButton();
	clickContinueButton();
	clickContinueButton();
	selectGender("Male");
	selectHasSSN("Yes");
	enterSSN();
	enterSameSSNName("Yes");
	clickContinueButton();
	selectCitizen("Yes");
	clickContinueButton();
	selectHispanic("No");
	selectRace("Other");
	clickContinueButton();
	selectAndEnterNativeInfo(0,"Yes");
	clickContinueButton();
	clickContinueButton();
	clickContinueButton();
	clickContinueButton();
	selectNobodyIncarcerated();
	selectFutureApplications();
	selectSixtyDays("TRUE");
	selectPerjury("TRUE");
	enterSignOnSSAPPage18();
	clickSubmitSSAP();
	clickBackToDashboardFromSSAPPage19();
	qepQLEChange();
}

function enrollIndividual($isCSREnabled, $aptcAmount, $noOfAdults, $noOfChildren, $showCatastrophic){
	clickFinalizeYourPlan();
	clickSaveAndContinue();
	clickViewPlans($isCSREnabled, $aptcAmount, $noOfAdults, $noOfChildren, $showCatastrophic);
	clickHealthInsurance($isCSREnabled, $aptcAmount, $noOfAdults, $noOfChildren, $showCatastrophic);
	selectRandomPlan();
	clickShopForDental();
	clickDentalInsurance($isCSREnabled, $aptcAmount, $noOfAdults, $noOfChildren, $showCatastrophic);
	selectRandomPlan();
	clickContinueToCart();
	clickSignApplication();
	clickReadytoEnroll();
	selectEsignAcceptAgrrement();
	enterEsignSignature();
	clickSignAndEnroll();
	clickBackToDashboardFromSSAPPage19();
}

function individualRIDP(){

	var $inOEP = inGlobalOEP();
	
	if ($inOEP == false) {

		if(_isVisible($indportalReportLifeEventAndShop)){
			_click($indportalReportLifeEventAndShop);
			qepHomeClickAddress();
			qepHomeClickContinue();
			qepEligibleClickStartApplication();
		}

		// Click the button
		if(_getText(_div("modal-body[1]")) == "You are currently logged in as an Agent/Broker, Enrollment Counselor, or Customer Service Representative. You cannot complete your client's application for cost-savings. If your client is interested in applying for cost-savings, please ask them to go to https://idalink.idaho.gov. to complete an application. Your client will need to set up a new account or log in to an existing account in order to create an application from there. You may assist the client in this process, but the client must be logged in to his/her own individual account."){
			_click(_submit("Apply without Cost-Savings"));
		}
		else {
			_click(_submit("Apply without Cost-Savings"));
		}
	}
	else // $inOEP == true
	{
		_click(_span("/Start Application/"));//_click(_span("START NEW APPLICATION"));
		_wait(3000, _isVisible(_span("APPLY WITHOUT COST-SAVINGS")));
		_click(_span("APPLY WITHOUT COST-SAVINGS"));
	}
	
	_assertVisible(_heading4("Verify your Identity"));
	_assertVisible(_div("Skip Side Bar to Main Content Identity Verification Steps: Get started Contact information Identity Questions Call Experian Manual Verification Finish"));
	_click(_link("ridp-start"));
	_assertVisible(_heading4("Contact Information"));
	_assertVisible(_submit("CONTINUE"));
	_click(_submit("CONTINUE"));
	_wait(3000);
	if(!_isVisible(_paragraph("Unexpected Technical Error Occurred"))){
		if (_isVisible(_heading4("Submit documents that prove your identity"))){
			_assertVisible(_div("Your identity wasn't verified. You won't be able to submit your application for health coverage until your identity is verified."),"Verify text in RIDP Manual Verification page");
			_assertVisible(_select("doctype"),"Verify if Document Type drop down is displayed");
			_assertVisible(_file("manualVerificationFile"),"Verify if Upload button is displayed");
			_assertVisible(_div("Submit"),"Verify if Submit is displayed");
		}
		else {
			_assertVisible(_div("Your identity could not be verified."));
			_assertVisible(_paragraph("You won't be able to submit your application for health coverage until your identity is verified."));
			_click(_link("I have verified my identity over the phone"));
			_wait(3000);
			_assertEqual("Experian is still reporting this issue as unresolved. To proceed further, please call Experian and then click on the above button. If you need to resubmit with new contact information, then click here.", _getText(_div("alert alert-error ng-binding")));
		}
	}
}

function clickFinalizePlanForSmokeTest($isCSREnabled, $aptcAmount, $noOfAdults, $noOfChildren, $showCatastrophic){
//	clickFinalizeYourPlan();
	clickShopForPlans();
	clickSaveAndContinue();
//	clickShopHealthPlan();
	if(isPlanSelectedForCurrentYear()){
		_log("Plan is selected for current year");
		_click(_link("Remove"));
		$planName = undefined;
		$payment = undefined;
		_click(_link("Remove"));
		$onDentalPage=false;
		$dentalPlanName = undefined;
		$dentalPayment = undefined;
		_click(_link("Shop Plans"));
	}
	else{
		_log("Plan is NOT selected for current year");
		clickViewPlans($isCSREnabled, $aptcAmount, $noOfAdults, $noOfChildren, $showCatastrophic);
	}
	clickHealthInsurance($isCSREnabled, $aptcAmount, $noOfAdults, $noOfChildren, $showCatastrophic);

	$url = getUpdatedBaseURL("").split("/");
	_log(" Do not select plan if environment is prod");
	//if ($url[2] !="idahohix.yourhealthidaho.org"){
	if (!isProductionEnvironment()) {
		_log("Qa environment, select plan");
		setDB();
		selectRandomPlan();
		clickShopForDental();
		selectRandomPlan();
		clickContinueToCart();
		clickSignApplication();
		clickReadytoEnroll();
		selectEsignAcceptAgrrement();
		enterEsignSignature("A b");
		clickSignAndEnroll();
		clickBackToDashboardFromSSAPPage19();
	}
	clickAccountSettingsGotoDashboard();
	clickMyApplications();
}

function clickUploadDocumentsForIndividual($event){
	var $inGlobalOEP = inGlobalOEP();
	_log("$isGatedEvent:" +$isGatedEvent);
	_log("$inGlobalOEP:" +$inGlobalOEP);
	
	var $i=0;
	var $y=0;
	if($event){
		$isGatedEvent = $event;
	}
	do{
		if(_isVisible(_div("navtopview"))){
			_click(_link("My Dashboard"));
			selectApplicationYear();
		}
		else{
			_click(_link("My Account Dropdown Menu. Press enter to open it and tab through its options"));
			_click(_link("Dashboard"));
			selectApplicationYear();
		}
		$i++;
		if(_isVisible(_button("UPLOAD DOCUMENTS")) || _isVisible($indportalFinalizeYourPlan) || _isVisible($indportalFinalizeYourPlan2) || _isVisible($indportalShopForPlans ) || _isVisible($indportalShopForPlans2 ) || _isVisible($indportalFinalizePlans ))
			break;
	}
	while($i<15){
	}
	
	if($isGatedEvent == "Y" && $inGlobalOEP =="OFF"){
		do{
			if(_isVisible(_div("navtopview"))){
				_click(_link("My Dashboard"));
				selectApplicationYear();
			}
			else{
				_click(_link("My Account Dropdown Menu. Press enter to open it and tab through its options"));
				_click(_link("Dashboard"));
				selectApplicationYear();
			}
			$y++;
			if(_isVisible(_button("UPLOAD DOCUMENTS")));
				break;
		}
		while($y<15){
		}
		_assertVisible(_button("UPLOAD DOCUMENTS"));
		// Click the button
		//_click(_link("Upload Documents"));
		_click(_button("UPLOAD DOCUMENTS"));
		_assertVisible(_heading4("Documents for This Household"));
		_assertVisible(_link("/(Not Verified)/"));
	}
	else {
		_assertNotVisible(_button("/Upload Documents/i"));
	}
}

function individualUploadQLEDocument(){
	var $inGlobalOEP = inGlobalOEP();
	if($isGatedEvent == "Y" && $inGlobalOEP =="OFF"){
		
//		invalidFileUpload();
		validFileUpload();
	}
	else{
		_log("Event Is Not Gated. No Need To upload Document");
	}
}

function validFileUpload()
{		
		var $filePath = _resolvePath("../pic.jpg", "\\");
		_click(_link("Qualified Life Events"));
		var $textboxes = _collect("_link", "/ng-binding/", _in(_list("nav nav-tabs[1]")));
		var $fileLoc = getFileLocation("../pic.jpg");
		for(var $i=0;$i<$textboxes.length;$i++){
		_click(_link("ng-binding["+$i+"]"));
		_setStrictVisibilityCheck(true);
		_highlight(_italic("icon-plus-sign"));
		_click(_italic("icon-plus-sign"));
		_assertVisible(_label("Choose File"));
		_call(_submit("Submit").disabled = false);
		var $actionURL = getBaseURL() + "ssap/applicant/event/uploadDocument";
		_log($actionURL);
		_setFile("document", $filePath, $actionURL);
		_click(_submit("Submit"));
		_setStrictVisibilityCheck(false);
		_assertVisible(_paragraph("Please allow 10 business days for your documents to be reviewed. Notification will be sent when a determination is made.["+$i+"]"));
		_assertVisible(_cell("SUBMITTED", _in(_table("table table-condensed margin20-t ng-scope["+$i+"]"))));
		var $now=_call(window.moment());
		var $currentDate = _call(window.moment($now).format('YYYY-MM-DD'));
		_assertEqual($currentDate, _getText(_cell("ng-binding[2]", _in(_table("table table-condensed margin20-t ng-scope["+$i+"]")))));
	
		}
}
/*
function invalidFileUpload()
{
		var $filePath = _userDataPath("scripts/idaho_web/scenariofiles/document.txt", "\\");
		_click(_link("Qualified Life Events"));
		var $textboxes = _collect("_link", "/ng-binding/", _in(_list("nav nav-tabs[1]")));
		var $fileLoc = getFileLocation("../scenariofiles/document.txt");	
		for(var $i=0;$i<$textboxes.length;$i++){
			_click(_link("ng-binding["+$i+"]"));
			_setStrictVisibilityCheck(true);
			_highlight(_italic("icon-plus-sign"));
			_click(_italic("icon-plus-sign"));
			_assertVisible(_label("Choose File"));

			_call(_submit("Submit").disabled = false);
			var $actionURL = getBaseURL() + "/hix/ssap/applicant/event/uploadDocument";
			_log($actionURL);
			_setFile("document", $filePath, $actionURL);
			_click(_submit("Submit"));
			_setStrictVisibilityCheck(false);
			_assertVisible(_paragraph("alert alert-error ng-binding"));
	 	  _assertEqual("File could not be uploaded . Media type not recognized", _getText(_paragraph("alert alert-error ng-binding")));
			_click(_link("Close[1]"));
	
	
		}
				
} */





function qepQLEChange(){
	clickUploadDocumentsForIndividual();
	individualUploadQLEDocument();
	logOut();
	loginEnterEmailAddress("autocsr_l2cs2@yopmail.com");
	loginEnterPassword("ghix123#");
	loginClickLoginButton();
	CSRSearchForIndividualQLETicket();
	CSRApprovesQLETicket();
	logOut();
	loginEnterEmailAddress();
	loginEnterPassword("ghix123#");
	loginClickLoginButton();
}

function sepQLEChange(){
	clickAccountSettingsGotoDashboard();
	clickMyApplications();
	getSEPIsGatedEvent();
	clickAccountSettingsGotoDashboard();
	clickUploadDocumentsForIndividual();
	individualUploadQLEDocument();
	logOut();
	loginEnterEmailAddress("autocsr_l2cs2@yopmail.com");
	loginEnterPassword("ghix123#");
	loginClickLoginButton();
	CSRSearchForIndividualQLETicket();
	CSRApprovesQLETicket();
	logOut();
	loginEnterEmailAddress();
	loginEnterPassword("ghix123#");
	loginClickLoginButton();
}

function goToMyPreferences(){
	_click(_link("My Preferences"));
	_assertVisible(_heading4("Communication Preferences"));
}

function searchBrokerByBusinessName($businessName){
	_setValue(_textbox("companyName"), $businessName);
	_click(_submit("Search", _in(_div("name_search"))));
}

function selectAgent($fullname){
	_click(_span($fullname));
	_click(_link("Continue"));
	_check(_checkbox("terms1"));
	_check(_checkbox("terms2"));
	_check(_checkbox("terms3"));
	var $applicantName = _getText(_span("paddingT5", _near(_label("Applicant Name"))))
	_setValue(_textbox("esignName"), $applicantName);
	_click(_button("Confirm"));
	_click(_button("Close"));
	return $applicantName;
}

function verifyMailingAddressContent($address1, $address2, $city, $zip, $state, $county){
	_assert(_getAttribute(_textbox("addressLine1"), "disabled"));
	_assertEqual($address1, _getValue(_textbox("addressLine1")));
	
	_assert(_getAttribute(_textbox("addressLine2"), "disabled"));
	_assertEqual($address2, _getValue(_textbox("addressLine2")));
	
	_assert(_getAttribute(_textbox("city"), "disabled"));
	_assertEqual($city, _getValue(_textbox("city")));
	
	_assert(_getAttribute(_select("state"), "disabled"));
	_assertEqual($state, _getSelectedText(_select("state")));
	
	_assertNotExists(_textbox("dob"));
	
	_assert(_getAttribute(_textbox("zipcode"), "disabled"));
	_assertEqual($zip, _getValue(_textbox("zipcode")));
	
	_assert(_getAttribute(_select(0, _rightOf(_label("County"))), "disabled"));
	_assertEqual($county, _getSelectedText(_select(0, _rightOf(_label("County")))));
}

function verifyReportAChangeElement(){
	_assertVisible(_submit("Report A Change"));
}

function verifyEmailAddressContent(){
	_assertEqual($signupEmail, _getValue(_textbox("emailAddress")));
	_assert(_getAttribute(_textbox("emailAddress"), "disabled"));
}

function verifyReceiveInformationBy($preference){
	_assert(_getAttribute(_radio(0, _in(_label($preference))), "checked"));
}

function clickReportAChangeFromMyPreferences(){
	_click(_submit("Report A Change"));
	_assertVisible(_heading4("Life Change Event: Change of Address"));
}

function verifyMyPreferencesPage(){
	_assertEqual("Please set your communication preferences. Fields marked with an asterisk (*) are required.", _getText(_div("Please set your communication preferences. Fields marked with an asterisk (*) are required.")));
	_assertEqual("417 S 6th St", _getValue(_textbox("addressLine1")));
	_assertEqual("Boise", _getValue(_textbox("city")));
	_assertEqual("Idaho", _getSelectedText(_select("state")));
	_assertEqual($zipCode, _getValue(_textbox("zipcode")));
	_assertEqual("Boise", _getSelectedText(_select("county")));

	_assertEqual("You will receive notifications based on your preferred method of communication, and each notification will be preceded by an email alert if applicable.", _getText(_paragraph("alert alert-info ng-scope")));
	_assertEqual($phoneNumber[0], _getValue(_textbox("phone1")));
	_assertEqual($phoneNumber[1], _getValue(_textbox("phone2")));
	_assertEqual($phoneNumber[2], _getValue(_textbox("phone3")));
	_assertEqual($email, _getValue(_textbox("emailAddress")));
	_assertEqual("English", _getSelectedText(_select("prefSpokenLang")));
	_assertEqual("English", _getSelectedText(_select("prefWrittenLang")));
	_assertTrue(_getAttribute(_radio(0, _in(_label($preferenceType))), "checked"));
}

function verifyCostSharingReductionStatus($status){
	_assertVisible(_span("Eligible for cost-sharing reduction"));
}

function verifyApplicantVerifications(){
	_click(_link("here", _in(_div("To view your documents click here."))));
	_click($applicantVerifications);
	_log("Number of members in HH who are seeking coverage: " +$ssapPeople.length);
	for(var $i =0; $i< $ssapPeople.length; $i++){
		if($ssapPeople[$i].$applying !="No"){
			_click(_link("ng-binding["+$i+"]"));
			_assertNotVisible(_link("/Income/"),"Verify Income is not displayed in Applicant Verification screen");
			_assertNotVisible(_link("/Minimum Essential Coverage/"),"Verify Minimum Essential Coverage is not displayed in Applicant Verification screen");
		}
	}
}


function clickShopForPlans(){

	if (_isVisible($indportalShopForPlans) )
		_click($indportalShopForPlans);
	else if (_isVisible($indportalShopForPlans2) )
		_click($indportalShopForPlans2);
	else if (_isVisible($indportalFinalizePlans ) )
		_click($indportalFinalizePlans);
	else if (_isVisible($indportalFinalizeYourPlan) )
		_click($indportalFinalizeYourPlan);
	else if (_isVisible($indportalFinalizeYourPlan2) )
		_click($indportalFinalizeYourPlan2);
	
//	verifyCustomGroupingPage();
}


function selectTobaccoAndContinue($indexes,$clickHealthPlan){
	
	for(var $i = 0; $i<$indexes.length;$i++){
		var $index = $indexes[$i];
		_click(_radio("tobaccoUser-no["+$index+"]"));
	}
	_click(_link("Save and Continue"));
	if($clickHealthPlan !="NO"){
		_click(_link("aid_uneg_shop_for_members"));//click for health plan
		_assertVisible(_heading1("Tell us about your healthcare needs"));
	}
}

function clickContinueShoppingFromDashboard(){
	_click(_button("CONTINUE SHOPPING"));
	_assertVisible(_heading1("/Welcome/"));
}