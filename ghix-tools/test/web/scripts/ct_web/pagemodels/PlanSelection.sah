_includeOnce("ViewDetails.sah");
_includeOnce("ShowCart.sah");
_includeOnce("JenkinsAndDBSetUp.sah");
_includeOnce("Utils.sah");

// Constants
var $PLAN_SELECTION_DENTAL_TEXT = "Browse Pediatric Dental Plans";

// Variables
var $onDentalPage;
var $PlanSelection = true;
// Whether on the dental plan page

// Health plan info
var $planName = "";
var $payment="";

// Dental plan info
var $dentalPlanName = "";
var $dentalPayment="";

// Accessors
var $planSelectionBack = _link("Back to preferences");
var $editInfo = _link("Edit Family Info");
var $planSelectionHealthInsurance = _link("Health Insurance");
var $planSelectionDentalInsurance = _link("Dental Insurance");
var $planSelectionCart = _link("Cart");
var $planSelectionHeader = _heading1("/Plan/");
var $planSelectionSortBy = _link("dk_toggle dk_label");
var $planSelectionSortByItems = [_link("Monthly price"), _link("Expense Estimate"), _link("Deductible"), _link("Out-of-Pocket (OOP) Max")];
var $planSelectionRemove = _link("REMOVE");
var $planSelectionContinueToHealthPlans = _link("/Continue To Health Plans/");
var $planSelectionContinueToDentalPlans = _link("/Continue To Dental Plans/");
if($loggedIn==true){
	var $planSelectionContinueToCart = _link("Continue To Cart >");
}
else {
	var $planSelectionContinueToCart= _link("/Continue To Cart/");
}
var $planSelectionGoToCart = _link("Go To cart");
var $planSelectionGoToCart1 = _link("Go To cart[1]");
var $planSelectionShopForDental=_link("Shop for Dental");

var Plan = function(){
	var $title = "", $tier = "", $type = "", $monthlyPremium = "";

	this.setTitle = function($title) {
		this.$title = $title;
	};

	this.setTier = function($tier) {
		this.$tier = $tier;
	};

	this.setType = function($type) {
		this.$type = $type;
	};

	this.setMonthlyPremium = function($premium) {
		this.$monthlyPremium = $premium;
	};

	this.getTitle = function() {
		return this.$title;
	};

	this.getTier = function() {
		return this.$tier;
	};

	this.getType = function() {
		return this.$type;
	};

	this.getMonthlyPremium = function() {
		return this.$monthlyPremium;
	};

}

	function verifyElementsOnPlanPage() {
		if ($onDentalPage === undefined) {
			$onDentalPage = false;
		}
		_assertVisible($planSelectionBack);

		if ($loggedIn || $onDentalPage) {
			_assertNotVisible($editInfo);
		}
		else if($numAdults!=null && $numAdults>0)
		{
			_assertVisible($editInfo);
		}

		if ($isIdaho) {
			_assertVisible($planSelectionHealthInsurance);
			_assertVisible($planSelectionCart);
			if ($onDentalPage && !(_isVisible(_link("Cart 1")))) {
				_assertVisible($planSelectionDentalInsurance);
			}
		}
		else if ($isConnecticut) {
			_assertNotVisible($planSelectionHealthInsurance);
			_assertNotVisible($planSelectionDentalInsurance);
			_assertNotVisible($planSelectionCart);

			$planSelectionHeader = _small(0, _in(_heading1("/"+"Browse Health Plans"+"/")));
			//_heading1("/plans for .* adult in ZIP code .*/");
		}

		_assertVisible($planSelectionHeader);

		var $headerText = _getText($planSelectionHeader);

		_assertContainsText($familyZipCode, $planSelectionHeader);

		if(!$loggedIn){
			var $now=_call(window.moment());
			var $todaysDate = _call(window.moment($now).format('MM/DD/YYYY'));
			_log("Date"+$todaysDate);
			coverageDate("11/01/2016", "01/31/2017","3",$todaysDate);
		}
		else {
			coverageDate("11/01/2016", "01/31/2017",$eventReported,$eventDate);
		}
		//		_assertTrue(new RegExp($coverageDate).test($headerText));
		_assertVisible($planSelectionSortBy);

		_click($planSelectionSortBy);
		for (var $i = 0; $i < $planSelectionSortByItems.length; $i++) {
			// index 1 does not exist on dental page
			if ($i != 1 && $onDentalPage) {
				_assertVisible($planSelectionSortByItems[$i]);
			}
		}

		_assertVisible(_div("mainSummary"));
		_assertVisible(_div("tile-header", _in(_div("mainSummary"))));

		filterBySortBy();
		filterByPlanType();
		filterByMetalTier();
		filterByPlanFeature();
		filterDentalPlanTier();
		filterByCompany();
	}

function isShopForPlanVisible(){
	return _isVisible(_link("Shop for a Different Plan"));
}

function verifyPlanSelectionPage(){
	var $isShopForPlanVisible = isShopForPlanVisible();
	var $cmsPlanId = getCmsPlanId($caseNumber);
	var $sub = $cmsPlanId.substr(0, $cmsPlanId.length - 2);
	var $updatedCmsPlanId = $sub + "03";
	var $plans = getPlans($updatedCmsPlanId);
	if ($plans.length > 0) {
		_assertFalse($isShopForPlanVisible);
	}
	else {
		_assertTrue($isShopForPlanVisible);
	}
	var $enrollments = getEnrollments($updatedCmsPlanId, $caseNumber);
	_assert($enrollments.length > 0, "No enrollments found through DB query");
}

function clickBackToPreferencesFromPlanPage() {
	_click($planSelectionBack);
	$prefPageIndex = 0;
	verifyElementsOfPreferencePage();
}

function clickHealthInsurance() {
	if(_isVisible(_heading1("Pick a new plan"))){
		_assertVisible(_paragraph("Update: Because your eligibility status has changed, the plans noted below are no longer available to you. Please select a new plan."));
		_click(_link("Shop for a New Plan"));
	}
	_click($planSelectionHealthInsurance);

	$planName="";
	$disenrollHealth ="false";
	verifyElementsOnPlanPage();
}

function clickDentalInsurance() {
	if(_isVisible(_heading1("Pick a new plan"))){
		_assertVisible(_paragraph("Update: Because your eligibility status has changed, the plans noted below are no longer available to you. Please select a new plan."));
		_click(_link("Shop for a New Plan"));
		$disenrollDental ="false";
	}
	_click($planSelectionDentalInsurance);
	$onDentalPage = true;
	if(_isVisible(_heading3("Shopping For"))){
		_click(_submit("Update Results"));
	}
	verifyElementsOnPlanPage();
}

function clickEditFamilyInfo() {
	clickElement($editInfo);
	$taxCreditValue = undefined;
	if($numAdults>1){
		verifyElementsOnPreeligibility(true);
	}
	else {
		verifyElementsOnPreeligibility();
	}
}

function clickCart() {
	_click($planSelectionCart);
	verifyElementsOnShowCartPage();
}

function verifyPreferencesOnPlanDisplay(){
	var $tiles = _collect("_div", "tile-header", _in(_div("mainSummary")));
	var $monthlyTaxCredit;
	if (_isVisible(_link("/^\\$/", _in(_small(0))))) {
		$monthlyTaxCredit = "$"+_getText(_span(0, _in(_link("/^\\$/", _in(_small(0))))));
	}
	else {
		$monthlyTaxCredit = "$0.00";
	}

	for (var $j = 0; $j < $tiles.length; $j++) {
		var $tile = $tiles[$j];
		_assertVisible(_paragraph("plan-options__tile__notes", _rightOf(_tableHeader("Estimated Monthly Premium"))));

		var $isCatastrophic = _isVisible(_small("/CATASTROPHIC/", _in($tile)));
		if ($isCatastrophic) {
			_assertEqual("K:pd.label.title.aftertax1"+" $0.00 "+"K:pd.label.title.aftertax2", _getText(_paragraph("plan-options__tile__notes", _in($tile))));
		}
		else {
			_assertEqual("K:pd.label.title.aftertax1"+" "+$monthlyTaxCredit+" "+"K:pd.label.title.aftertax2", _getText(_paragraph("plan-options__tile__notes", _in($tile))));
		}

		for (var $i = 0; $i < $doctors.length; $i++) {
			if ($doctors[$i].length > 11) {
				_assertVisible(_row("/"+$doctors[$i].substring(0, 11) + "/", _in($tile))); //satya@remove Dr. checks
			}
			else {
				_assertVisible(_row("/"+$doctors[$i]+"/", _in($tile)));
			}
		}

		for (var $i = 0; $i < $hospitals.length; $i++) {
			if ($hospitals[$i].length > 15) {
				_assertVisible(_row($hospitals[$i].substring(0, 15) + "...", _in($tile)));
			}
			else {
				_assertVisible(_row($hospitals[$i], _in($tile)));
			}
		}

		for (var $i = 0; $i < $prescriptions.length; $i++) {
			if ($prescriptions[$i].name.length > 19) {
				_assertVisible(_link("/"+$prescriptions[$i].name.substring(0, 19) +"/i", _in($tile)));
			}
			else {
				_assertVisible(_link("/"+$prescriptions[$i].name+"/i", _in($tile)));
			}
		}

		for (var $i = 0; $i < $removedDoctors.length; $i++) {
			if ($removedDoctors[$i].length > 11) {
				_assertNotVisible(_row($removedDoctors[$i].substring(0, 11) + "...", _in($tile))); //remove "Dr. "+ 
			}
			else {
				_assertNotVisible(_row($removedDoctors[$i], _in($tile)));
			}
		}

		for (var $i = 0; $i < $removedHospitals.length; $i++) {
			if ($removedHospitals[$i].length > 15) {
				_assertNotVisible(_row($removedHospitals[$i].substring(0, 15) + "...", _in($tile)));
			}
			else {
				_assertNotVisible(_row($removedHospitals[$i], _in($tile)));
			}
		}

		for (var $i = 0; $i < $removedPrescriptions.length; $i++) {
			if ($removedPrescriptions[$i].name.length > 19) {
				_assertNotVisible(_link("/"+$removedPrescriptions[$i].name.substring(0, 19) +"/i", _in($tile)));
			}
			else {
				_assertNotVisible(_link("/"+$removedPrescriptions[$i].name+"/i", _in($tile)));
			}
		}
	}
}

function filterBySortBy($index) {
	_click($planSelectionSortBy);
	if ($index === undefined) {
		var $newArray=[];
		var $newArr=[];
		if(_isVisible(_heading3("Sort By"))){
			_click(_link("dk_toggle dk_label"));
			var $type = _getText(_link("dk_toggle dk_label"));
			if($type =="Monthly price"){
				var $monthlyPrice = _collectAttributes("_heading3","/.*/","sahiText",_in(_div("mainSummary")));
				_assert($monthlyPrice.length!=0);
				for(var $i=0; $i<$monthlyPrice.length; $i++){
					var $text =parseInt($monthlyPrice[$i].replace("$",""));
					$newArr.push($text);
				}
				var $exp = $newArr.sort(function(a, b){
					return a-b;
				}
									   );
				_assertEqual($newArr, $exp);
			}
			else if($type == "Expense Estimate"){
				var $ExpenseEstimate = _collectAttributes("_span","/best|ok|poor/","sahiText",_in(_div("mainSummary")));
				_assert($ExpenseEstimate.length!=0);
				var $i=0;
				while ($ExpenseEstimate[$i]=="Low"){
					if ($i<$ExpenseEstimate.length)
						$i++;
				}
				while( $ExpenseEstimate[$i]=="Average"){
					if ($i< $ExpenseEstimate.length)
						$i++;
				}
				while  ( $ExpenseEstimate[$i] == "Pricey"){
					if ($i< $ExpenseEstimate.length)
						$i++;
				}
				_assert($i== $ExpenseEstimate.length, "Plans are not sorted by Expense Estimate");
			}
			else if($type == "Deductible"){
				var $deductibleRow = _collectAttributes("_row","/Deductible/","sahiText",_in(_div("mainSummary")));
				_assert($deductibleRow.length!=0);
				for(var $i = 0; $i<$deductibleRow.length; $i++){
					var $str =  $deductibleRow[$i];
					$deductible = $str.split(" ");
					////////////////// remove deduct label
					if ( $deductible.length== 4) {
						var $firstDeduct = $deductible[1].replace("$", "");
						var $secondDeduct = $deductible[3].replace("$", "");
						var $text = parseInt($firstDeduct)+parseInt($secondDeduct);
					}
					else{
						var $text = parseInt($deductible[1].replace("$", ""));
					}
					$newArray.push($text);
				}
				var $exp = $newArr.sort(function(a, b){
					return a-b}
									   );
				_assertEqual($newArr, $exp);
			}
			else if($type =="Out-of-Pocket (OOP) Max"){
				var $oop = _collectAttributes("_row","/OOP Max/","sahiText",_in(_div("mainSummary")));
				_assert($oop.length!=0);
				_assertEqual($oop, $oop.sort());
			}
		}
		_click($planSelectionSortBy);
	}
	else {
		_click($planSelectionSortBy);
		_wait(10000, _isVisible(_link($index)));
		_click(_link($index));
	}
}

function verifyFilter($filterText) {
	var $allPlans = _collect("_div", "tile-header", _in(_div("mainSummary")));
	for (var $i = 0; $i < $allPlans.length; $i++) {
		_assertTrue(new RegExp($filterText, "i").test(_getText($allPlans[$i])));
	}
	if ($isConnecticut) {
		verifyPreferencesOnPlanDisplay();
	}
}

function filterByPlanType($type, $filter) {
	if ($type === undefined || $filter === undefined) {
		if(_isVisible(_div("planTypeFilter"))){
			var Type =  _getText(_div("planTypeFilter"));
			var $planType=	Type.split(" ");
			if ($isConnecticut) {
				//_assertEqual(["HMO", "POS", "PPO"], $planType.sort());
				var $planTypeFil = getPlanType();
				_assertContainsText($planTypeFil[0][0], _div("planTypeFilter"));
				
			}
			for($i=0;$i<$planType.length;$i++){
				_check(_checkbox($planType[$i], _in(_div("planTypeFilter"))));
				verifyFilter($planType[$i]);
				_uncheck(_checkbox($planType[$i], _in(_div("planTypeFilter"))));
			}
		}
	}
	else{
		var $accessor = _checkbox($type);
		if ($filter) {
			_check($accessor);
		}
		else {
			_uncheck($accessor);
		}
		verifyFilter($type);
	}
}

function filterByPlanFeature($feature, $filter) {
	if ($feature === undefined || $filter === undefined) {
		if(_isVisible(_span("Plan Features"))){
			var $feature = _getText(_label("checkbox[4]"));
			var $planFeature = $feature.split(" ")[0];
			_check(_checkbox(0, _in(_div("HSA Qualified"+" "+"eligible for Health Savings Account (HSA)"))));
			verifyFilter("HSA");
			_uncheck(_checkbox(0, _in(_div("HSA Qualified"+" "+"eligible for Health Savings Account (HSA)"))));
		}
	}
	else {
		var $accessor = _checkbox($feature);
		if ($filter) {
			_check("/"+$accessor+"/");
		}
		else {
			_uncheck("/"+$accessor+"/");
		}
		if($feature != "CSR Eligible"){
			verifyFilter($feature);
		}
	}
}

/*
* Params:
*  tier: string of the name of the box
*  filter: boolean to check or uncheck the box
*/
function filterByMetalTier($tier, $filter) {
	if ($tier === undefined || $filter === undefined) {
		if(_isVisible(_span("Metal tier"))){
			var $tiers = _collectAttributes("_strong", "/:/", "sahiText", _in(_fieldset("metal-tier sidebar-form-inputs")));
			_assertEqual(["Platinum"+":","Gold"+":","Silver"+":","Bronze"+":","Catastrophic"+":"], $tiers);

			_assertVisible(_checkbox("GOLD", _in(_fieldset("metal-tier sidebar-form-inputs"))));
			_check(_checkbox("GOLD", _in(_fieldset("metal-tier sidebar-form-inputs"))));
			// TODO: valid failure
			//verifyFilter("Gold");
			_uncheck(_checkbox("GOLD", _in(_fieldset("metal-tier sidebar-form-inputs"))));
		}
	}
	else {
		var $accessor = _checkbox($tier.toUpperCase());
		if ($filter) {
			_check($accessor);
		}
		else {
			_uncheck($accessor);
		}
		verifyFilter($tier);
	}
}

/*
* Params:
*  deductible: string of the name of the box
*  filter: boolean to check or uncheck the box
*/
function filterByDeductible(){
	var $min, $max;
	var $newArray=[];
	if(_isVisible(_paragraph("Deductible"))){
		var $options = _collectAttributes("_label", "/.*/", "sahiText", _in(_fieldset("yearly-deductible")));
		_assertEqual(["$499 and under", "$500 to $999", "$1000 to $2499", "$2500 to $4999", "$5000 and over"], $options);
		var $deductibleOptions = _collect("_checkbox", "deductible_filter_checkbox", _fieldset("Deductible"));
		_check($deductibleOptions[0]);
		var $deductibleRow = _collectAttributes("_row","/Deductible/","sahiText",_in(_div("mainSummary")));
		_assert($deductibleRow.length!=0);
		for(var $i = 0; $i<$deductibleRow.length; $i++){
			var $str =  $deductibleRow[$i];
			$deductible = $str.split(" ");
			////////////////// remove deduct label
			if ( $deductible.length== 4) {
				var $firstDeduct = $deductible[1].replace("$", "");
				var $secondDeduct = $deductible[3].replace("$", "");
				var $text = parseInt($firstDeduct)+parseInt($secondDeduct);
			}
			else{
				var $text = ($deductible[1].replace("$", ""));
			}
			$newArray.push($text);
		}
		var $newArr = $newArray.sort(function(a, b){
			return a-b}
									);
		var $last = $newArr.length-1;
		// to get min and max value from the option selected
		var $expectedRange = _getText(_label("checkbox", _near($deductibleOptions[0]))).split(" ");
		if($expectedRange[2]=="under"){
			$max = parseInt($expectedRange[0].replace("$", ""));
			_assert(parseInt($newArr[$last])<=$max);
		}
		else if($expectedRange[2]=="over"){
			$min = parseInt($expectedRange[0].replace("$", ""));
			_assert(parseInt($newArr[0]) >= $min );
		}
		else{
			$min = parseInt($expectedRange[0].replace("$", ""));
			$max = parseInt($expectedRange[2].replace("$", ""));
			_assertTrue(parseInt($newArr[0]) >= $min && parseInt($newArr[$last])<=$max);
		}
	}
	_click($deductibleOptions[0]);
}

/*
* Params:
*  company: string of the name of the box
*  filter: boolean to check or uncheck the box
*/
function clickRemovePlan() {
	_click($planSelectionRemove);
	if (($onDentalPage) && ($dentalPlanName!="")) {
		$dentalPlanName = undefined;
		$dentalPayment = undefined;
	}
	else {
		$planName = undefined;
		$payment = undefined;
	}
}

function selectPlan($index) {
	if ($index === undefined) {
		$index = 0;
	}
	clickViewPlanDetails($index);
	viewDetailsAddToCart();
	viewDetailsClickContinueToCart();
}

function selectRandomPlan() {
	if(_isVisible(_heading1("Pick a new plan"))){
		_assertVisible(_paragraph("Update: Because your eligibility status has changed, the plans noted below are no longer available to you. Please select a new plan."));
		_click(_link("Shop for a New Plan"));
	}
	var $plans = _collect("_link", "/ADD TO CART/");
	var $index = _random($plans.length - 1);
	selectPlan($index);
}

function selectSecondPlan($index) {
	if ($index === undefined) {
		$index = 0;
	}
	_click(_link("ADD TO CART[" + $index + "]"));
	_assertVisible(_heading3("Please select only one plan"));
	_assertVisible(_paragraph("Please select only one plan. To replace your plan with a new one, first remove the plan by clicking the remove button."));
	_assertVisible(_submit("Cancel[2]"));
	_click(_submit("Cancel[2]"));
}

function selectSecondRandomPlan() {
	var $plans = _collect("_link", "/ADD TO CART/");
	var $index = _random($plans.length - 1);
	selectSecondPlan($index);
}

function getPlanDetails($tile){
	//	var $tile = _div("tile-header["+$index+"]");
	var $tierAndType = _getText(_small(0, _in($tile)));
	var $title = _getAttribute(_link("detail", _in($tile)), "data-original-title");
	var $premium = _getText(_paragraph("pac", _rightOf(_tableHeader("Estimated Monthly Premium", _in($tile)))));
	var $primaryCareVisits = _getText(_small(0, _rightOf(_tableHeader("Primary Care Visits", _in($tile)))));
	var $genericDrugs = _getText(_small(0, _rightOf(_tableHeader("/"+"Drug Tier 1"+"/", _in($tile)))));
	var $yearlyDeductible = _getText(_small(0, _rightOf(_tableHeader("Yearly Deductible", _in($tile)))));
	var $outOfPocket = _getText(_small(0, _rightOf(_tableHeader("Out-Of-Pocket Maximum", _in($tile)))));
	var $totalExpenseEstimate = _getText(_span(0, _rightOf(_tableHeader("Total Expense Estimate", _in($tile)))));
	var $planId = _getValue(_hidden("/plan/", _in($tile)));
	_log(" plan Id of selected plan is "+ $planId);
	var $plan = {
	};
	$plan.tierAndType = $tierAndType;
	$plan.title = $title;
	$plan.premium = $premium;
	$plan.primaryCareVisits = $primaryCareVisits;
	$plan.genericDrugs = $genericDrugs;
	$plan.yearlyDeductible = $yearlyDeductible;
	$plan.outOfPocket = $outOfPocket;
	$plan.totalExpenseEstimate = $totalExpenseEstimate;
	$plan.Id = $planId;

	for (var $i = 0; $i < $doctors.length; $i++) {
		var $isCovered = "";
		if ($doctors[$i].length > 11) {
			$isCovered = _getAttribute(_link("link-style__tooltip", _rightOf(_tableHeader("/"+$doctors[$i].substring(0, 11) + "/", _in($tile)))), "data-original-title"); //satya@"Dr. "+ 
		}
		else {
			$isCovered = _getAttribute(_link("link-style__tooltip", _rightOf(_tableHeader("/"+$doctors[$i]+"/", _in($tile)))), "data-original-title");
		}
		if ($isCovered == "Available in your network") {
			$isCovered = "In-Network";
		}
		$plan[$doctors[$i]] = $isCovered;
	}

	for (var $i = 0; $i < $hospitals.length; $i++) {
		var $isCovered = "";
		if ($hospitals[$i].length > 11) {
			$isCovered = _getAttribute(_link("link-style__tooltip", _rightOf(_tableHeader("/"+ $hospitals[$i].substring(0, 11) + ".../i", _in($tile)))), "data-original-title");
		}
		else {
			$isCovered = _getAttribute(_link("link-style__tooltip", _rightOf(_tableHeader("/" + $hospitals[$i] +"/i", _in($tile)))), "data-original-title");
		}
		if ($isCovered == "Available in your network") {
			$isCovered = "In-Network";
		}
		$plan[$hospitals[$i]] = $isCovered;
	}

	for (var $i = 0; $i < $prescriptions.length; $i++) {
		var $prescriptionName = $prescriptions[$i].name;
		if ($prescriptionName.length > 19) {
			$prescriptionName = "/"+ $prescriptionName.substring(0, 19) + ".../i";
		}
		if (_isVisible(_link("Generic", _rightOf(_tableHeader("/"+$prescriptionName+"/i", _in($tile))), _in($tile)))) {
					$plan[$prescriptions[$i].name] = {
						"isBrandCovered": "Not Covered", "isGenericCovered": "Covered"};
		}
		else if (_getAttribute(_link("link-style__tooltip", _rightOf(_tableHeader("/"+$prescriptionName+"/i", _in($tile))), _in($tile)), "data-original-title") == "K:pd.label.covered") {
			$plan[$prescriptions[$i].name] = {
				"isBrandCovered": "Covered", "isGenericCovered": "Covered"};
		}
		else {
			$plan[$prescriptions[$i].name] = "Not Covered";
		}
	}

	return $plan;
}

function clickViewPlanDetails($index, $name) {
	if ($isIdaho) {
		if (!$index) {
			var $noOfPlans = _count("_div", "payment");
			var $index = getRandomInt(0, $noOfPlans);
		}

		if(_isVisible(_span("Plan Tier"))){
			$dentalPayment = _getText(_div("payment["+$index+"]")).split("/")[0]
				$dentalPayment = $dentalPayment.replace(/\$/, "");
		}
		else {
			$payment = _getText(_heading3(0, _in(_div("payment["+$index+"]"))))
			_log("Premium on the plan page is" +$payment);
			
		}
		var $planName = _getAttribute(_link("detail", _in(_div("tile-header["+$index+"]"))), "data-original-title");
		_click(_link("View Detail[" + $index + "]"));
		viewDetailsVerify($planName);
	}
	else if ($isConnecticut) {
		if ($name) {
			var $tile = _parentNode(_paragraph($name));
		} else if (!$index) {
			$noOfPlans = _count("_div", "tile-header");
			$index = getRandomInt(0, $noOfPlans);
			var $tile = _div("tile-header["+$index+"]");
		}
		$plan = getPlanDetails($tile);

		clickElement(_link("View Detail", _in($tile)));
		verifyViewPlanDetails_CT($plan);
		verifyMoreInformationLinks($plan);
	}
}

function validateComparisonOfPlans(){
	if ($isConnecticut) {
		var $tiles = _collect("_div", "tile-header");
		if ($tiles.length > 4) {
			var $plans = [];
			for (var $i = 0; $i < 3; $i++) {
				_check(_checkbox("on", _in(_label("Compare",_in($tiles[$i])))));
				$plan = getPlanDetails($tiles[$i]);
				$plans.push($plan);
				var $selectedPlans = _count("_image", "/.*/", _in(_list("compareBox")));
				_assertEqual($selectedPlans, ($i+1), "No of plans selected for comparison should have been " + ($i+1));
			}

			_check(_checkbox("on", _in(_label("Compare",_in($tiles[3])))));
			_assertVisible(_paragraph("You can only compare 3 plans at a time", _in(_div("more-than-four"))));
			_click(_submit("Cancel", _in(_div("more-than-four"))));
			_click(_link("Compare Now"));

			verifyCompareHealthPlans($plans);
		}
		else {
			_assert(false, "Number of plans is less than 4. Insufficient information present on the UI to completely validate Plan Comparison.");
		}
	}
}

function selectPlanForComparison($planName){
	var $tile = _parentNode(_paragraph($planName));
	_setStrictVisibilityCheck(true);
	var $before = _count("_italic", "icon-remove");
	_check(_checkbox("Compare", _in($tile)));
	_wait(1000);
	var $after = _count("_italic", "icon-remove");
	_setStrictVisibilityCheck(false);
	if ($before == 3) {
		_assertVisible(_paragraph("You can only compare 3 plans at a time", _in(_div("more-than-four"))));
		_click(_submit("Cancel", _in(_div("more-than-four"))));
	}
	else {
		_assertEqual($before+1, $after, "Number of plans selected for comparison should have increased by 1.");
	}
	return getPlanDetails($tile);
}

function clickCompareNow($plan1, $plan2, $plan3){
	clickElement(_link("Compare Now"));
	var $plans = [];
	if ($plan1) {
		$plans.push($plan1);
		if ($plan2) {
			$plans.push($plan2);
			if ($plan3) $plans.push($plan3);
		}
	}
	verifyCompareHealthPlans($plans);
}

function verifyCompareHealthPlans($plans){
	if ($isConnecticut) {
		var $summaries = _collect("_div", "plan-details", _in(_div("mainSummaryCmp")));
		_assertEqual($plans.length, $summaries.length, "No of plans selected for comparison and the ones shown on the Compare page are different.");
		_assertVisible(_span("filteredPlanCount"));
		_assertEqual($plans.length, _getText(_span("filteredPlanCount")));

		for (var $i = 0; $i < $summaries.length; $i++) {
			var $plan = $plans[$i];
			var $summary = $summaries[$i];
			_assertVisible(_link("detail", _in($summary)));
			_assertEqual($plan.title,  _getAttribute(_link("detail", _in($summary)), "data-original-title"));

			_assertVisible(_small(0, _in($summary)));
			_assertEqual($plan.tierAndType, _getText(_small(0, _in($summary))));

			_assertVisible(_heading3(0, _in($summary)));
			_assertEqual($plan.premium, _getText(_heading3(0, _in($summary))));

			_assertVisible(_link("Remove from Compare", _in($summary)));

			for (var $j = 0; $j < $prescriptions.length; $j++) {
				var $prescription = $prescriptions[$j];
				//var $brandName = encodeForRegEx($prescription.name + " (Brand)");
				var $genericName = encodeForRegEx($prescription.name + " (Generic: "+$prescription.genericName+")");
				if ($prescription.genericName != "") {
					if ($plan[$prescription.name].isBrandCovered == "Covered") {
						_assertVisible(_italic("GOOD", _rightOf(_link("/"+$prescription.name+"/"))));
					}
					else {
						_assertEqual("Not Covered", _getAttribute(_link(0, _rightOf(_link("/"+$prescription.name+"/")), _under($summary)), "data-original-title") );
					}
					if ($plan[$prescription.name].isGenericCovered == "Covered") {
						_assertVisible(_italic("GOOD", _rightOf(_link("/"+$genericName+"/")), _under($summary)));
					}
					else {
						_assertEqual("Not Covered", _getAttribute(_link(0, _rightOf(_link("/"+$genericName+"/")), _under($summary)), "data-original-title") );
					}
				}
				else {
					if ($plan[$prescription.name].isGenericCovered == "Covered") {
						_assertVisible(_italic("GOOD", _rightOf(_link("/"+$prescription.name+"/")), _under($summary)));
					}
					else {
						_assertEqual("Not Covered", _getAttribute(_link(0, _rightOf(_link("/"+$prescription.name+"/")), _under($summary)), "data-original-title") );
					}
				}
			}

			for (var $j = 0; $j < $doctors.length; $j++) {
				//_assertEqual($plan[$doctors[$j]], _getText(_div(0, _rightOf(_div("/" + $doctors[$j]+"/")), _under($summary))));
				_assertContainsText($plan[$doctors[$j]], _div("providerNames"));
				//_assertEqual($plan[$doctors[$j]], _getText(_div(0, _rightOf(_div("/" + $doctors[$j]+"/")), _under($summary, 10))));
			}

			for (var $j = 0; $j < $hospitals.length; $j++) {
				//_assertEqual($plan[$hospitals[$j]], _getText(_div(0, _rightOf(_div("/" + $hospitals[$j]+"/")), _under($summary))));
				_assertEqual($plan[$hospitals[$j]], _getText(_div(0, _rightOf(_div("/" + $hospitals[$j]+ "/")), _under($summary))));
			}

		}

		for (var $i = 0; $i < $doctors.length; $i++) {
			_assertVisible(_div("/" + $doctors[$i]+"/", _in(_div("providerNames"))));
		}

		for (var $i = 0; $i < $hospitals.length; $i++) {
			_assertVisible(_div("/"+$hospitals[$i]+"/", _in(_div("providerNames"))));
		}

		for (var $i = 0; $i < $prescriptions.length; $i++) {
			_assertVisible(_div("/"+$prescriptions[$i].name+"/"));
		}

		//		_assertEqual($plans[0].title,  _getAttribute(_link("detail", _in(_div("plan-details"))), "data-original-title"));
		//		_click(_link("Remove from Compare"));
		//		$removedPlans = $plans.slice(0, 1);
		//		_assertNotEqual($removedPlans[0].title,  _getAttribute(_link("detail", _in(_div("plan-details"))), "data-original-title"));
		//		_assertVisible(_span("filteredPlanCount"));
		//		_assertEqual($plans.length - 1, _getText(_span("filteredPlanCount")));
		
		_assertVisible(_link("Summary"));
 		_assertVisible(_link("Doctors and Facilities"));
		_assertVisible(_link("K:pd.label.title.deductible" +" & "+ "K:pd.label.icon.outOfPocket"+" ("+"In Network"+")"));
 		_assertVisible(_link("Doctor Office Visits"));
 		_assertVisible(_link("Outpatient Diagnostic Services"));
 		_assertVisible(_link("Prescription Drugs from a Retail Pharmacy"));
		_assertVisible(_link("K:pd.label.icon.outpatient"));
		_assertVisible(_link("Emergency" +" & "+ "Urgent Care"));
 		_assertVisible(_link("Inpatient Hospital Services"));
 		_assertVisible(_link("Pediatric Dental Care"));
	}
}

function clickViewRandomPlanDetails() {
	var $plans = _collect("_link", "/ADD TO CART/");
	var $index = _random($plans.length - 1);
	clickViewPlanDetails($index);
}

function clickContinueToDentalPlans() {
	_click($planSelectionContinueToDentalPlans);
	$onDentalPage = true;
	verifyElementsOnPlanPage();
}

function clickContinueToCart() {
	if (_isVisible($planSelectionContinueToCart)) {
		_click($planSelectionContinueToCart);
	}
	else if(_isVisible($planSelectionGoToCart)) {
		_click($planSelectionGoToCart);
	}

	if($dentalPlanName!=""){
		$onDentalPage = true;
	}
	if($numberOfAdults==0){
		verifyElementsOnShowCartPage();
	}
	verifyElementsOnShowCartPage();
}

function clickCancelOnUpdateResults(){
	_assertVisible(_heading3("Shopping For"));
	_assertVisible(_submit("Update Results"));
	_click(_submit("btn btn-default pull-left"));
}

var $planTerminated="";
function clickShopForDental(){
	_assertVisible($planSelectionShopForDental);
	_click($planSelectionShopForDental);
	$onDentalPage=true;
	$disenrollDental ="false";
}

var $removeExistingPlan="false";
function clickShopForDifferentPlan(){
	$planTerminated= verifyCoverageDateGreaterThanToday($actualEffectiveStartDate);
	_assertVisible(_link("Shop for a Different Plan"));
	_click(_link("Shop for a Different Plan"));
	_assertVisible(_div("newplan"));
	_assertVisible(_link("Remove Existing Plans & Go Shopping"));
	_assertVisible(_submit("Return to Cart"));
	_click(_link("Remove Existing Plans & Go Shopping"));
	if($planName!="" || $dentalPlanName != ""){
		$removeExistingPlan = "true";
	}
}

function clickApplyChangesToDentalOnly(){
	_assertVisible(_div("no-health-plan-dentalOnly-msg"));
	_assertVisible(_submit("GO BACK"));
	_assertVisible(_link("APPLY CHANGES TO DENTAL PLAN"));
	_click(_link("APPLY CHANGES TO DENTAL PLAN"));
}

var $issuerDetails="";

function filterByCompany($company){

	var $logoClass =  "carrierlogo hide";
	if($company === undefined)
	{
		if(_isVisible(_fieldset("Company")))
		{
			var $companies = _collectAttributes("_label", "/.*/", "sahiText", _in(_fieldset("Company")));
			if ($isConnecticut) {
				//_assertEqual(["Anthem", "ConnectiCare"], $companies);
				var $companyName = getCompanyNameforCurrentYear();
				_assertContainsText($companyName[0][0], _div("carrierFilter"));
			}
			$company="";
			var $company = _getText(_label("checkbox", _near(_span("Company"))));
			_check(_checkbox(0, _in(_fieldset("Company"))));
			if ($isConnecticut) {
				_assertNotVisible(_link("ADD TO CART"));
			}
			else if ($isIdaho) {
				_assertVisible(_link("ADD TO CART"));
			}
			var $img =_collect("_image","/"+$logoClass+"/","sahiText",_in(_div("mainSummary")));
			_assert($img.length!=0);
			for(var $i =0; $i< $img.length; $i++)
			{
				var $actualCompany = $img[$i].getAttribute("alt");
				$actualCompany = $actualCompany.split(".");
				_assertEqual("/" + $actualCompany[0] +"/", $company);

			}
			_uncheck(_checkbox(0, _in(_fieldset("Company"))));
		}
	}
	else {
		_check(_checkbox(0, _in(_label("/"+$company+"/i"))));
		if ($isConnecticut) {
			_assertNotVisible(_link("ADD TO CART"));
		}
		else if ($isIdaho) {
			_assertVisible(_link("ADD TO CART"));
		}
		var $img =_collect("_image","/carrierlogo hide/","sahiText",_in(_div("mainSummary")));
		_assert($img.length!=0);
		for(var $i =0; $i< $img.length; $i++)
		{
			var $actualCompany = $img[$i].getAttribute("alt");
			$actualCompany = $actualCompany.split(".");
			_assertEqual("/"+$company+"/","/" + $actualCompany[0] +"/");
		}
		$issuerDetails = $company;
		getIssuerPaymentURL($company);
	}
}

function planSelectionMetalTierFilter($type){
	var $metalTier = $type.charAt(0).toUpperCase() + $type.slice(1).toLowerCase();
	_assertVisible((_span($metalTier+":", _in(_fieldset("Metal tier")))));
	verifySearchResult($type);
}

function verifySearchResult($type){
	if($type !="HSA")
		_click(_checkbox($type));
	if (_getText(_span("filteredPlanCount"))!= "0"){
		var $planType =	_collectAttributes("_div","/tile-header/","sahiText",_in(_div("mainSummary")));
		_assert($planType.length!=0);
		var $Expected = "/" +$type+ "/";
		for(var $i = 0; $i<$planType.length; $i++){
			_assertEqual($Expected, $planType[$i], "Filter did not return the expected value");
		}
	}
}

var $removeExisitngHealthPlan = false;
function clickShopforHealthPlan(){
	_click(_link("Shop for Health"));
	_assertVisible(_link("Health Insurance"));
	$removeExisitngHealthPlan = true;
}


function filterDentalPlanTier($filter){
	if($filter === undefined){
		if(_isVisible((_span("Plan Tier")))){
			//IDSIT
			var $dentalPlanTier=_getText(_fieldset("Plan Tier")).split("Tier ")[1].split(" ");
			for($i=0;$i<$dentalPlanTier.length;$i++){
				var $y= $i+1;
				_check(_checkbox("filter_checkbox["+$y+"]"));
				verifyFilter($dentalPlanTier[$i]);
				_uncheck(_checkbox("filter_checkbox["+$y+"]"));
			}
		}
	}
	else {
		_click(_checkbox($filter, _near(_span("Plan Tier"))));
		//IDSIT
		verifyFilter($filter);
	}
}

function clickEnrollNow(){
	if ($isConnecticut){
		clickElement(_link("Enroll Now"));
		_assertVisible(_heading3("enrollNowHeader"));
		_assertEqual("K:pd.label.enrollNow.modal.header", _getText(_heading3("enrollNowHeader")));
		clickElement(_link("Create An Account"));
		_wait(10000, _isVisible(_div("Create User Account")));
		var $url;
		_set($url, _call(window.location.href));
		_assertEqual("https://www.accesshealthct.com/AHCT/DisplayCreateUserAccount.action", $url);
	}
}

function verifySortByDropdownOnPlanPage($defaultOption){
	_setStrictVisibilityCheck(true);
	clickElement(_link(0, _in(_parentNode(_span("Sort By")))));
	var $sortingOptions = _collectAttributes("_link", "/.*/", "sahiText", _in(_list("dk_options_inner")));
	_assertEqual(["Monthly price", "Total Expense Estimate", "Yearly Deductible", "Out-of-Pocket (OOP) Max"], $sortingOptions);
	_wait(4000);
	clickElement(_link(0, _in(_parentNode(_span("Sort By")))));

	verifyPlansSortedByMonthlyPrice();
	verifyPlansSortedByTotalExpenseEstimate();
	verifyPlansSortedByYearlyDeductible();
	verifyPlansSortedByOutOfPocketMax();

	_setStrictVisibilityCheck(true);
}

function openSortByDropdown(){
	if (!_isVisible(_div("dk_options"))) {
		clickElement(_link(0, _in(_parentNode(_span("Sort By")))));
	}
}

function closeSortByDropdown(){
	if (_isVisible(_div("dk_options"))) {
		clickElement(_link(0, _in(_parentNode(_span("Sort By")))));
	}
}

function verifyPlansSortedByMonthlyPrice(){
	openSortByDropdown();
	clickElement(_link("Monthly price"));
	var $plans = _collect("_div", "tile-header", _in(_div("mainSummary")));
	var $correctlySorted = true;
	for (var $i = 0; $i < $plans.length - 1; $i++) {
		var $current = _getText(_paragraph("pac", _rightOf(_tableHeader("Estimated Monthly Premium", _in($plans[$i])))));
		var $next = _getText(_paragraph("pac", _rightOf(_tableHeader("Estimated Monthly Premium", _in($plans[$i+1])))));
		$current = convertMoneyToNumber($current);
		$next = convertMoneyToNumber($next);
		if ($current > $next) {
			$correctlySorted = false;
			_log("Plan " + $i + " is more than " + ($i+1));
			break;
		}
	}
	_assertTrue($correctlySorted, "Plans are not sorted in ascending order of Monthly Price");
	closeSortByDropdown();
}

function isEstimateLarger($current, $next){
	var $map = {
		"low": 1, "average": 2, "high": 3};
	return $map[$current] > $map[$next];
}

function verifyPlansSortedByTotalExpenseEstimate() {
	openSortByDropdown();
	clickElement(_link("Total Expense Estimate"));
	var $plans = _collect("_div", "tile-header", _in(_div("mainSummary")));
	var $correctlySorted = true;
	for (var $i = 0; $i < $plans.length - 1; $i++) {
		var $current = _getText(_span(0, _rightOf(_tableHeader("Total Expense Estimate", _in($plans[$i])))));
		var $next = _getText(_span(0, _rightOf(_tableHeader("Total Expense Estimate", _in($plans[$i+1])))));
		if (isEstimateLarger($current, $next)) {
			$correctlySorted = false;
			_log("Plan " + $i + " is more than " + ($i+1));
			break;
		}
	}
	_assertTrue($correctlySorted, "Plans are not sorted in ascending order of Total Expense Estimate");
	closeSortByDropdown();
}

function verifyPlansSortedByYearlyDeductible() {
	openSortByDropdown();
	clickElement(_link("Yearly Deductible"));
	var $plans = _collect("_div", "tile-header", _in(_div("mainSummary")));
	$correctlySorted = true;
	for (var $i = 0; $i < $plans.length - 1; $i++) {
		var $current = _getText(_cell(0, _rightOf(_tableHeader("Yearly Deductible", _in($plans[$i])))));
		$current = $current.split("/")[0];
		$current = convertMoneyToNumber($current);
		var $next = _getText(_cell(0, _rightOf(_tableHeader("Yearly Deductible", _in($plans[$i+1])))));
		// "$3400 / $100"
		var $nextSplitted = $next.split("/");
		$next = 0;
		for (var $j = 0; $j < $nextSplitted.length; $j++) {
			$next += convertMoneyToNumber($nextSplitted[$j]);
		}
		if ($current > $next) {
			$correctlySorted = false;
			_log("Plan " + $i + " is more than " + ($i+1));
			break;
		}
	}
	_assertTrue($correctlySorted, "Plans are not sorted in ascending order of Total Expense Estimate");
	closeSortByDropdown();
}

function verifyPlansSortedByOutOfPocketMax(){
	openSortByDropdown();
	clickElement(_link("Out-of-Pocket (OOP) Max"));
	var $plans = _collect("_div", "tile-header", _in(_div("mainSummary")));
	$correctlySorted = true;
	for (var $i = 0; $i < $plans.length - 1; $i++) {
		var $current = _getText(_cell(0, _rightOf(_tableHeader("Out-Of-Pocket Maximum", _in($plans[$i])))));
		var $next = _getText(_cell(0, _rightOf(_tableHeader("Out-Of-Pocket Maximum", _in($plans[$i+1])))));
		$current = convertMoneyToNumber($current);
		$next = convertMoneyToNumber($next);
		if ($current > $next) {
			$correctlySorted = false;
			_log("Plan " + $i + " is more than " + ($i+1));
			break;
		}
	}
	_assertTrue($correctlySorted, "Plans are not sorted in ascending order of Total Expense Estimate");
	clickElement(_link(0, _in(_parentNode(_span("Sort By")))));
	closeSortByDropdown();
}

function verifySortingPageNavigation(){
	var $checkboxes = _collect("_checkbox", "/.*/", _in(_div("filter")));
	for (var $i = 0; $i < $checkboxes.length; $i++) {
		_uncheck($checkboxes[$i]);
	}
	var $planCount = parseInt(_getText(_span("filteredPlanCount")));
	if($planCount >12){
		_assertVisible(_div("pagination"));
		_assertEqual("active", _getAttribute(_listItem("1", _in(_div("pagination"))), "className"));
		_assertVisible(_link("next", _in(_div("pagination"))));
		_assertNotVisible(_link("prev", _in(_div("pagination"))));
		_click(_link("next", _in(_div("pagination"))));
		_assertNotEqual("active", _getAttribute(_listItem("1", _in(_div("pagination"))), "className"));
		_assertVisible(_link("prev", _in(_div("pagination"))));
		_assertNotVisible(_link("next", _in(_div("pagination"))));
		_click(_link("prev", _in(_div("pagination"))));
	}
}

function verifyMoreInformationLinks($plan){
 	if ($isConnecticut){
		if(providerDirectory($plan)){
			_assertVisible(_div("More Information:"+" "+"Summary of Benefits and Coverage"+" "+"Detailed Plan Documents (PDF)"+" "+"Provider Directory"+" "+"Drug List"));
			_assertVisible(_link("Provider Directory"));
			clickElement(_link("Provider Directory"));
			verifyLeavingPopUpWindow();
		}
		else{
			_assertVisible(_div("More Information:"+" "+"Summary of Benefits and Coverage"+" "+"Detailed Plan Documents (PDF)"+" "+"Provider Directory (not available)"+" "+"Drug List"));
		
		}
 		_assertVisible(_link("Detailed Plan Documents (PDF)"));
 		_assertVisible(_link("Summary of Benefits and Coverage"));
 		_assertVisible(_link("Drug List"));
		clickElement(_link("Summary of Benefits and Coverage"));
 		verifyLeavingPopUpWindow();
 		//clickElement(_link("Provider Directory"));
 		//verifyLeavingPopUpWindow();
		clickElement(_link("Drug List"));
 		verifyLeavingPopUpWindow();
	}
}

function verifyLeavingPopUpWindow(){
 	if ($isConnecticut){
 		_assertVisible(_heading4("You are now leaving AccessHealthCT Web site."));
 		_assertVisible(_link("Yes, Proceed"));
		_click(_link("/"+"No, Take Me Back"+"/"));
 	}
 }
function verifyProvidersAndPrescriptionsArePresent($planName, $areDoctorsPresent, $areFacilitiesPresent, $arePrescriptionsAvailable){
	$areDoctorsPresent = isTrue($areDoctorsPresent);
	$areFacilitiesPresent = isTrue($areFacilitiesPresent);
	$arePrescriptionsAvailable = isTrue($arePrescriptionsAvailable);

	var $tile = _parentNode(_paragraph($planName));
	for (var $i = 0; $i < $doctors.length; $i++) {
		if ($areDoctorsPresent) {
			if ($doctors[$i].length > 11) {
				_assertVisible(_italic("icon-ok-sign", _rightOf(_tableHeader("/"+$doctors[$i].substring(0, 11) +"/", _in($tile)))));
			}
			else {
				_assertVisible(_italic("icon-ok-sign", _rightOf(_tableHeader("/"+$doctors[$i] +"/", _in($tile)))));
			}
		}
		else if ($doctors[$i].length > 11){
			_assertVisible(_italic("icon-ban-circle", _rightOf(_tableHeader("/"+$doctors[$i].substring(0, 11) +"/", _in($tile)))));
		}
		else {
			_assertVisible(_italic("icon-ban-circle", _rightOf(_tableHeader("/"+$doctors[$i] +"/", _in($tile)))));
		}
	}

	for (var $i = 0; $i < $hospitals.length; $i++) {
		if ($areFacilitiesPresent) {
			if ($hospitals[$i].length > 15) {
				_assertVisible(_italic("icon-ok-sign", _rightOf(_tableHeader("/"+$hospitals[$i].substring(0, 15)+"/", _in($tile)))));
			}
			else {
				_assertVisible(_italic("icon-ok-sign", _rightOf(_tableHeader("/"+$hospitals[$i]+"/", _in($tile)))));
			}
		}
		else if ($hospitals[$i].length > 15) {
			_assertVisible(_italic("icon-ban-circle", _rightOf(_tableHeader("/"+$hospitals[$i].substring(0, 15)+"/", _in($tile)))));
		}
		else {
			_assertVisible(_italic("icon-ban-circle", _rightOf(_tableHeader("/"+$hospitals[$i]+"/", _in($tile)))));
		}
	}

	for (var $i = 0; $i < $prescriptions.length; $i++) {
		if ($arePrescriptionsAvailable) {
			if ($prescriptions[$i].name.length > 19) {
				_assertVisible(_italic("icon-ok-sign", _rightOf(_tableHeader("/"+$prescriptions[$i].name.substring(0, 19)+"/", _in($tile)))));
			}
			else {
				_assertVisible(_italic("icon-ok-sign", _rightOf(_tableHeader("/"+$prescriptions[$i].name+"/", _in($tile)))));
			}
		}
		else if ($prescriptions[$i].name.length > 19){
			_assertVisible(_italic("icon-ban-circle", _rightOf(_tableHeader("/"+$prescriptions[$i].name.substring(0, 19)+"/", _in($tile)))));
		}
		else {
			_assertVisible(_italic("icon-ban-circle", _rightOf(_tableHeader("/"+$prescriptions[$i].name+"/", _in($tile)))));
		}
	}
}