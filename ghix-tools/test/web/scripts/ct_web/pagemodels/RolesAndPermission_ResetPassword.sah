_includeOnce("ViewHistory.sah");
_includeOnce("User.sah");
_includeOnce("../lib/util.sah");
_includeOnce("global_include.sah");

function verifyResetPasswordPermissionLevel($role, $superUser, $password, $defaultPwd, $resetPwd, $hasPermission, $hasOptionToSelectPasswordResetMail) {
	login($superUser, $password);
	clickManageMember();
	searchMemberByEmail($email);
	selectTestMember();
	goToResetPasswordPage();
	if (isUserAuthorizedToResetPassword($hasPermission)) {
		validateResetPasswordPage();
		var $preNotices = getNoticesForPasswordReset();
		submitAuthenticationInformation();
		if (willOptionToSelectEmailAddressAppear($hasOptionToSelectPasswordResetMail)) {
			sendMailToUser();
		}
		var $postNotices = getNoticesForPasswordReset($email);
		_assert($postNotices.length - $preNotices.length > 0, "Password reset record was not added to the Notices.");
		var $emailBody = $postNotices[0]["email_body"];
		logOut();
		var $expression = "https://" + getBaseDomain() + "/hix/account/user/reset/(\\w+)";
		_log($expression);
		var $resetURL = $emailBody.match($expression)[0];
		changePassword($resetPwd, $resetURL);
		login($email, $resetPwd);
		resetPassword($resetPwd, $defaultPwd);
		logOut();
	}
	else {
		validateCannotResetPasswordPage();
		logOut();
	}
}

function getEmailFromNotice($preNotices, $email, $message){
	var $postNotices = getNoticesForPasswordReset($email);
	_assert($postNotices.length - $preNotices.length > 0, $message);
	var $emailBody = $postNotices[0]["email_body"];
	var $expression = "https://" + getBaseDomain() + "/hix/account/user/reset/(\\w+)";
	return $emailBody.match($expression)[0];
}

function goToResetPasswordPage(){
	_click(_link("Reset Password"));
}

function isUserAuthorizedToResetPassword($hasPermission){
	return isTrue($hasPermission);
}

function validateResetPasswordPage(){
	// CSR, L2, Supervisor
	_assertVisible(_div("/Authentication Information/", _in(_div("rightpanel"))), "Authentication Information panel not found even though it should have been.");
	_assertNotVisible(_image("Access Denied Image"), "Access Denied Image was visible even though it should not have been.");
}

function validateCannotResetPasswordPage() {
	// Admin, L1
	_assertNotVisible(_div("/Authentication Information/", _in(_div("rightpanel"))), "Authentication Information panel found even though it should not have been");
	_assertVisible(_image("Access Denied Image"), "Access Denied Image was not visible even though it should have been.");
}

function submitAuthenticationInformation() {
	_setValue(_textbox("firstName"), $firstName);
	_setValue(_textbox("lastName"), $lastName);
	_setValue(_textbox("phoneNumber"), $phoneNumber);

	if (_isVisible(_textbox("birthDate"))) {
		_setValue(_textbox("birthDate"), $dob);
	}

	if (_isVisible(_textbox("householdTotal"))) {
		var $sizeof_Household = getSizeOfHousehold($email);
		_setValue(_textbox("householdTotal"), $sizeof_Household);
	}

	if (_isVisible(_textbox("zipCode"))) {
		_setValue(_textbox("zipCode"), $zipCode);
	}

	if (_isVisible(_textbox("county"))) {
		_setValue(_textbox("county"), $county);
	}

	_click(_submit("Submit"));
}

function provideIncorrectAnswers($limit, $offset, $email){
	for (var $i = 0; $i < ($limit-$offset); $i++) {
		provideIncorrectAnswer();
	}
	verifySecQueRetryCount($email, $limit-$offset);
}

function validateResetPasswordIncorrectMessage(){
	_assertEqual("Responses to some of the identify verification questions are incorrect. Reset password email cannot be sent to the user at this time.", _getText(_paragraph("alert alert-error ng-scope")));
}

function willOptionToSelectEmailAddressAppear($hasOptionToSelectPasswordResetMail){
	return isTrue($hasOptionToSelectPasswordResetMail);
}

function sendMailToUser(){
	_assertVisible(_label("Email address to send password reset link to:"));
	_assertVisible(_label("Current HIX Account Email"));
	_assertVisible(_label("Alternate Email"));
	_assertEqual("This will not change the HIX account email address. It will only send the password reset email to an alternate email. If they need to change their HIX account email, once they can log in, walk them through the account email change process.", _getText(_paragraph("alert alert-info")));
	_check(_radio("email", _in(_label("Alternate Email"))));
	var $e = createEmailAddress();
	$e = $e.toLowerCase();
	_setValue(_emailbox("alternateEmail"), $e);
	_setValue(_textarea("reason"), "Sending reset password link to alternate email account.");
	_click(_submit("Submit", _in(_div("/modal-content.*ng-valid-required/"))));
	_assertVisible(_heading4("Your information"));
	_assertVisible(_div("An email has been sent to: "
						+ $e
						+ " Please check your inbox, and click on the link in the message."), "Success message for email sent was not visible. If password had been reset, was the success message changed?");
	goToHistoryPage();
	_assertVisible(_span("CSR Overrides - Supervisor overrides Email"));
	return $e;
}

function sendMailToUsersAccount($email){
	_assertVisible(_heading4("Your information"));
	_assertVisible(_div("An email has been sent to: "
						+ $email
						+ " Please check your inbox, and click on the link in the message."), "Success message for email sent was not visible. If password had been reset, was the success message changed?");
	goToHistoryPage();
	_assertVisible(_span("Communication Preferences - Updated Communication Preferences"));
}

function changePassword($password, $url){
	_navigateTo($url);
	_setValue(_password("password"), $password);
	_setValue(_password("confirmPassword"), $password);
	_click(_button("Continue"));
	_assertVisible(_div("Your password has been changed."), "Please check if password successfully changed or the success message had changed.");
	_click(_link("Login"));
}

function resetPassword($currentPwd, $newPwd){
	if (_isVisible(_link("Don't ask again"))) {
		_click(_link("Don't ask again"));
	}
	_click(_link("/My Account/", _in(_div("container"))));
	_click(_link("Account Settings"));
	_click(_link("Change Your Password"));
	_setValue(_password("currentpswd"), $currentPwd);
	_setValue(_password("newpassword"), $newPwd);
	_setValue(_password("confirmpassword"), $newPwd);
	_click(_button("Save"));
}

function verifyResetPasswordLinkNotPresent(){
	_assertNotVisible(_link("Reset Password"));
}

function provideIncorrectAnswer(){
	_setValue(_textbox("firstName"), $firstName+"x");
	_setValue(_textbox("lastName"), $lastName+"x");
	_setValue(_textbox("phoneNumber"), $phoneNumber+1);

	if (_isVisible(_textbox("birthDate"))) {
		_setValue(_textbox("birthDate"), $dob);
	}

	if (_isVisible(_textbox("householdTotal"))) {
		var $sizeof_Household = getSizeOfHousehold($email);
		_setValue(_textbox("householdTotal"), $sizeof_Household+1);
	}

	if (_isVisible(_textbox("zipCode"))) {
		_setValue(_textbox("zipCode"), $zipCode+1);
	}

	if (_isVisible(_textbox("county"))) {
		_setValue(_textbox("county"), $county+"x");
	}

	_click(_submit("Submit"));
	_assertContainsText("Responses to some of the identity verification questions are incorrect.", _paragraph("/alert alert-error ng-scope/"));
}
