_includeOnce("../lib/util.sah");
_includeOnce("PlanSelection.sah");

var $Preferences = true;
var $prefPageIndex = 0;
var $backToPreferences = _link("Back");
var $nextPreferences = _link("Next");
var $resetPreferences;
var $nextPreferences;

var $skipPreferences = _submit("nextButton");
var $doctorVisits = [_radio("sixmonths"), _radio("threemonths"), _radio("everymonth"), _radio("everytwoweeks")];
var $monthlyPrescriptions = [_radio("none"), _radio("onetofour"), _radio("fivetoten"), _radio("morethan10")];
var $childrensDental = _checkbox("pediatric");
var $acupuncture = _checkbox("acupuncture");
var $viewPlans = _submit("/View Plans/");

var $doctors = [], $hospitals = [], $prescriptions = [], $removedDoctors = [], $removedHospitals = [], $removedPrescriptions = [];

function goBackToPreferences(){
	clickElement(_link("Back to preferences"));
	$prefPageIndex = 0;
	verifyElementsOfPreferencePage();
}

function removePrescription($dosage){
	_assertVisible(_div($dosage, _in(_div("selectedDrugsContainer"))));
	_click(_italic("icon-remove removeSelectedDrug", _in(_div($dosage, _in(_div("selectedDrugsContainer"))))));
	_assertNotVisible(_div($dosage, _in(_div("selectedDrugsContainer"))));
	for (var $index = 0;$index < $prescriptions.length; $index++) {
		if ($prescriptions[$index].dosage == $dosage) {
			var $prescription = $prescriptions.splice($index, 1)[0];
			$removedPrescriptions.push($prescription);
			_log($prescription);
			break;
		}
	}
}

function clickNextPreferences() {
	_click($nextPreferences);
	$prefPageIndex++;
	verifyElementsOfPreferencePage();
}

function verifyElementsOfPreferencePage() {
	_setStrictVisibilityCheck(true);
	_assertVisible($skipPreferences);
	if ($prefPageIndex > 0) {
		_assertVisible($backToPreferences);
	}
	_assertVisible(_link("Reset all my responses"));
	_assertVisible(_link("Reset all my responses"));	if ($prefPageIndex == 0) {
		_assertVisible(_heading1("Tell us about your healthcare needs"));
		_assertVisible(_heading4("(Optional) Please answer the questions below"));
		_assertVisible(_fieldset("Choose the category below that best describes the medical service use you expect for 2018. For families, choose the category that best fits the person who probably will need the most medical services in 2018."));
		_assertVisible(_label("Low Use: 1-2 doctor visits and lab tests each year; preventive care too."));
		_assertVisible(_label("Medium Use: 3-5 doctor visits and lab tests with an x-ray each year; one or more small treatments done in doctorâ€™s office; often the care is for an ongoing health problem."));
		_assert(_getAttribute(_radio("LEVEL2"), "checked"));
		_assertVisible(_label("High Use: 6 or more doctor visits and a number of lab tests; a surgery, therapy or other treatment in an outpatient center plus follow-up care."));
		_assertVisible(_label("Very High Use: a hospital stay, high cost radiology scans or outpatient treatment; more than 6 doctor visits with lab tests and other care."));
		_assertVisible($nextPreferences);
	}
	else if ($prefPageIndex == 1) {
		_assertVisible(_heading1("Tell us about your healthcare needs"));
		_assertVisible(_heading4("(Optional) Please answer the questions below"));
		_assertVisible(_fieldset("Choose the category below that best describes the prescription drug use you expect for 2018. For families, choose the category that best fits the person who probably will need the most drugs in 2018."));
		_assertVisible(_label("Low Use: 1-2 prescriptions during the year for brief illness."));
		_assertVisible(_label("Medium Use: 1 prescription each month for a health problem; also may need several short-term medications."));
		_assert(_getAttribute(_radio("LEVEL2"), "checked"));
		_assertVisible(_label("High Use: 2 prescriptions each month for health problems; often higher cost medications."));
		_assertVisible(_label("Very High Use: 3 or more prescriptions each month for health problems OR very high cost medications."));
		_assertVisible($nextPreferences);
	}
	else if ($prefPageIndex == 2) {
		_assertVisible(_heading1("Tell us about your healthcare needs"));
		_assertVisible(_heading4("(Optional) Please answer the questions below"));
		_assertVisible(_submit("providerTypeId"));
		_click(_submit("providerTypeId"));
		_assertVisible(_link("/Doctor/", _in(_list("providerTypeDropdown"))));
		_assertVisible(_link("/Facility/", _in(_list("providerTypeDropdown"))));
		_assertVisible(_textbox("providerName"));
		_assertVisible(_select("providerDistance"));
		_assertVisible(_textbox("providerZipcode"));
		_assertEqual($familyZipCode, _getValue(_textbox("providerZipcode")));
		_assertVisible(_paragraph("Note: The health plan's list of providers changes daily. Call your doctor or provider to be sure they are in the network for the plan you are considering, and also make sure the doctor or provider is in the plan network at the location you prefer. Networks change from plan to plan -- do not assume that a doctor or provider is in the network for all plans offered by a particular insurance company."));
		_assertVisible(_paragraph("Health plans are responsible for providing up-to-date provider lists to Access Health CT. Access Health CT makes no warranties about the accuracy of the provider directory on this website. This information will not be stored and will not be shared with any third party or insurance company. This tool is anonymous, and the information you provide will not have any effect on your insurance premiums, cost sharing or eligibility for coverage."));
		_assertVisible($nextPreferences);
	}
	else if($prefPageIndex == 3){
		_assertVisible(_heading1("Tell us about your healthcare needs"));
		_assertVisible(_heading4("(Optional) Please answer the questions below"));
		_assertVisible(_paragraph("Add up to 5 prescription drugs to see if they are covered by your plan. Do you know?"));
		_assertVisible(_textbox("drugName"));
		_assertEqual("", _getValue(_textbox("drugName")));
	}
	_setStrictVisibilityCheck(false);
}

function selectDoctor($name, $zip){
	_setValue(_textbox("providerZipcode"), $zip);
	if (!_isVisible(_list("providerTypeDropdown"))) {
		_click(_submit("providerTypeId"));
	}
	_click(_link("Doctor", _in(_list("providerTypeDropdown"))));
	_assertEqual("Search by doctor name", _getAttribute(_textbox("providerName"), "placeholder"));
	_setValue(_textbox("providerName"), $name);
	_wait(1500);
	_call(_link("/"+$name+"/").click());
	_assertVisible(_listItem("/Doctorx.*"+$name+"/", _in(_list("providerSelectedListUl"))));
	_assertVisible(_link("x", _in(_listItem("/Doctorx.*"+$name+"/", _in(_list("providerSelectedListUl"))))));
	$doctors.push($name);
}

function selectDoctorTwice($name, $zip){
	selectDoctor($name, $zip);
	_setValue(_textbox("providerName"), $name);
}

function removeDoctor($name){
	_assertVisible(_listItem("/Doctor x.*"+$name+"/", _in(_list("providerSelectedListUl"))));
	_click(_link("x", _in(_listItem("/Doctor x.*"+$name+"/", _in(_list("providerSelectedListUl"))))));
	_assertNotVisible(_listItem("/Doctor x.*"+$name+"/", _in(_list("providerSelectedListUl"))));
	for (var $index = 0;$index < $doctors.length; $index++) {
		if ($doctors[$index] == $name) {
			var $doctor = $doctors.splice($index, 1);
			$removedDoctors.push($doctor);
			break;
		}
	}
}

function selectHospitalTwice($name, $zip){
	selectHospital($name, $zip);
	_setValue(_textbox("providerName"), $name);
	_assert(false, "Duplicate Facility message should have been shown.");
}

function selectHospital($name, $zip){
	_setValue(_textbox("providerZipcode"), $zip);
	if (!_isVisible(_list("providerTypeDropdown"))) {
		_click(_submit("providerTypeId"));
	}
	_click(_link("/Facility/", _in(_list("providerTypeDropdown"))));
	_assertEqual("Search by facility name", _getAttribute(_textbox("providerName"), "placeholder"));
	_setValue(_textbox("providerName"), $name);
	_wait(1500);
	_call(_link("/"+$name+"/").click());
	_assertVisible(_listItem("/Facilityx "+$name+"/", _in(_list("providerSelectedListUl"))));
	_assertVisible(_link("x", _in(_listItem("/Facilityx "+$name+"/", _in(_list("providerSelectedListUl"))))));
	$hospitals.push($name);
}

function removeHospital($name){
	_assertVisible(_listItem("/Facility x "+$name+"/", _in(_list("providerSelectedListUl"))));
	_click(_link("x", _in(_listItem("/Facility x "+$name+"/", _in(_list("providerSelectedListUl"))))));
	_assertNotVisible(_listItem("/Facility x "+$name+"/", _in(_list("providerSelectedListUl"))));
	for (var $index = 0; $index < $hospitals.length; $index++) {
		if ($hospitals[$index] == $name) {
			var $hospital = $hospitals.splice($index, 1);
			$removedHospitals.push($hospital);
			break;
		}
	}
}

function selectPrescription($name, $dosage, $genericName){
	_setValue(_textbox("drugName"), "");
	_lockWindow();
	_focusWindow();
	//_type(_textbox("drugName"), $name);
	_setValue(_textbox("drugName"), $name);
	_wait(2000, _isVisible(_image("loading")));
	_wait(5000, !_isVisible(_image("loading")));
	_click(_link("/"+$name+"/"));
	_unlockWindow();
	var $tempDosage = encodeForRegEx($dosage);
	_click(_radio("drugDosage", _in(_label("/"+$tempDosage+"/"))));
	_click(_submit("Select Your Dosage"));
	_assertVisible(_div($dosage, _in(_div("selectedDrugsContainer"))));
	_assertVisible(_italic("icon-remove removeSelectedDrug", _in(_div($dosage, _in(_div("selectedDrugsContainer"))))));
	if ($genericName) {
		var $tempGenericName = encodeForRegEx($genericName + " (Generic Name)");
		_assertVisible(_div("/"+$tempGenericName+"/", _under(_div($dosage, _in(_div("selectedDrugsContainer"))))));
	}
	else {
		$genericName = "";
	}
	$prescriptions.push({
		"name": $name, 
		"dosage": $dosage,
		"genericName": $genericName
	}
					   );
}

function verifyMaxedOutProviders(){
	_assertTrue(_getAttribute(_textbox("providerName"), "disabled"));
	_assertTrue(_getAttribute(_select("providerDistance"), "disabled"));
	_assertTrue(_getAttribute(_textbox("providerZipcode"), "disabled"));
	_assertTrue(_getAttribute(_submit("providerTypeId"), "disabled"));
}

function verifyDisabledPrescriptions(){
	_assertTrue(_getAttribute(_textbox("drugName"), "disabled"));
}

function searchNonExistantPrescription($name){
	_lockWindow();
	_focusWindow();
	_setStrictVisibilityCheck(true);
	_type(_textbox("drugName"), $name);
	_wait(2000, _isVisible(_image("loading")));
	_wait(5000, !_isVisible(_image("loading")));
	_assertVisible(_link("No results found"));
	_setStrictVisibilityCheck(false);
	_unlockWindow();
}

function searchNonExistantDoctor($name, $zip){
	_setStrictVisibilityCheck(true);
	_setValue(_textbox("providerZipcode"), $zip);
	if (!_isVisible(_list("providerTypeDropdown"))) {
		_click(_submit("providerTypeId"));
	}
	_click(_link("Doctor", _in(_list("providerTypeDropdown"))));
	_assertEqual("Search by doctor name", _getAttribute(_textbox("providerName"), "placeholder"));
	_setValue(_textbox("providerName"), $name);
	_wait(1500);
	_assertVisible(_link("No results found"));
	_setStrictVisibilityCheck(false);
}

function searchNonExistantHospital($name, $zip){
	_setStrictVisibilityCheck(true);
	_setValue(_textbox("providerZipcode"), $zip);
	if (!_isVisible(_list("providerTypeDropdown"))) {
		_click(_submit("providerTypeId"));
	}
	_click(_link("/Facility/", _in(_list("providerTypeDropdown"))));
	_assertEqual("Search by facility name", _getAttribute(_textbox("providerName"), "placeholder"));
	_setValue(_textbox("providerName"), $name);
	_wait(1500);
	_assertVisible(_link("No results found"));
	_setStrictVisibilityCheck(false);
}

function clickSkipPreferences() {
	_click($skipPreferences);
	$onDentalPage = undefined;
	verifyElementsOnPlanPage();
}

function clickBackToPreferences() {
	_click($backToPreferences);
	$prefPageIndex--;
	verifyElementsOfPreferencePage();
}

function selectDoctorVisits($index) {
	if ($index === undefined) {
		$index = 1;
	}
	_click($doctorVisits[$index]);
}

function selectMonthlyPrescriptions($index) {
	if ($index === undefined) {
		$index = 1;
	}
	_click($monthlyPrescriptions[$index]);
}

function selectChildrensDental($bool) {
	if ($bool === undefined) {
		$bool = true;
	}
	if ($bool) {
		_check($childrensDental);
	}
	else {
		_uncheck($childrensDental);
	}
}

function selectAcupuncture($bool) {
	if ($bool === undefined) {
		$bool = true;
	}
	_assertVisible($acupuncture);
	if ($bool) {
		_check($acupuncture);
	}
	else {
		_uncheck($acupuncture);
	}
}

function clickViewPlans($isCSREnabled) {
	clickElement($viewPlans);
	waitForLoad();
	$isCSREnabled = isTrue($isCSREnabled);
	_assertEqual($isCSREnabled, _getAttribute(_checkbox("CSR Eligible includes lower copayments, deductibles and coinsurance."), "checked"));
	$onDentalPage = undefined;
	verifyElementsOnPlanPage();
	if ($loggedIn || $onDentalPage) {
		_assertNotVisible($editInfo);
	}
	else if($numAdults!=null && $numAdults>0) {
		_assertVisible($editInfo);
	}
}

function verifyHouseholdDetailsOnPlansSummary($noOfAdults, $noOfChildren, $zipCode, $aptc){
	$noOfAdults = parseInt($noOfAdults);
	if ($noOfAdults == 0) {
		_assertNotContainsText("adult", _small(0, _in(_heading1("/Browse Health Plans/"))));
	}
	else if ($noOfAdults == 1) {
		_assertContainsText("1 adult", _small(0, _in(_heading1("/Browse Health Plans/"))));
	}
	else {
		_assertContainsText($noOfAdults + " adults", _small(0, _in(_heading1("/Browse Health Plans/"))));
	}

	$noOfChildren = parseInt($noOfChildren);
	if ($noOfChildren == 0) {
		_assertNotContainsText("child", _small(0, _in(_heading1("/Browse Health Plans/"))));
	}
	else if ($noOfChildren == 1) {
		_assertContainsText("1 child", _small(0, _in(_heading1("/Browse Health Plans/"))));
	}
	else {
		_assertContainsText($noOfChildren + " children", _small(0, _in(_heading1("/Browse Health Plans/"))));
	}

	_assertContainsText("ZIP code " + $zipCode, _small(0, _in(_heading1("/Browse Health Plans/"))));

	$aptc = $aptc + "";
	var $aptcSplitted = $aptc.split("/");
	_assertContainsText($aptcSplitted[0] + ".00 " + $aptcSplitted[1], _small(0, _in(_heading1("/Browse Health Plans/"))));
}

function verifyNotificationPreferences(){
	var $preferences = _collectAttributes("_label", "/.*/", "sahiText", _in(_div("controls", _rightOf(_label("I would like to receive information by:")))));
	_assertEqual(4, $preferences.length, "The number of preferences is not 4. The options shown are: " + $preferences);
	var $options = ["Email", "Postal Mail", "Both (E-mail and Postal Mail)", "None"];
	for (var $i = 0; $i < $preferences.length; $i++) {
		_assertEqual($options[$i], $preferences[$i], "Preferences option shown does not match the expected option.");
	}
}

function selectNotificationPreference($preference){
	var $preferences = _collect("_radio", "/.*/", _in(_div("controls", _rightOf(_label("I would like to receive information by:")))));
	var $orig;
	for (var $i = 0; $i < $preferences.length; $i++) {
		if (_getAttribute($preferences[$i], "checked")) {
			$orig = _getText(_parentNode($preferences[$i]))
				break;
		}
	}
	_click(_radio(0, _in(_label($preference))));
	if ($preference == "None") {
		_assertEqual("You have opted out of all notifications. Information will only be available through your Secure Inbox.", _getText(_paragraph(0, _in(_parentNode(_div("/Important/"))))));
		_click(_submit("Ok", _in(_parentNode(_div("/Important/")))));
	}
	_click(_submit("Update Preferences"));
	_assertEqual("Your preferred method of communication has been updated successfully.", _getText(_paragraph("ng-scope")), "Please check the success messsage on updating the mailing preferences.");
	//_click(_submit("Close", _in(_div("communicationPreferencesUpdateSuccessModal"))));
	_click(_submit("Go to Dashboard"));
	_click(_link("My Preferences"));
	_assert(_radio(0, _in(_label($preference))).checked);
	return $orig;
}

function deleteResponses(){
	_setStrictVisibilityCheck(true);
	clickElement(_link("Reset all my responses"));
	_setStrictVisibilityCheck(false);
	for (var $i = 0; $i < $doctors.length; $i++) {
		var $doctor = $doctors.splice(0, 1)[0];
		$removedDoctors.push($doctor);
	}
	for (var $i = 0; $i < $hospitals.length; $i++) {
		var $hospital = $hospitals.splice(0, 1)[0];
		$removedHospitals.push($hospital);
	}
	for (var $i = 0; $i < $prescriptions.length; $i++) {
		var $prescription = $prescriptions.splice(0, 1)[0];
		$removedPrescriptions.push($prescription);
	}
	$doctors = [];
	$hospitals = [];
	$prescriptions = [];
}

function goBackToFirstPreferencePage(){
	_setStrictVisibilityCheck(true);
	// Go back to first preference page
	for (var $i = 0; $i < 3; $i++) {
		_click(_link("Back"));
		_wait(1000);
	}
	_setStrictVisibilityCheck(false);
}

function verifyResponsesAreDeleted(){
	validateDoctorFrequencyPreferencePage();
	goToNextPreferencePage();
	validatePrescriptionFrequencyPreferencePage();
	goToNextPreferencePage();
	validateBlankProvidersInPreferences();
	goToNextPreferencePage();
	validateBlankPrescriptionsInPreferences();
}

function goToNextPreferencePage(){
	_setStrictVisibilityCheck(true);
	_click(_link("Next"));
	_setStrictVisibilityCheck(false);
}


function validateDoctorFrequencyPreferencePage(){
	_assertVisible(_radio("sixmonths", _in(_label("Low Use: 1-2 doctor visits and lab tests each year; preventive care too."))));
	_assertFalse(_getAttribute(_radio("sixmonths"), "checked"));
	_assertVisible(_radio("threemonths", _in(_label("Medium Use: 3-5 doctor visits and lab tests with an x-ray each year; one or more small treatments done in doctorâ€™s office; often the care is for an ongoing health problem."))));
	_assertTrue(_getAttribute(_radio("threemonths"), "checked"));
	_assertVisible(_radio("everymonth", _in(_label("High Use: 6 or more doctor visits and a number of lab tests; a surgery, therapy or other treatment in an outpatient center plus follow-up care."))));
	_assertFalse(_getAttribute(_radio("everymonth"), "checked"));
	_assertVisible(_radio("everytwoweeks", _in(_label("Very High Use: a hospital stay, high cost radiology scans or outpatient treatment; more than 6 doctor visits with lab tests and other care."))));
	_assertFalse(_getAttribute(_radio("everytwoweeks"), "checked"));
}

function validatePrescriptionFrequencyPreferencePage(){
	_assertVisible(_radio("none", _in(_label("Low Use: 1-2 prescriptions during the year for brief illness."))));
	_assertFalse(_getAttribute(_radio("none"), "checked"));
	_assertVisible(_radio("onetofour", _in(_label("Medium Use: 1 prescription each month for a health problem; also may need several short-term medications."))));
	_assertTrue(_getAttribute(_radio("onetofour"), "checked"));
	_assertVisible(_radio("fivetoten", _in(_label("High Use: 2 prescriptions each month for health problems; often higher cost medications."))));
	_assertFalse(_getAttribute(_radio("fivetoten"), "checked"));
	_assertVisible(_radio("morethan10", _in(_label("Very High Use: 3 or more prescriptions each month for health problems OR very high cost medications."))));
	_assertFalse(_getAttribute(_radio("morethan10"), "checked"));
}

function validateBlankProvidersInPreferences($zip){
	for (var $i = 0; $i < $doctors.length; $i++) {
		_assertNotVisible(_listItem("/doctorx.*"+$doctors[$i]+"/", _in(_list("providerSelectedListUl"))));
	}
	for (var $i = 0; $i < $hospitals.length; $i++) {
		_assertNotVisible(_listItem("/hospitalx.*"+$hospitals[$i]+"/", _in(_list("providerSelectedListUl"))));
	}
	_assertVisible(_textbox("providerZipcode"));
	_assertEqual($zip, _getValue(_textbox("providerZipcode")));
}

function validateBlankPrescriptionsInPreferences(){
	for (var $i = 0; $i < $prescriptions.length; $i++) {
		_assertNotVisible(_div($prescriptions[$i].dosage, _in(_div("selectedDrugsContainer"))));
	}
}

function selectMedicalServiceUse($optionNumber){
	_setStrictVisibilityCheck(true);
	_check(_radio("LEVEL" + $optionNumber));
	_setStrictVisibilityCheck(false);
}

function selectPrescriptionDrugUse($optionNumber){
	_setStrictVisibilityCheck(true);
	_check(_radio("LEVEL" + $optionNumber));
	_setStrictVisibilityCheck(false);
}
