_includeOnce("../lib/util.sah");
_includeOnce("PlanSelection.sah");

var $Preferences = true;
var $prefPageIndex = 0;
var $backToPreferences = _link("/Back/");
var $nextPreferences = _link("/Next/");
var $resetPreferences;
var $nextPreferences;

var $skipPreferences = _submit("Skip to View Plans");
var $doctorVisits = [_radio("sixmonths"), _radio("threemonths"), _radio("everymonth"), _radio("everytwoweeks")];
var $monthlyPrescriptions = [_radio("none"), _radio("onetofour"), _radio("fivetoten"), _radio("morethan10")];
var $childrensDental = _checkbox("pediatric");
var $acupuncture = _checkbox("acupuncture");
var $viewPlans = _submit("/" + "View Plans" + "/i");

var $doctors = [], $hospitals = [], $prescriptions = [], $removedDoctors = [], $removedHospitals = [],
    $removedPrescriptions = [], $optionalBenefit = [];

function goBackToPreferences() {
    clickElement(_link("Back to preferences"));
    $prefPageIndex = 0;
    verifyElementsOfPreferencePage();
}

function removePrescription($dosage) {
    var $tempDosage = encodeForRegEx($dosage);
    _assertVisible(_div("/" + $tempDosage + "/", _in(_div("selectedDrugsContainer"))));
    _click(_span("x", _in(_div("/" + $tempDosage + "/"))));
    _assertNotVisible(_div($dosage, _in(_div("selectedDrugsContainer"))));
    for (var $index = 0; $index < $prescriptions.length; $index++) {
        if ($prescriptions[$index].dosage == $dosage) {
            var $prescription = $prescriptions.splice($index, 1)[0];
            $removedPrescriptions.push($prescription);
            _log($prescription);
            break;
        }
    }
}

function clickNextPreferences() {
    _click($nextPreferences);
    $prefPageIndex++;
    verifyElementsOfPreferencePage();
}


function verifyElementsOfPreferencePage() {
    var $infoParagraph;
    _setStrictVisibilityCheck(true);
    _assertVisible($skipPreferences);
    _assertVisible(_heading1("Tell Us about Your Health Care Needs"));
    //_assertVisible(_heading2("K:pd.label.title.message29"+":"),"Verify text -(Optional) Please Answer the questions below");

    _assertVisible(_submit("/Reset all My Responses/i"));
    if ($prefPageIndex > 0) {
        _assertVisible($backToPreferences);
    }
    if ($prefPageIndex == 0) {
        _assertContainsText("(Optional) Please answer the questions below", _div("rightpanel"));
        _assertContainsText("Choose the category below that best describes the ", _div("myPereferences"));
        _assertContainsText("use you expect for the year.", _div("myPereferences"));
        _assertContainsText("For families, choose the category that best fits the person who probably will need the most medical services in the year.", _div("myPereferences"));
        _assertVisible(_label("Medium Use: 3-5 doctor visits and lab tests with an x-ray each year; one or more small treatments done in doctor\u2019s office; often the care is for an ongoing health problem."));
        _assert(_getAttribute(_radio("LEVEL2"), "checked"));
        _assertVisible(_label("High Use: 6 or more doctor visits and a number of lab tests; a surgery, therapy or other treatment in an outpatient center plus follow-up care."));
        _assertVisible(_label("Very High Use: a hospital stay, high cost radiology scans or outpatient treatment; more than 6 doctor visits with lab tests and other care."));
        $infoParagraph = _paragraph(0, _in(_div("myPereferences")));// get attribute of info
        _assertVisible($nextPreferences);
    } else if ($prefPageIndex == 1) {
        _assertVisible(_fieldset("Choose the category below that best describes the prescription drug use you expect for the year. For families, choose the category that best fits the person who probably will need the most drugs in the year."));

	
        

        _assertVisible(_label("Low Use: 1-2 prescriptions during the year for brief illness."));
        _assertVisible(_label("Medium Use: 1 prescription each month for a health problem; also may need several short-term medications."));
        _assert(_getAttribute(_radio("LEVEL2"), "checked"));
        _assertVisible(_label("High Use: 2 prescriptions each month for health problems; often higher cost medications."));
        _assertVisible(_label("Very High Use: 3 or more prescriptions each month for health problems OR very high cost medications."));
        _assertVisible($nextPreferences);
    } else if ($prefPageIndex == 2) {

        _assertContainsText("(Optional) Please answer the questions below", _div("rightpanel"))
        _assertVisible(_label("/" + "Add up to 5 prescription drugs to see if they are covered by your plan. Do you know?" + "/"));
        _assertVisible(_textbox("drugName"));
        _assertEqual("", _getValue(_textbox("drugName")));

        _assertVisible(_paragraph("alert alert-info"));
        _assertEqual("Important Disclaimers: Although we make every effort to make this drug preferences list as accurate as possible, health plans may occasionally change the prescriptions drugs they cover." +
            " In addition, some drugs that do not appear in the prescription drug list may be covered as medical benefits under a health plan and therefore may not display in this list." +
            " A health insurance company can change its list of covered drugs at any time. Inclusion in the drug list does not imply coverage, as certain drugs may require prior authorization, step therapy or quantity limits." +
            " To confirm that a particular drug is covered by a particular plan, call the insurance company or go to their website. Check the MNsure website(opens in a new window) for contact information" +
            " and a link to the covered drug lists.", _getText(_paragraph("alert alert-info")));


        _assertVisible($nextPreferences);
    } else if ($prefPageIndex == 3) {

        _assertContainsText("(Optional) Please answer the questions below", _div("rightpanel"))
        _assertVisible(_fieldset("Are any of these optional benefits important to have as part of your qualified health plan? " +
            "Note: Some qualified health plans include children's dental and some do not. If you would like to put qualified health plans that " +
            "include children's dental coverage at the top of the list, please check the box. If you select a qualified health plan that does not include children's dental," +
            " you will have the option to buy a stand-alone children's dental plan."));

        _assertVisible(_checkbox("Children's Dental"));
        _assertVisible(_checkbox("HSA-Eligible"));

        _assertVisible(_submit("View Plans"));
    }
	
	_assertContainsText("This information will not be stored and will not be shared with any third party or insurance company. " +
        "This tool is anonymous, and the information you provide will not have any effect on your insurance premiums, " +
        "cost sharing or eligibility for coverage.", _paragraph("/small/"));
	
    _setStrictVisibilityCheck(false);
}

function selectDoctor($name, $zip) {
    _setValue(_textbox("providerZipcode"), $zip);
    if (!_isVisible(_list("providerTypeDropdown"))) {
        _click(_link("providerTypeId"));
    }
    _click(_link("/" + "Doctor" + "/", _in(_list("providerTypeDropdown"))));
    _assertEqual("Search by doctor name", _getAttribute(_textbox("providerName"), "placeholder"));
    _setValue(_textbox("providerName"), $name);
    _wait(1500);
    _call(_link("/" + $name + "/").click());
    _assertVisible(_listItem("/" + "Doctor" + "x.*" + $name + "/", _in(_list("providerSelectedListUl"))));
    _assertVisible(_link("x", _in(_listItem("/" + "Doctor" + "x.*" + $name + "/", _in(_list("providerSelectedListUl"))))));
    $doctors.push($name);
}

function selectDoctorTwice($name, $zip) {
    selectDoctor($name, $zip);
    _setValue(_textbox("providerName"), $name);
}

function removeDoctor($name) {
    _assertVisible(_listItem("/" + "Doctor" + " x.*" + $name + "/", _in(_list("providerSelectedListUl"))));
    _click(_link("x", _in(_listItem("/" + "Doctor" + " x.*" + $name + "/", _in(_list("providerSelectedListUl"))))));
    _assertNotVisible(_listItem("/" + "Doctor" + " x.*" + $name + "/", _in(_list("providerSelectedListUl"))));
    for (var $index = 0; $index < $doctors.length; $index++) {
        if ($doctors[$index] == $name) {
            var $doctor = $doctors.splice($index, 1);
            $removedDoctors.push($doctor);
            break;
        }
    }
}

function selectHospitalTwice($name, $zip) {
    selectHospital($name, $zip);
    _setValue(_textbox("providerName"), $name);
    _assert(false, "Duplicate Facility message should have been shown.");
}

function selectHospital($name, $zip) {
    _setValue(_textbox("providerZipcode"), $zip);
    if (!_isVisible(_list("providerTypeDropdown"))) {
        _click(_link("providerTypeId"));
    }
    _click(_link("/" + "Facility" + "/", _in(_list("providerTypeDropdown"))));
    _assertEqual("Search by facility name", _getAttribute(_textbox("providerName"), "placeholder"));
    _setValue(_textbox("providerName"), $name);
    _wait(1500);
    _call(_link("/" + $name + "/").click());
    _assertVisible(_listItem("/" + $name + "/", _in(_list("providerSelectedListUl"))));
    _assertVisible(_link("x", _in(_listItem("/" + $name + "/", _in(_list("providerSelectedListUl"))))));
    $hospitals.push($name);
}

function removeHospital($name) {
    _assertVisible(_listItem("/" + "Facility" + " x " + $name + "/", _in(_list("providerSelectedListUl"))));
    _click(_link("x", _in(_listItem("/" + "Facility" + " x " + $name + "/", _in(_list("providerSelectedListUl"))))));
    _assertNotVisible(_listItem("/" + "Facility" + " x " + $name + "/", _in(_list("providerSelectedListUl"))));
    for (var $index = 0; $index < $hospitals.length; $index++) {
        if ($hospitals[$index] == $name) {
            var $hospital = $hospitals.splice($index, 1);
            $removedHospitals.push($hospital);
            break;
        }
    }
}

function selectPrescription($name, $dosage, $genericName) {
    _setValue(_textbox("drugName"), "");
    _lockWindow();
    _focusWindow();
    _setValue(_textbox("drugName"), $name);
    _wait(5000, _isVisible(_image("loading")));
    _wait(5000, !_isVisible(_image("loading")));
 	//_click(_link("/" + $name + "/"));
	//_click(_link("Atorvastatin"));
	//_click(_link("Balsalazide Disodium"));
	_click(_link($name));
    _unlockWindow();
    var $tempDosage = encodeForRegEx($dosage);
    _click(_radio("drugDosage", _in(_label("/" + $tempDosage + "/"))));
    _click(_submit("Select Your Dosage"));
	_assertExists(_div("x"+$dosage));
	    //_assertVisible(_div($tempDosage, _in(_div("selectedDrugsContainer"))));
    //_assertVisible(_div("/x" + $tempDosage + "/", _in(_div("selectedDrugsContainer"))))

    if ($genericName) {
        var $tempGenericName = encodeForRegEx($genericName + " (Generic Name)");
        _assertVisible(_div("/" + $tempGenericName + "/", _under(_div("/" + $tempDosage + "/", _in(_div("selectedDrugsContainer"))), 10)));

    } else {
        $genericName = "";
    }
    $prescriptions.push({
            "name": $name,
            "dosage": $dosage,
            "genericName": $genericName
        }
    );
}

function verifyMaxedOutProviders() {
    _assertTrue(_getAttribute(_textbox("providerName"), "disabled"));
    _assertTrue(_getAttribute(_select("providerDistance"), "disabled"));
    _assertTrue(_getAttribute(_textbox("providerZipcode"), "disabled"));
    _assertTrue(_getAttribute(_link("providerTypeId"), "disabled"));
}

function verifyDisabledPrescriptions() {
    _assertTrue(_getAttribute(_textbox("drugName"), "disabled"));
}

function searchNonExistantPrescription($name) {
    _lockWindow();
    _focusWindow();
    _setStrictVisibilityCheck(true);
    _type(_textbox("drugName"), $name);
    _wait(2000, _isVisible(_image("loading")));
    _wait(5000, !_isVisible(_image("loading")));
    _assertVisible(_link("No results found"));
    _setStrictVisibilityCheck(false);
    _unlockWindow();
}

function searchNonExistantDoctor($name, $zip) {
    _setStrictVisibilityCheck(true);
    _setValue(_textbox("providerZipcode"), $zip);
    if (!_isVisible(_list("providerTypeDropdown"))) {
        _click(_link("providerTypeId"));
    }
    _click(_link("/" + "Doctor" + "/", _in(_list("providerTypeDropdown"))));
    _assertEqual("Search by doctor name", _getAttribute(_textbox("providerName"), "placeholder"));
    _setValue(_textbox("providerName"), $name);
    _wait(1500);
    _assertVisible(_link("No results found"));
    _setStrictVisibilityCheck(false);
}

function searchNonExistantHospital($name, $zip) {
    _setStrictVisibilityCheck(true);
    _setValue(_textbox("providerZipcode"), $zip);
    if (!_isVisible(_list("providerTypeDropdown"))) {
        _click(_link("providerTypeId"));
    }
    _click(_link("/" + "Facility" + "/", _in(_list("providerTypeDropdown"))));
    _assertEqual("Search by facility name", _getAttribute(_textbox("providerName"), "placeholder"));
    _setValue(_textbox("providerName"), $name);
    _wait(1500);
    _assertVisible(_link("No results found"));
    _setStrictVisibilityCheck(false);
}

function clickSkipPreferences() {
    _click($skipPreferences);
    $onDentalPage = undefined;
    verifyElementsOnPlanPage();
}

function clickBackToPreferences() {
    _click($backToPreferences);
    $prefPageIndex = 0;
    verifyElementsOfPreferencePage();
}

//[_radio("sixmonths"), _radio("threemonths"), _radio("everymonth"), _radio("everytwoweeks")];
function selectDoctorVisits($index) {
    if ($index === undefined) {
        $index = 1;
    }
    _click($doctorVisits[$index]);
}

function selectMonthlyPrescriptions($index) {
    if ($index === undefined) {
        $index = 1;
    }
    _click($monthlyPrescriptions[$index]);
}

function selectChildrensDental($bool) {
    if ($bool === undefined) {
        $bool = true;
    }
    if ($bool) {
        _check($childrensDental);
    } else {
        _uncheck($childrensDental);
    }
}

function selectAcupuncture($bool) {
    if ($bool === undefined) {
        $bool = true;
    }
    _assertVisible($acupuncture);
    if ($bool) {
        _check($acupuncture);
    } else {
        _uncheck($acupuncture);
    }
}

function clickViewPlans($isCSREnabled, $aptcAmount, $zip, $coverageStartDate, $noOfAdults, $noOfChildren, $showCatastrophic, $ShowCSROnAllTiles, $customGrouping, $customGroupMem, $isOnCap) {
    clickElement($viewPlans);// click View Plans button
	    if ($isOnCap != "YES") {
        verifyElementsOnPlanPage($isCSREnabled, $aptcAmount, $zip, $coverageStartDate, $noOfAdults, $noOfChildren, $showCatastrophic, $ShowCSROnAllTiles, $customGrouping, $customGroupMem);
    }
}

function verifyNotificationPreferences() {
    var $preferences = _collectAttributes("_label", "/.*/", "sahiText", _in(_div("controls", _rightOf(_label("I would like to receive information by:")))));
    _assertEqual(4, $preferences.length, "The number of preferences is not 4. The options shown are: " + $preferences);
    var $options = ["Email", "Postal Mail", "Both (E-mail and Postal Mail)", "None"];
    for (var $i = 0; $i < $preferences.length; $i++) {
        _assertEqual($options[$i], $preferences[$i], "Preferences option shown does not match the expected option.");
    }
}

function selectNotificationPreference($preference) {
    var $preferences = _collect("_radio", "/.*/", _in(_div("controls", _rightOf(_label("I would like to receive information by:")))));
    var $orig;
    for (var $i = 0; $i < $preferences.length; $i++) {
        if (_getAttribute($preferences[$i], "checked")) {
            $orig = _getText(_parentNode($preferences[$i]))
            break;
        }
    }
    _click(_radio(0, _in(_label($preference))));
    if ($preference == "None") {
        _assertEqual("You have opted out of all notifications. Information will only be available through your Secure Inbox.", _getText(_paragraph(0, _in(_parentNode(_div("/Important/"))))));
        _click(_submit("Ok", _in(_parentNode(_div("/Important/")))));
    }
    _click(_submit("Update Preferences"));
    _assertEqual("Your preferred method of communication has been updated successfully.", _getText(_paragraph("ng-scope")), "Please check the success messsage on updating the mailing preferences.");
    //_click(_submit("Close", _in(_div("communicationPreferencesUpdateSuccessModal"))));
    _click(_submit("Go to Dashboard"));
    _click(_link("My Preferences"));
    _assert(_radio(0, _in(_label($preference))).checked);
    return $orig;
}

function deleteResponses() {
    _setStrictVisibilityCheck(true);
    //clickElement(_link("Reset all my responses"));
    _click(_submit("/Reset all My Responses/i"));
    _setStrictVisibilityCheck(false);
//	for (var $i = 0; $i < $doctors.length; $i++) {
//		var $doctor = $doctors.splice(0, 1)[0];
//		$removedDoctors.push($doctor);
//	}
//	for (var $i = 0; $i < $hospitals.length; $i++) {
//		var $hospital = $hospitals.splice(0, 1)[0];
//		$removedHospitals.push($hospital);
//	}
    for (var $i = 0; $i < $prescriptions.length; $i++) {
        var $prescription = $prescriptions.splice(0, 1)[0];
        $removedPrescriptions.push($prescription);
    }
//	$doctors = [];
//	$hospitals = [];
    $prescriptions = [];
    $optionalBenefit = [];
}

function goBackToFirstPreferencePage() {
    _setStrictVisibilityCheck(true);
    // Go back to first preference page
    for (var $i = 0; $i < 3; $i++) {
        _click(_link("Back"));
        _wait(1000);
    }
    _setStrictVisibilityCheck(false);
}

function verifyResponsesAreDeleted() {
    validateDoctorFrequencyPreferencePage();
    goToNextPreferencePage();
    validatePrescriptionFrequencyPreferencePage();
    goToNextPreferencePage();
    validateBlankProvidersInPreferences();
    goToNextPreferencePage();
    validateBlankPrescriptionsInPreferences();
}

function goToNextPreferencePage() {
    _setStrictVisibilityCheck(true);
    clickElement(_link("/" + "Next" + "/"));
    _wait(3000);
    _setStrictVisibilityCheck(false);
}

function validateDoctorFrequencyPreferencePage() {
    _assertVisible(_radio("sixmonths", _in(_label("Low Use: 1-2 doctor visits and lab tests each year; preventive care too."))));
    _assertFalse(_getAttribute(_radio("sixmonths"), "checked"));
    _assertVisible(_radio("threemonths", _in(_label("Medium Use: 3-5 doctor visits and lab tests with an x-ray each year; one or more small treatments done in doctor\u2019s office; often the care is for an ongoing health problem."))));
    _assertTrue(_getAttribute(_radio("threemonths"), "checked"));
    _assertVisible(_radio("everymonth", _in(_label("High Use: 6 or more doctor visits and a number of lab tests; a surgery, therapy or other treatment in an outpatient center plus follow-up care."))));
    _assertFalse(_getAttribute(_radio("everymonth"), "checked"));
    _assertVisible(_radio("everytwoweeks", _in(_label("Very High Use: a hospital stay, high cost radiology scans or outpatient treatment; more than 6 doctor visits with lab tests and other care."))));
    _assertFalse(_getAttribute(_radio("everytwoweeks"), "checked"));
}

function validatePrescriptionFrequencyPreferencePage() {
    _assertVisible(_radio("none", _in(_label("Low Use: 1-2 prescriptions during the year for brief illness."))));
    _assertFalse(_getAttribute(_radio("none"), "checked"));
    _assertVisible(_radio("onetofour", _in(_label("Medium Use: 1 prescription each month for a health problem; also may need several short-term medications."))));
    _assertTrue(_getAttribute(_radio("onetofour"), "checked"));
    _assertVisible(_radio("fivetoten", _in(_label("High Use: 2 prescriptions each month for health problems; often higher cost medications."))));
    _assertFalse(_getAttribute(_radio("fivetoten"), "checked"));
    _assertVisible(_radio("morethan10", _in(_label("Very High Use: 3 or more prescriptions each month for health problems OR very high cost medications."))));
    _assertFalse(_getAttribute(_radio("morethan10"), "checked"));
}

function validateBlankProvidersInPreferences($zip) {
    for (var $i = 0; $i < $doctors.length; $i++) {
        _assertNotVisible(_listItem("/doctorx.*" + $doctors[$i] + "/", _in(_list("providerSelectedListUl"))));
    }
    for (var $i = 0; $i < $hospitals.length; $i++) {
        _assertNotVisible(_listItem("/hospitalx.*" + $hospitals[$i] + "/", _in(_list("providerSelectedListUl"))));
    }
    _assertVisible(_textbox("providerZipcode"));
    _assertEqual($zip, _getValue(_textbox("providerZipcode")));
}

function validateBlankPrescriptionsInPreferences() {
    for (var $i = 0; $i < $prescriptions.length; $i++) {
        _assertNotVisible(_div($prescriptions[$i].dosage, _in(_div("selectedDrugsContainer"))));
    }
}

function selectMedicalServiceUse($optionNumber) {
    _setStrictVisibilityCheck(true);
    _check(_radio("LEVEL" + $optionNumber));
    _setStrictVisibilityCheck(false);
}

function selectPrescriptionDrugUse($optionNumber) {
    _setStrictVisibilityCheck(true);
    _check(_radio("LEVEL" + $optionNumber));
    _setStrictVisibilityCheck(false);
}

function clickBackbuttonOnPreference() {
    _setStrictVisibilityCheck(true);
    clickElement($backToPreferences);
    _wait(3000);
    _setStrictVisibilityCheck(false);
}

function clickOptionalBenefitsOnPreference($childrenDental, $hsaEligible) {
    if ($childrenDental) {
        _check(_checkbox("pediatric"));
    }
    if ($hsaEligible) {
        _check(_checkbox("HSA Eligible"));
    }
}

function getgenericRxCode() {
    var $prescriptionCode = _getValue(_hidden("prescriptionSearchRequest", _in(_div("container"))));
    var $genericRxCode = JSON.parse($prescriptionCode);
    var $code = $genericRxCode[0]["genericRxCode"]; // this will return code for the first prescription added
    _log("Generic code  = " + $code);
    return $code;
}
	
	
	
	
	
	
	
	
	


