_includeOnce("JenkinsAndDBSetUp.sah");
_includeOnce("AgentIcon.sah");
_includeOnce("Utils.sah");

// Constants
var $SSAP_SSN_REASON_MENU_LENGTH = 5;
var $Ssap = true;
var $globalSSN;
var $eventNumber = "";
var $eventName;
var $eventDate = "";
var $sepDenied = false;
var $eventReported = "";
var $ssapPeople = [];
var $addingPerson = false;
var $editingContactInfo = false;
var $editingPrimaryContactInfo = false;
var $editingPerson = false;
var $ssapPageIndex;
var $currentPerson;
var $numberOfAdults;
var $numberOfChildren;
var $ssapEmail;
var $ssapPreferredPhone;
var $ssapSecondPhone;
var $ssapExt;
var $ssapDoB;
var $ssapHomeAddress1;
var $ssapHomeAddress2;
var $ssapHomeCity;
var $ssapHomeZip;
var $ssapMailingAddress1;
var $ssapMailingAddress2;
var $ssapMailingCity;
var $ssapMailingZip;
var $ssapSpoken;
var $ssapWritten;
var $ssapCommunication;

// Accessors
// Universal
var $ssapVerificationArray = [verifySSAPPage1, verifySSAPPage2, verifySSAPPage3, verifySSAPPage4, verifySSAPPage5, verifySSAPPage6, verifySSAPPage7,
    verifySSAPPage8, verifySSAPPage9, verifySSAPPage10, verifySSAPPage11, verifySSAPPage12, verifySSAPPage13,
    verifySSAPPage14, verifySSAPPage15, verifySSAPPage16, verifySSAPPage17, verifySSAPPage18];
var $ssapBack = _button("Back");
var $ssapSave = _span("/Save/");
var $ssapContinue = _button("Continue");
var $ssapContinue1 = _submit("Continue[2]");
var $ssapSaveAndContinueButton = _button("Save & Continue");
var $ssapSaveButton = _button("Save");
var $ssapContinueButton = _button("Continue");

// Steps menu
var $ssapStepsHeader = _heading3("Steps");
//_heading4("Steps");
var $ssapStepsStartYourApplication = _link("Start Your ApplicationBefore We BeginGet ReadyPrimary Contact InformationHelp applying for coverageApplicantsAbout Your HouseholdSummary");
var $ssapStepsFamilyAndHousehold = _link("/Family and Household/");
var $ssapStepsReviewAndSign = _link("/Review and Sign/");
//var $ssapStepover26DependentAlert=_div("over26DependentAlert");
var $ssapStepsAccessors = [$ssapStepsHeader, $ssapStepsStartYourApplication, $ssapStepsFamilyAndHousehold, $ssapStepsReviewAndSign];

// Page 1
var $ssapPage1Header = _heading1("Before We Begin");
var $ssapPage1PrivacyHeader = _heading3("Privacy of Your Information");
var $ssapPage1PrivacyCheckbox = _label("usa-checkbox__label gi-checkbox__label undefined");
var $ssapPage1Accessors = [$ssapPage1Header, $ssapPage1PrivacyHeader, $ssapPage1PrivacyCheckbox];

// Page 2
var $ssapPage2Header = _heading1("Get Ready")
var $ssapPage2Welcome = _strong("Welcome to Pennie.");
var $ssapPage2Gather = _paragraph("usa-alert__text gi-alert__info__text");
var $ssapPage2Required = _paragraph("All fields on this application marked with an asterisk (*) are required unless otherwise indicated.");
var $ssapPage2InfoHeader = _paragraph("For anyone you want to insure, you will need:");
var $ssapPage2Info = _listItem("Names");
var $ssapPage2Info1 = _listItem("Addresses");
var $ssapPage2Info2 = _listItem("Social Security Number")
var $ssapPage2Info3 = _listItem("Birthdates")
var $ssapPage2Info4 = _listItem("Document numbers for anyone with eligible Immigration statusAnyone who is seeking coverage may be required to provide documents to prove ability to enroll in coverage");
var $ssapPage2Accessors = [$ssapPage2Header, $ssapPage2Welcome, $ssapPage2Gather, $ssapPage2Required, $ssapPage2InfoHeader, $ssapPage2Info, $ssapPage2Info1, $ssapPage2Info2, $ssapPage2Info3, $ssapPage2Info4];

// Page 3
var $ssapPage3Header = _heading1("Primary Contact Information");
var $ssapHomeAddressAddress1;
var $ssapHomeAddressCity;

// Primary Contact Name
var $ssapPage3PrimaryContactNameHeader = _heading3("Primary Contact Name");
var $ssapPage3PrimaryContactNameFirstName = _textbox("firstName");
var $ssapPage3PrimaryContactNameMiddleName = _textbox("middleName");
var $ssapPage3PrimaryContactNameLastName = _textbox("lastName");
var $ssapPage3PrimaryContactNameSuffixLabel = _label("Suffix");
var $ssapPage3PrimaryContactNameSuffix = _select("suffix");

var $ssapPage3PrimaryContactNameDoBMonth = _numberbox("month");
var $ssapPage3PrimaryContactNameDoBDate = _numberbox("date");
var $ssapPage3PrimaryContactNameDoBYear = _numberbox("year");
var $ssapPage3PrimaryContactNameEmailAddress = _textbox("emailAddress");
var $ssapPage3PrimaryContactNameAccessors = [$ssapPage3PrimaryContactNameHeader, $ssapPage3PrimaryContactNameFirstName,
    $ssapPage3PrimaryContactNameMiddleName, $ssapPage3PrimaryContactNameLastName,
    $ssapPage3PrimaryContactNameSuffixLabel, $ssapPage3PrimaryContactNameSuffix,
    $ssapPage3PrimaryContactNameDoBMonth, $ssapPage3PrimaryContactNameDoBDate, $ssapPage3PrimaryContactNameDoBYear, $ssapPage3PrimaryContactNameEmailAddress];

// Primary Contact Home Address
var $ssapPage3PrimaryContactHomeAddressHeader = _heading3("Primary Contact Home Address");
var $ssapPage3PrimaryContactHomeAddressAddress1 = _textbox("Address 1");
var $ssapPage3PrimaryContactHomeAddressAddress2 = _textbox("Address 2");
var $ssapPage3PrimaryContactHomeAddressCity = _textbox("city");
var $ssapPage3PrimaryContactHomeAddressZip = _textbox("Zip");
var $ssapPage3PrimaryContactHomeAddressState = _select("state");
var $ssapPage3PrimaryContactHomeAddressCounty = _select("countyCode");
var $ssapPage3PrimaryContactHomeAddressAccessors = [$ssapPage3PrimaryContactHomeAddressHeader, $ssapPage3PrimaryContactHomeAddressAddress1,
    $ssapPage3PrimaryContactHomeAddressAddress2, $ssapPage3PrimaryContactHomeAddressCity,
    $ssapPage3PrimaryContactHomeAddressZip, $ssapPage3PrimaryContactHomeAddressState,
    $ssapPage3PrimaryContactHomeAddressCounty];

// Primary Contact Mailing Address
var $ssapPage3PrimaryContactMailingAddressHeader = _heading3("Primary Contact Mailing Address");
var $ssapPage3PrimaryContactMailingAddressSame = _label("Check if same as Primary Contact Home Address")
var $ssapPage3PrimaryContactMailingAddressAddress1 = _textbox("Address 1[1]");
var $ssapPage3PrimaryContactMailingAddressAddress2 = _textbox("Address 2[1]");
var $ssapPage3PrimaryContactMailingAddressCity = _textbox("City[1]");
var $ssapPage3PrimaryContactMailingAddressZip = _textbox("Zip[1]");
var $ssapPage3PrimaryContactMailingAddressState = _select("state[1]");
var $ssapPage3PrimaryContactMailingAddressAccessors = [$ssapPage3PrimaryContactMailingAddressHeader, $ssapPage3PrimaryContactMailingAddressSame,
    $ssapPage3PrimaryContactMailingAddressAddress1, $ssapPage3PrimaryContactMailingAddressAddress2,
    $ssapPage3PrimaryContactMailingAddressCity, $ssapPage3PrimaryContactMailingAddressZip,
    $ssapPage3PrimaryContactMailingAddressState];

// Primary Contact Phone
var $ssapPage3PrimaryContactPhoneHeader = _heading3("Primary Contact Phone");
var $ssapPage3PrimaryContactPhoneMobilePhoneNumber = _textbox("Mobile Phone Number");
var $ssapPage3PrimaryContactPhoneHomePhoneNumber = _textbox("Home Phone Number");
var $ssapPage3PrimaryContactPhoneHomePhoneNumberExtension = _textbox("phoneExtension");
var $ssapPage3PrimaryContactPhoneAccessors = [$ssapPage3PrimaryContactPhoneHeader, $ssapPage3PrimaryContactPhoneMobilePhoneNumber,
    $ssapPage3PrimaryContactPhoneHomePhoneNumber, $ssapPage3PrimaryContactPhoneHomePhoneNumber,
    $ssapPage3PrimaryContactPhoneHomePhoneNumberExtension];

// Primary Contact Preferences
var $ssapPage3PrimaryContactPreferencesHeader = _heading3("Primary Contact Preferences")
var $ssapPage3PrimaryContactPreferencesSpokenLanguage = _select("preferredSpokenLanguage");
var $ssapPage3PrimaryContactPreferencesWrittenLanguage = _select("preferredWrittenLanguage");
var $ssapPage3PrimaryContactPreferencesEmail = _label("Email Address")
var $ssapPage3PrimaryContactPreferencesPostalMail = _label("Postal Mail")
var $ssapPage3PrimaryContactPreferencesGoPaperless = _label("Go Paperless");
var $ssapPage3PrimaryContactPreferencesGoPaperless1095 = _label("Go Paperless[1]");
var $ssapPage3PrimaryContactPreferencesPostalMail1095 = _label("Postal Mail[1]")
var $ssapPage3PrimaryContactPreferencesAccessors = [$ssapPage3PrimaryContactPreferencesHeader, $ssapPage3PrimaryContactPreferencesSpokenLanguage,
    $ssapPage3PrimaryContactPreferencesWrittenLanguage, $ssapPage3PrimaryContactPreferencesEmail,
    $ssapPage3PrimaryContactPreferencesPostalMail, $ssapPage3PrimaryContactPreferencesGoPaperless, $ssapPage3PrimaryContactPreferencesGoPaperless1095, $ssapPage3PrimaryContactPreferencesPostalMail1095];

// Page 4
var $ssapPage4Header = _heading1("Help applying for coverage");

// Who is Helping You?
var $ssapPage4HelpingHeader = _heading3("Who is Helping you?");
var $ssapPage4HelpingParagraph = _fieldset("Is anyone helping you with this application?")
var $ssapPage4HelpingSomeoneHelping = _label("Someone is helping me");
var $ssapPage4HelpingMyself = _label("I am filling out this application for myself and/or my family");
var $ssapPage4HelpingAccessors = [$ssapPage4HelpingHeader, $ssapPage4HelpingParagraph, $ssapPage4HelpingSomeoneHelping, $ssapPage4HelpingMyself];

// Authorized Representative
var $ssapPage4AuthorizedBullets = [_label("Yes"), _label("No")];
// Authorized Representative Contact Information
var $ssapPage4AuthorizedFirstName = _textbox("firstName");
var $ssapPage4AuthorizedMiddleName = _textbox("middleName");
var $ssapPage4AuthorizedLastName = _textbox("lastName");
var $ssapPage4AuthorizedSuffix = _select("suffix");
var $ssapPage4AuthorizedEmail = _textbox("emailAddress");
var $ssapPage4AuthorizedContactAccessors = [$ssapPage4AuthorizedFirstName, $ssapPage4AuthorizedMiddleName, $ssapPage4AuthorizedLastName, $ssapPage4AuthorizedSuffix, $ssapPage4AuthorizedEmail];

// Authorized Representative Home Address
var $ssapPage4AuthorizedAddress1 = _textbox("streetAddress1");
var $ssapPage4AuthorizedAddress2 = _textbox("streetAddress2");
var $ssapPage4AuthorizedCity = _textbox("city");
var $ssapPage4AuthorizedZip = _textbox("postalCode");
var $ssapPage4AuthorizedState = _select("state");
var $ssapPage4AuthorizedHomeAccessors = [$ssapPage4AuthorizedAddress1, $ssapPage4AuthorizedAddress2, $ssapPage4AuthorizedCity, $ssapPage4AuthorizedZip, $ssapPage4AuthorizedState];

// Authorized Representative Phone
var $ssapPage4AuthorizedMobile = _textbox("appscr54_phoneNumber");
var $ssapPage4AuthorizedHome = _textbox("appscr54_homePhoneNumber");
var $ssapPage4AuthorizedHomeExt = _textbox("appscr54_homeExt");
var $ssapPage4AuthorizedWork = _textbox("appscr54_workPhoneNumber");
var $ssapPage4AuthorizedWorkExt = _textbox("appscr54_workExt");
var $ssapPage4AuthorizedPhoneAccessors = [$ssapPage4AuthorizedMobile, $ssapPage4AuthorizedHome, $ssapPage4AuthorizedHomeExt, $ssapPage4AuthorizedWork, $ssapPage4AuthorizedWorkExt];

// Page 5
var $ssapPage5Header = _span("Applicants");

// Who needs health insurance?
var $ssapPage5WhoHeader = _heading3("Who needs health insurance?");
var $ssapPage5WhoMeOnly = _label("page_05_applyingForhouseHold_label0");
var $ssapPage5WhoMeAndOthers = _label("page_05_applyingForhouseHold_label1");
var $ssapPage5WhoOthers = _label("page_05_applyingForhouseHold_label2");
var $ssapPage5WhoAccessors = [$ssapPage5WhoHeader, $ssapPage5WhoMeOnly, $ssapPage5WhoMeAndOthers, $ssapPage5WhoOthers];

// Page 6

var $ssapPage6Header = _heading1("About Your Household");
var $ssapPage6AddMemberButton = _button("Add person");
// Person Information
var $ssapPage6InfoFirstName = _textbox("firstName");
var $ssapPage6InfoMiddleName = _textbox("middleName");
var $ssapPage6InfoLastName = _textbox("lastName");
var $ssapPage6InfoSuffix = _select("suffix");
var $ssapPage6InfoDoB = _div("MonthDayYear");
var $ssapPage6InfoSeekingCoverage = _span("Are you seeking coverage?");

// Page 7
var $ssapPage7Header = _heading1("/Summary/");

// These are the people in your household
var $ssapPage7PeopleHeader = _heading3("Household Members");
var $ssapPage7MemberAddressHeading = _heading3("Household members addresses");
var $ssapPage7PeopleAccessors = [$ssapPage7PeopleHeader, $ssapPage7MemberAddressHeading];


// Page 8
var $ssapPage8Header = _heading1("Get Ready");
var $ssapPage8AlertText = _paragraph("usa-alert__text gi-alert__info__text");
var $ssapPage8SaveWarning = _paragraph("usa-alert__text gi-alert__info__text");
var $ssapPage8AlertMandatoryText = _paragraph("All fields on this Family & Household section marked with an asterisk (*) are required unless otherwise indicated.");
var $ssapPage8Checklist = _listItem("Social Security Number");
var $ssapPage8ImmigrationList = _listItem("Document numbers for anyone with eligible Immigration statusAnyone who is seeking coverage may be required to provide documents to prove ability to enroll in coverage");
var $ssapPage8Accessors = [$ssapPage8Header, $ssapPage8SaveWarning, $ssapPage8Checklist, $ssapPage8AlertText, $ssapPage8AlertMandatoryText, $ssapPage8ImmigrationList];

// Page 9
var $ssapPage9Header = _heading1("Personal Information");
var $ssapPage9Name;

// Gender
var $ssapPage9GenderHeader = _fieldset("/Gender/");
var $ssapPage9GenderBullets = [_label("Male"), _label("Female")];
var $ssapPage9GenderAccessors = [$ssapPage9GenderHeader];
$ssapPage9GenderAccessors.push.apply($ssapPage9GenderAccessors);

// SSN
var $ssapPage9SSNHeader;
var $ssapPage9SSNBullets = [_label("Yes"), _label("No")];
var $ssapPage9SSN = _textbox("socialSecurityNumber");
var $ssapPage9SSNSameHeader;
var $ssapPage9SSNSameBullets = [_label("Yes"), _label("No")];
var $ssapPage9SSNNotSameHeader;
var $ssapPage9SSNNotSameFirstName = _textbox("firstNameOnSSNCard");
var $ssapPage9SSNNotSameMiddleName = _textbox("middleNameOnSSNCard");
var $ssapPage9SSNNotSameLastName = _textbox("lastNameOnSSNCard");
//var $ssapPage9SSNNotSameSuffix = _select("suffix");
var $ssapPage9SSNNotSameSuffix = _select("suffixOnSSNCard");
var $ssapPage9NoSSNHeader = _heading3("If no Social Security Number is available please select from the following explanations");
var $ssapPage9NoSSNReason = _select("reasonableExplanationForNoSSN");

// Page 10
var $ssapPage10Header = _heading1("/Immigration Status/");
var $ssapPage10Name;

// Is ______ ______ a U.S. citizen or U.S. national?
var $ssapPage10CitizenshipHeader;
var $ssapPage10CitizenshipBullets = [_label("Yes"), _label("No")];

// Is _____ ________ a naturalized citizen?
var $ssapPage10NaturalizedHeader;
var $ssapPage10NaturalizedBullets = [_label("Yes[1]"), _label("No[1]")];

// Document Type
var $ssapPage10DocumentHeader = _div("Please select a document typeNaturalization Certificate");
var $ssapPage10DocumentBullets = [_label("Naturalization Certificate"), _label("Certificate of Citizenship")]
var $ssapPage10DocumentAccessors = [$ssapPage10DocumentHeader];
$ssapPage10DocumentAccessors.push.apply($ssapPage10DocumentAccessors, $ssapPage10DocumentBullets);

// Naturalization Certificate
var $ssapPage10NaturalizationAlienNumber = _textbox("alienNumber");
var $ssapPage10NaturalizationNumber = _textbox("sevisId");
var $ssapPage10NaturalizationAccessors = [$ssapPage10NaturalizationAlienNumber, $ssapPage10NaturalizationNumber]

// Certificate of Citizenship
var $ssapPage10CertificateAlienNumber = _textbox("alienNumber");
var $ssapPage10CertificateNumber = _textbox("sevisId");
var $ssapPage10CertificateAccessors = [$ssapPage10CertificateAlienNumber, $ssapPage10CertificateNumber];

// Immigration
var $ssapPage10Immigration;

// Document Type
var $ssapPage10DocTypeHeader = _div("/Please select a document type/");
var $ssapPage10DocTypeBullets = [_label("Permanent Resident Card “Green Card”, I−551"), _label("Temporary I−551 Stamp (on passport or I−94, I−94A)"),
    _label("Machine Readable Immigrant Visa (With Temporary I-551 Language)"), _label("Employment Authorization Card (EAD, I-766)"),
    _label("Arrival/Departure Record (I-94, I-94A)"), _label("Arrival/Departure Record in Foreign Passport (I-94)"), _label("Foreign Passport"),
    _label("Reentry Permit (I-327)"), _label("Refugee Travel Document (I-571)"), _label("Certificate of Eligibility for Nonimmigrant (F-1) Student Status (I-20)"), _label("Certificate of Eligibility for Exchange Visitor (J-1) Status (DS2019)")]

var $ssapPage10DocTypeAccessors = [$ssapPage10DocTypeHeader];
$ssapPage10DocTypeAccessors.push.apply($ssapPage10DocTypeAccessors, $ssapPage10DocTypeBullets);

// Perm Res Card
var $ssapPage10PermResCardAlienNumber = _textbox("alienNumber");
var $ssapPage10PermResCardNumber = _textbox("cardNumber");
// var $ssapPage10PermResCardExpire = _div("MonthDayYear");

var $ssapPage10PermResCardExpireMonth = _numberbox("month");
var $ssapPage10PermResCardExpireDate = _numberbox("date");
var $ssapPage10PermResCardExpireYear = _numberbox("year");

var $ssapPage10PermResCardAccessors = [$ssapPage10PermResCardAlienNumber, $ssapPage10PermResCardNumber,
    $ssapPage10PermResCardExpireMonth, $ssapPage10PermResCardExpireDate, $ssapPage10PermResCardExpireYear];

// Temp Stamp
var $ssapPage10TempStampAlienNumber = _textbox("alienNumber");
var $ssapPage10TempStampPassportNumber = _textbox("foreignPassportOrDocumentNumber");
var $ssapPage10TempStampCountry = _select("foreignPassportCountryOfIssuance");
// var $ssapPage10TempStampExpire = _div("MonthDayYear");

var $ssapPage10TempStampExpireMonth = _numberbox("month");
var $ssapPage10TempStampExpireDate = _numberbox("date");
var $ssapPage10TempStampExpireYear = _numberbox("year");

var $ssapPage10TempStampAccessors = [$ssapPage10TempStampAlienNumber, $ssapPage10TempStampPassportNumber, $ssapPage10TempStampCountry,
    $ssapPage10TempStampExpireMonth, $ssapPage10TempStampExpireDate, $ssapPage10TempStampExpireYear];

// Visa
var $ssapPage10VisaAlienNumber = _textbox("alienNumber");
var $ssapPage10VisaPassportNumber = _textbox("foreignPassportOrDocumentNumber");
var $ssapPage10VisaCountry = _select("foreignPassportCountryOfIssuance");
//var $ssapPage10VisaExpire = _div("MonthDayYear");

var $ssapPage10VisaExpireMonth = _numberbox("month");
var $ssapPage10VisaExpireDate = _numberbox("date");
var $ssapPage10VisaExpireYear = _numberbox("year");

var $ssapPage10VisaNumber = _textbox("visaNumber");
var $ssapPage10VisaAccessors = [$ssapPage10VisaAlienNumber, $ssapPage10VisaPassportNumber, $ssapPage10VisaCountry,
    $ssapPage10VisaExpireMonth, $ssapPage10VisaExpireDate, $ssapPage10VisaExpireYear, $ssapPage10VisaNumber];

// Employment Card
var $ssapPage10EmploymentCardAlienNumber = _textbox("alienNumber");
var $ssapPage10EmploymentCardNumber = _textbox("cardNumber");
var $ssapPage10EmploymentCardExpire = _div("MonthDayYear");

var $ssapPage10EmploymentCardExpireMonth = _numberbox("month");
var $ssapPage10EmploymentCardExpireDate = _numberbox("date");
var $ssapPage10EmploymentCardExpireYear = _numberbox("year");
var $ssapPage10EmploymentCardAccessors = [$ssapPage10EmploymentCardAlienNumber, $ssapPage10EmploymentCardNumber,
    $ssapPage10EmploymentCardExpireMonth, $ssapPage10EmploymentCardExpireDate, $ssapPage10EmploymentCardExpireYear];

// Arrival
var $ssapPage10ArrivalI94Number = _textbox("i94Number");
var $ssapPage10ArrivalIDNumber = _textbox("/SEVISId/i");
// var $ssapPage10ArrivalExpire = _div("MonthDayYear");

var $ssapPage10ArrivalExpireMonth = _numberbox("month");
var $ssapPage10ArrivalExpireDate = _numberbox("date");
var $ssapPage10ArrivalExpireYear = _numberbox("year");
var $ssapPage10ArrivalAccessors = [$ssapPage10ArrivalI94Number, $ssapPage10ArrivalIDNumber,
    $ssapPage10ArrivalExpireMonth, $ssapPage10ArrivalExpireDate, $ssapPage10ArrivalExpireYear];

// Arrival Foreign
var $ssapPage10ArrivalForeignI94Number = _textbox("i94Number");
var $ssapPage10ArrivalForeignPassportNumber = _textbox("foreignPassportOrDocumentNumber");
var $ssapPage10ArrivalForeignCountry = _select("foreignPassportCountryOfIssuance");
// var $ssapPage10ArrivalForeignExpire = _div("MonthDayYear")//

var $ssapPage10ArrivalForeignExpireMonth = _numberbox("month");
var $ssapPage10ArrivalForeignExpireDate = _numberbox("date");
var $ssapPage10ArrivalForeignExpireYear = _numberbox("year");

var $ssapPage10ArrivalForeignVisaNumber = _textbox("visaNumber");
var $ssapPage10ArrivalForeignIDNumber = _textbox("/SEVISId/i");
var $ssapPage10ArrivalForeignAccessors = [$ssapPage10ArrivalForeignI94Number, $ssapPage10ArrivalForeignPassportNumber, $ssapPage10ArrivalForeignCountry,
    $ssapPage10ArrivalForeignExpireMonth, $ssapPage10ArrivalForeignExpireDate, $ssapPage10ArrivalForeignExpireYear,
    $ssapPage10ArrivalForeignVisaNumber, $ssapPage10ArrivalForeignIDNumber];

// Foreign Pass
var $ssapPage10ForeignPassI94Number = _textbox("i94Number");
var $ssapPage10ForeignPassNumber = _textbox("foreignPassportOrDocumentNumber");
var $ssapPage10ForeignPassCountry = _select("foreignPassportCountryOfIssuance");
// var $ssapPage10ForeignPassExpire = _div("MonthDayYear");
var $ssapPage10ForeignPassExpireMonth = _numberbox("month");
var $ssapPage10ForeignPassExpireDate = _numberbox("date");
var $ssapPage10ForeignPassExpireYear = _numberbox("year");
var $ssapPage10ForeignPassIDNumber = _textbox("/SEVISId/i");
var $ssapPage10ForeignPassAccessors = [$ssapPage10ForeignPassI94Number, $ssapPage10ForeignPassNumber, $ssapPage10ForeignPassCountry,
    $ssapPage10ForeignPassExpireMonth, $ssapPage10ForeignPassExpireDate, $ssapPage10ForeignPassExpireYear, $ssapPage10ForeignPassIDNumber];

// Reentry
var $ssapPage10ReentryAlienNumber = _textbox("alienNumber");
// var $ssapPage10ReentryExpire = _div("MonthDayYear");
var $ssapPage10ReentryExpireMonth = _numberbox("month");
var $ssapPage10ReentryExpireDate = _numberbox("date");
var $ssapPage10ReentryExpireYear = _numberbox("year");

var $ssapPage10ReentryAccessors = [$ssapPage10ReentryAlienNumber, $ssapPage10ReentryExpireMonth, $ssapPage10ReentryExpireDate, $ssapPage10ReentryExpireYear];

// Refugee
var $ssapPage10RefugeeAlienNumber = _textbox("alienNumber");
// var $ssapPage10RefugeeExpire = _div("MonthDayYear");
var $ssapPage10RefugeeExpireMonth = _numberbox("month");
var $ssapPage10RefugeeExpireDate = _numberbox("date");
var $ssapPage10RefugeeExpireYear = _numberbox("year");

var $ssapPage10RefugeeAccessors = [$ssapPage10RefugeeAlienNumber, $ssapPage10RefugeeExpireMonth, $ssapPage10RefugeeExpireDate, $ssapPage10RefugeeExpireYear];

// Nonimmigrant
var $ssapPage10NonimmigrantIDNumber = _textbox("/SEVISId/i");
var $ssapPage10NonimmigrantI94Number = _textbox("i94Number");
var $ssapPage10NonimmigrantPassportNumber = _textbox("foreignPassportOrDocumentNumber");
var $ssapPage10NonimmigrantCountry = _select("foreignPassportCountryOfIssuance");
// var $ssapPage10NonimmigrantExpire = _div("MonthDayYear");
var $ssapPage10NonimmigrantExpireMonth = _numberbox("month");
var $ssapPage10NonimmigrantExpireDate = _numberbox("date");
var $ssapPage10NonimmigrantExpireYear = _numberbox("year");
var $ssapPage10NonimmigrantAccessors = [$ssapPage10NonimmigrantIDNumber, $ssapPage10NonimmigrantI94Number, $ssapPage10NonimmigrantPassportNumber,
    $ssapPage10NonimmigrantCountry, $ssapPage10NonimmigrantExpireMonth, $ssapPage10NonimmigrantExpireDate, $ssapPage10NonimmigrantExpireYear];

// Exchange
var $ssapPage10ExchangeIDNumber = _textbox("/SEVISId/i");
var $ssapPage10ExchangeI94Number = _textbox("i94Number");
var $ssapPage10ExchangePassportNumber = _textbox("foreignPassportOrDocumentNumber");
// var $ssapPage10ExchangeExpire = _div("MonthDayYear");
var $ssapPage10ExchangeExpireMonth = _numberbox("month");
var $ssapPage10ExchangeExpireDate = _numberbox("date");
var $ssapPage10ExchangeExpireYear = _numberbox("year");

var $ssapPage10ExchangeAccessors = [$ssapPage10ExchangeIDNumber, $ssapPage10ExchangeI94Number, $ssapPage10ExchangePassportNumber,
    $ssapPage10ExchangeExpireMonth, $ssapPage10ExchangeExpireDate, $ssapPage10ExchangeExpireYear];

// Same name
var $ssapPage10SameNameHeader;
var $ssapPage10SameNameBullets = [_label("Yes[2]"), _label("No[2]")];
var $ssapPage10SameNameFirstName = _textbox("firstName");
var $ssapPage10SameNameMiddleName = _textbox("middleName");
var $ssapPage10SameNameLastName = _textbox("lastName");
var $ssapPage10SameNameSuffix = _select("suffix");

// Documents
var $ssapPage10DocumentsHeader;
var $ssapPage10DocumentsList = [_label("Certification From U.S. Department of Health and Human Services (HHS) Office of Refugee Resettlement (ORR)"), _label("Office of Refugee Resettlement (ORR) Eligibility Letter (if Under 18)"), _label("Cuban/Haitian Entrant"), _label("Document Indicating Withholding of Removal"), _label("Resident of American Samoa"),
    _label("Administrative Order Staying Removal Issued by the Department of Homeland Security")];

// Primary Residence
var $ssapPage10ResidenceHeader;
var $ssapPage10ResidenceBullets = [_label("Yes[3]"), _label("No[3]")];

// Military
var $ssapPage10MilitaryHeader;
var $ssapPage10MilitaryBullets = [_label("Yes[4]"), _label("No[4]")];

// Page 11
var $ssapPage11Header = _heading1("Ethnicity and Race");
var $ssapPage11Name;

// Is ____ hispanic
var $ssapPage11HispanicHeader;
var $ssapPage11HispanicBullets = [_label("Yes"), _label("No")];

// Ethnicity
var $ssapPage11EthnicityHeader = _fieldset("/Ethnicity/");
var $ssapPage11EthnicityOptions;
var $ssapPage11EthnicityOther = _textbox("ethnicityLabel");

// Race
var $ssapPage11RaceHeader = _fieldset("Race (check all that apply)");
var $ssapPage11RaceOptions;
var $ssapPage11RaceOther = _textbox("raceLabel");

// Page 12
var $ssapPage12Header = _heading1("Household Addresses");

// Where Household Members Live
var $ssapPage12LivingHeader = _heading3("Where Household Members Live");
var $ssapPage12LivingInstructions = _paragraph("/Do any of the people below live at an address other than " + $ssapHomeAddressAddress1 + ", " + $ssapHomeAddressCity + ", NV,/");


// Page 13
// Constants
var $SSAP_PAGE_13_STATE_LENGTH = 34;

// Accessors
var $ssapPage13Header = _heading1("Additional Information");

// Family and Household
var $ssapPage13FamilyHeader = _heading1("American Indian/Alaska Native");
var $ssapPage13FamilyInstructions = _paragraph("Are any of the people below American Indian/Alaska Native?");
var $ssapPage13FamilyOptions;
var $ssapPage13FamilyAccessors;

// Page 07
var $ssapPage07Header = _heading1("Household Relationship");

// Household Relationship Details
var $ssapPage07HouseholdHeader = _heading3("Household Relationship Details");
var $ssapPage07HouseholdInstructions;
var $ssapPage07HouseholdAccessors;

// Page 15
var $ssapPage15Header = _heading1("Summary");

// Household Information Review and Confirmation
var $ssapPage15InfoHeader = _heading3("Review and Confirm");
var $ssapPage15InfoInstructions = _paragraph("Here is the information you provided about everyone who is part of your household. Please take a moment to review and double-check the information. If you see any mistakes, please edit them now.")
var $ssapPage15InfoAccessors = [$ssapPage15InfoHeader, $ssapPage15InfoInstructions];

// Page 16
var $ssapPage16Header = _heading1("Review and Sign");
var $ssapPage16Accessors = [$ssapPage16Header];

// Page 17
var $ssapPage17Header = _div("Household and Demographic Information DownloadPrint");
var $ssapPage17ReviewHeader = _heading1("Final Review");
var $ssapPage17ReviewDownload = _span("Download");
var $ssapPage17ReviewPrint = _span("Print");
var $ssapPage17ReviewAccessors = [$ssapPage17Header, $ssapPage17ReviewHeader, $ssapPage17ReviewDownload, $ssapPage17ReviewPrint];

// Page 18
var $ssapPage18Header = _heading1("Sign and Submit");
var $ssapPage18NobodyIncarcerated = _label("No. No one listed on this health insurance application is incarcerated (in prison or jail).");
var $ssapPage18IncarceratedOptions;
var $ssapPage18UseIncomeBullets = [_label("I agree"), _label("I disagree")];
var $ssapPage18SixtyDays = _label("gi-checkbox-label[1]");
var $ssapPage18Perjury = _label("gi-checkbox-label[2]");
var $ssapPage18SignatureHeader;
var $ssapPage18Signature = _textbox("signature");
var $ssapPage18SubmitApp = _button("/Submit Application/i");
var $ssapPage18Accessors;

// Qualifying Event Details popup
var $ssapQualifyingEventDetailsHeader = _heading2("Qualifying Event Details");
var $ssapQualifyingEventDetailsEvent = _select("sepEvent");
var $ssapQualifyingEventDetailsDate = _div("MonthDayYear");
var $ssapQualifyingEventDetailsSubmit = _button("/Submit Application/i");
var $ssapQualifyingEventDetailsAccessors = [$ssapQualifyingEventDetailsHeader, $ssapQualifyingEventDetailsEvent, $ssapQualifyingEventDetailsDate, $ssapQualifyingEventDetailsSubmit];

// Page 19
var $ssapPage19Header = _heading1("Application Complete");
var $ssapPage19Qualify = _heading4("You qualify for Special Enrollment Period");
var $ssapPage19DoNotQualify = _heading4("Special Enrollment Period Not Granted");
var $ssapPage19Back = _link("Go to Dashboard");
var $ssapPage19Accessors;
if (!$sepDenied) {
    var $ssapPage19Accessors = [$ssapPage19Header, $ssapPage19Qualify, $ssapPage19Back];
}

function SsapPerson($num, $firstName, $middleName, $lastName, $suffix, $doB) {
    this.$num = $num;
    this.$firstName = $firstName;
    this.$middleName = $middleName;
    this.$lastName = $lastName;
    this.$suffix = $suffix;
    this.$doB = $doB;

    // Information
    this.$applying;
    this.$gender;
    this.$SSN;
    this.$SSNName;
    this.$citizen;
    this.$homeAddress1;
    this.$homeAddress2;
    this.$homeCity;
    this.$homeZip;
    this.$mailingAddress1;
    this.$mailingAddress2;
    this.$mailingCity;
    this.$mailingZip;
    this.$native;

    // Functions
    this.fullName = function ($bool) {
        var $fullName;
        if ($bool && this.$suffix) {
            $fullName = this.$suffix + " " + this.$firstName;
        } else {
            $fullName = this.$firstName;
        }
        if (this.$middleName && this.$middleName !== "") {
            $fullName += " " + this.$middleName;
        }
        $fullName += " " + this.$lastName;
        return $fullName;
    };

    this.verify = function () {
        // Set accessors
        var $fullName = this.fullName();
        this.$personName = _span($fullName, _in(_div("householdMemberSummary")));
        this.$edit = _button("Edit[" + this.$num + "]");

        var $date = this.$doB;
        if ($date.indexOf("/") == -1) {
            var $formatedDate = $date.substring(0, 2) + "/" + $date.substring(2, 4) + "/" + $date.substring(4, 8);
            this.$doBAccessor = _span($formatedDate, _in(_div("householdMemberSummary")));
        } else {
            this.$doBAccessor = _span($date, _in(_div("householdMemberSummary")));
        }
        var $applying = _span(this.$applying, _in(_div("householdMemberSummary")));

        //Verify accessors
        _assertVisible(this.$personName);
        _assertVisible(this.$edit);
        _assertVisible(this.$doBAccessor);
        _assertVisible($applying);

    };
}

// Universal
function verifySSAPPage($pageToVerify) {
    if ($currentPerson === undefined) {
        $currentPerson = 0;
    }
    verifyAgentIcon();
    _log($currentPerson);
    if ($pageToVerify >= 9 && $pageToVerify <= 11) {
        $ssapVerificationArray[$pageToVerify - 1]($currentPerson);
    } else {
        $ssapVerificationArray[$pageToVerify - 1]();
    }
    if ($pageToVerify > 0) {
        _assertVisible($ssapBack);
    }
    _setStrictVisibilityCheck(true);

    if (_isVisible(_heading1("Get Ready")) || $pageToVerify == 14 || $pageToVerify == 15 || $pageToVerify == 16 || _isVisible(_heading1("Final Review"))) {
        _assertVisible($ssapContinueButton);
    } else if (_isVisible(_heading1("Sign and Submit"))) {
        _assertVisible(_span("/Submit Application/i"));
    } else if ($pageToVerify >= 2) {
        _assertVisible($ssapSaveAndContinueButton);
    } else {
        _assertVisible($ssapSaveButton)
    }
    _setStrictVisibilityCheck(false);
}

function ssapAlertEmail() {
    _alert($ssapEmail);
}

function clickBackButton() {
    // Click button
    _click($ssapBack);

    // Update state
    if ($ssapPageIndex === 8 && $currentPerson > 0) {
        $ssapPageIndex = 10;
        $currentPerson--;
    } else if ($ssapPageIndex === 14 && $ssapPeople.length === 1) {
        $ssapPageIndex -= 2;
    } else {
        $ssapPageIndex--;
    }

    // Verify correct page
    verifySSAPPage();
}

function clickSaveButton($pageToVerify) {
    // Click button
    _setStrictVisibilityCheck(true);
    _click($ssapSave);
    verifySSAPPage($pageToVerify);
    _setStrictVisibilityCheck(false);
}

function clickContinueForNonSeekingMember() {
    _assertVisible(_paragraph("This household member(s) will need to apply separately and will be marked as \"not seeking coverage\" in this application:"));
    _click($ssapContinue1);
    // Verify page 15
    verifySSAPPage15();
}

function clickContinueButton($pageToVerify, $verifyPage) {
    if (_isVisible(_heading1("Household Relationship"))) {
        _assertVisible(_heading1("Household Relationship"));
    } else if (_isVisible(_button("Save & Continue"))) {
        _click(_button("Save & Continue"));
    } else if (_isVisible(_button("Continue"))) {
        _click(_button("Continue"));
    } else {
        _logExceptionAsFailure("No Continue/Save&Continue button");
    }

    if ($pageToVerify === 11 && $currentPerson < $ssapPeople.length && !$editingPerson) {
        $ssapPageIndex = 8;
        $currentPerson++;
        _log("No of persons are >>> " + $currentPerson);
    } else if ($ssapPageIndex === 12 && $ssapPeople.length === 1) {
        $ssapPageindex += 2;
        _log("$ssapPageIndex " + $ssapPageIndex);
    } else {
        $ssapPageIndex++;
        _log("$ssapPageIndex " + $ssapPageIndex);
    }
    if (!$verifyPage) {
        // Verify correct page
        verifySSAPPage($pageToVerify);

    }
}

// Steps menu
function verifySSAPMenu() {
    // Verify accessors
    verifyArray($ssapStepsAccessors);
}

// Page 1
function verifySSAPPage1() {
    // Verify page 1 accessors
    verifyArray($ssapPage1Accessors);
}

function selectPrivacyCheckboxForSSAP($bool) {
    // Parse params
    if ($bool === undefined) {
        $bool = true;
    }

    // Set field
    _click($ssapPage1PrivacyCheckbox);
}

// Page 2
function verifySSAPPage2() {
    // Verify page 2 accessors
    verifyArray($ssapPage2Accessors);
}

// Page 3
function verifySSAPPage3() {

    // Uncheck same checkbox

    // Verify page 3 accessors
    _assertVisible($ssapPage3Header);
    verifyArray($ssapPage3PrimaryContactNameAccessors);
    verifyArray($ssapPage3PrimaryContactHomeAddressAccessors);
    verifyArray($ssapPage3PrimaryContactMailingAddressAccessors);
    verifyArray($ssapPage3PrimaryContactPhoneAccessors);
    verifyArray($ssapPage3PrimaryContactPreferencesAccessors);

}

function enterContactNameForPrimary($firstName, $middleName, $lastName, $suffix, $doB, $email, $autopopulated) {
    // Parse params
    if (!$email) {
        $email = $signupEmail;
    }
    if (!$firstName) {
        var $randomName = randomString($FIELD_LENGTH);
        $firstName = $randomName.charAt(0).toUpperCase() + $randomName.slice(1).toLowerCase();

    }
    if (!$lastName) {
        $lastName = $firstName;
    }

    // Put primary info in array of people
    var $person = new SsapPerson(0, $firstName, $middleName, $lastName, $suffix, $doB);
    if ($ssapPeople.length == 0) {
        $ssapPeople.push($person);
    } else {
        $ssapPeople[0].$firstName = $firstName;
        $ssapPeople[0].$middleName = $middleName;
        $ssapPeople[0].$lastName = $lastName;
        $ssapPeople[0].$suffix = $suffix;
        $ssapPeople[0].$doB = $doB;
        $ssapPeople[0].$email = $email;

    }

    if ($autopopulated != "YES") {
        // Set fields
        _setValue($ssapPage3PrimaryContactNameFirstName, $firstName);
        _setValue($ssapPage3PrimaryContactNameMiddleName, $middleName);
        _setValue($ssapPage3PrimaryContactNameLastName, $lastName);
        if ($suffix) {
            _setSelected($ssapPage3PrimaryContactNameSuffix, $suffix);
        }
        _type(_numberbox("month"), $doB.substring(0, 2));
        _type(_numberbox("date"), $doB.substring(3, 5));
        _type(_numberbox("year"), $doB.substring(6, 10));

        _setValue($ssapPage3PrimaryContactNameEmailAddress, $email);
    }
    // Update state
    $ssapEmail = $email;
    $ssapDoB = $doB;
    return $firstName;
}

var $primaryOutsideIdaho;

function enterContactHomeAddress($address1, $address2, $city, $zip, $state, $county, $autopopulated) {
    // Parse params
    if ($county === undefined) {
        $county = 1;
    }

    // Update state
    if ($ssapPeople.length === 0) {
        $ssapPeople.push(new SsapPerson());
    }

    ////@Firefox Issue
    if (_isFF()) {
        _lockWindow(20000);
        _focusWindow();
        _focus($ssapPage3PrimaryContactHomeAddressAddress1);
        _typeNative($address1);
        _typeKeyCodeNative(java.awt.event.KeyEvent.VK_TAB);

        _focusWindow();
        _focus($ssapPage3PrimaryContactHomeAddressAddress2);
        _typeNative($address2);
        _typeKeyCodeNative(java.awt.event.KeyEvent.VK_TAB);

        _focusWindow();
        _focus($ssapPage3PrimaryContactHomeAddressCity);
        _typeNative($city);
        _typeKeyCodeNative(java.awt.event.KeyEvent.VK_TAB);
        _unlockWindow();
    } else if ($autopopulated != "YES") {
        // Set fields
        _setValue($ssapPage3PrimaryContactHomeAddressAddress1, $address1);
        _setValue($ssapPage3PrimaryContactHomeAddressAddress2, $address2);
        _setValue($ssapPage3PrimaryContactHomeAddressCity, $city);
    }
    if (_isVisible(_div("Report a Change"))) {
        _setSelected($ssapPage3PrimaryContactHomeAddressState, $state);
        if (($state != "Idaho") || ($state != "ID")) {
            $primaryOutsideIdaho = "Yes";
            $ssapMailingAddress1 = $ssapPeople[0].$homeAddress1;
            $ssapMailingAddress2 = $ssapPeople[0].$homeAddress2;
            $ssapMailingCity = $ssapPeople[0].$homeCity;
            $ssapMailingZip = $ssapPeople[0].$homeZip;
            $ssapPeople[0].$mailingAddress1 = $ssapPeople[0].$homeAddress1;
            $ssapPeople[0].$mailingAddress2 = $ssapPeople[0].$homeAddress2;
            $ssapPeople[0].$mailingCity = $ssapPeople[0].$homeCity;
            $ssapPeople[0].$mailingZip = $ssapPeople[0].$homeZip;
        }
    } else if ($autopopulated != "YES") {
        _setValue($ssapPage3PrimaryContactHomeAddressState, $state);
        _setValue($ssapPage3PrimaryContactHomeAddressZip, $zip);
        _setSelected($ssapPage3PrimaryContactHomeAddressCounty, $county);
    }
    if (_isVisible(_div("Report a Change"))) {
        $date = calculateEventDate();
        _setValue(_textbox("changeinaddressdate"), $date);
        _click(_radio("updateOtrMem[1]"));
        _click(_link("OK"));
    }
    if ($editingPrimaryContactInfo == true) {
        $ssapPageIndex = 6;
    }
    $ssapHomeAddress1 = $address1;
    $ssapHomeAddress2 = $address2;
    $ssapHomeCity = $city;
    $ssapHomeZip = $zip;
    $ssapPeople[0].$homeAddress1 = $address1;
    $ssapPeople[0].$homeAddress2 = $address2;
    $ssapPeople[0].$homeCity = $city;
    $ssapPeople[0].$homeZip = $zip;
}

function enterContactMailingAddress($bool, $address1, $address2, $city, $zip, $state, $county, $autopopulated) {
    // Parse params
    if ($bool === undefined) {
        $bool = false;
    }

    // Update state
    $ssapHomeAddressAddress1 = $address1;
    $ssapHomeAddressCity = $city;
    $ssapMailingAddress1 = $address1;
    $ssapMailingAddress2 = $address2;
    $ssapMailingCity = $city;
    $ssapMailingZip = $zip;
    // Set fields
    if ($bool) {
        $ssapPeople[0].$mailingAddress1 = "Same as home address";
        $ssapMailingAddress1 = "Same as home address";
        _check($ssapPage3PrimaryContactMailingAddressSame);
    } else {
        $ssapPeople[0].$mailingAddress1 = $address1;
        $ssapPeople[0].$mailingAddress2 = $address2;
        $ssapPeople[0].$mailingCity = $city;
        $ssapPeople[0].$mailingZip = $zip;
        //_uncheck($ssapPage3PrimaryContactMailingAddressSame);
        _click($ssapPage3PrimaryContactMailingAddressSame);
    }
    if ($autopopulated != "YES") {
        _setValue($ssapPage3PrimaryContactMailingAddressAddress1, $address1);
        _setValue($ssapPage3PrimaryContactMailingAddressAddress2, $address2);
        _setValue($ssapPage3PrimaryContactMailingAddressCity, $city);
        _setValue($ssapPage3PrimaryContactMailingAddressZip, $zip);
        _setSelected(_select("mailing_primary_county"), $county);
        _setSelected($ssapPage3PrimaryContactMailingAddressState, $state);
    }
}

function enterContactPhone($mobile, $home, $ext) {
    if (typeof ($mobile) === 'object') {
        $mobile = $mobile[0] + "" + $mobile[1] + "" + $mobile[2];
    }
    if (typeof ($home) === 'object') {
        $home = $home[0] + "" + $home[1] + "" + $home[2];
    }
    // Set fields
    _setValue($ssapPage3PrimaryContactPhoneMobilePhoneNumber, "");
    _setValue($ssapPage3PrimaryContactPhoneMobilePhoneNumber, $mobile);

    _setValue($ssapPage3PrimaryContactPhoneHomePhoneNumber, "");
    _setValue($ssapPage3PrimaryContactPhoneHomePhoneNumber, $home);

    _setValue($ssapPage3PrimaryContactPhoneHomePhoneNumberExtension, "");
    _setValue($ssapPage3PrimaryContactPhoneHomePhoneNumberExtension, $ext);


    // Update state
    if ($mobile) {
        $ssapPreferredPhone = $mobile;
    }
    if ($home) {
        $ssapSecondPhone = $home;
    }
    if ($ext) {
        $ssapExt = $ext;
    }
}

function enterContactPreferences($spoken, $written, $communication, $1095) {

    // Set fields
    _setSelected($ssapPage3PrimaryContactPreferencesSpokenLanguage, $spoken);
    _setSelected($ssapPage3PrimaryContactPreferencesWrittenLanguage, $written);

    // Update state
    $ssapSpoken = $spoken;
    $ssapWritten = $written;
    if (!$communication || $communication == "Email") {
        _click($ssapPage3PrimaryContactPreferencesGoPaperless); //Go paperless
        _click(_label("Send me important alerts to this email address."));
        _click(_label("Send me important alerts to this phone number. Standard message rates may apply."));
    } else if ($communication == "Mail") {
        _click($ssapPage3PrimaryContactPreferencesPostalMail);
    }
    if (!$1095 || $1095 == "Email") {
        _click($ssapPage3PrimaryContactPreferencesGoPaperless1095);
    } else if ($communication == "Mail") {
        _click($ssapPage3PrimaryContactPreferencesPostalMail1095);
    }
    $ssapCommunication = $communication;
    _wait(5000);
}

// Page 4
function verifySSAPPage4() {
    // Verify page 4 accessors
    verifyArray($ssapPage4HelpingAccessors);
}

function selectSomeoneHelping() {
    // Click button
    _click($ssapPage4HelpingSomeoneHelping);

    // Verify form
    _assertVisible(_heading4("Authorized Representative"));
    _assertVisible(_strong("Do you want to name someone as your authorized representative?"));
}

function selectAuthorizedRepresentative($bool) {
    // Click the correct radio button
    if ($bool.toUpperCase() === "YES") {
        _click($ssapPage4AuthorizedBullets[0]);
    } else if ($bool.toUpperCase() === "NO") {
        _click($ssapPage4AuthorizedBullets[1]);
    }
}

function verifyElementsForAuthorizedRepresentative() {
    // Verify each form
    verifyArray($ssapPage4AuthorizedContactAccessors);
    verifyArray($ssapPage4AuthorizedHomeAccessors);
    verifyArray($ssapPage4AuthorizedPhoneAccessors);
}

function enterAuthorizedRepresentativeContactInfo($first, $middle, $last, $suffix, $email) {
    // Generate random if necessary
    if (!$first) {
        $first = randomString($FIELD_LENGTH);
    }
    if (!$last) {
        $last = randomString($FIELD_LENGTH);
    }
    if (!$email) {
        $email = randomString($FIELD_LENGTH) + "@example.com";
    }

    // Set fields
    _setValue($ssapPage4AuthorizedFirstName, $first);
    _setValue($ssapPage4AuthorizedMiddleName, $middle);
    _setValue($ssapPage4AuthorizedLastName, $last);
    _setSelected($ssapPage4AuthorizedSuffix, $suffix);
    _setValue($ssapPage4AuthorizedEmail, $email);
}

function enterAuthorizedRepresentativeHomeAddressInfo($addr1, $addr2, $city, $zip, $state) {
    // Set fields
    _setValue($ssapPage4AuthorizedAddress1, $addr1);
    _setValue($ssapPage4AuthorizedAddress2, $addr2);
    _setValue($ssapPage4AuthorizedCity, $city);
    _setValue($ssapPage4AuthorizedZip, $zip);
    _setSelected($ssapPage4AuthorizedState, $state);
}

function enterAuthorizedRepresentativePhone($mobile, $home, $homeExt, $work, $workExt) {
    // Generate random if necessary
    if (!$mobile) {
        $mobile = phoneGen().join("");
    }
    if (!$home) {
        $home = phoneGen().join("");
    }
    if (!$homeExt) {
        $homeExt = randomString(4, true);
    }
    if (!$work) {
        $work = phoneGen().join("");
    }
    if (!$workExt) {
        $workExt = randomString(4, true);
    }

    // Set fields
    _setValue($ssapPage4AuthorizedMobile, $mobile);
    _setValue($ssapPage4AuthorizedHome, $home);
    _setValue($ssapPage4AuthorizedHomeExt, $homeExt);
    _setValue($ssapPage4AuthorizedWork, $work);
    _setValue($ssapPage4AuthorizedWorkExt, $workExt);
}

function enterAuthorizedRepresentativeOrganization($org, $id) {
    // Generate random if necessary
    if (!$org) {
        $org = randomString($FIELD_LENGTH) + " " + randomString($FIELD_LENGTH);
    }
    if (!$id) {
        $id = randomString($FIELD_LENGTH, true);
    }

    // Set fields
    _check(_radio("cmpnyNameAndOrgRadio54_1"));
    _setValue(_textbox("authorizeCompanyName"), $org);
    _setValue(_textbox("authorizeOrganizationId"), $id);
}

function enterAuthorizedRepresentativeSign() {
    // Variables
    var $fullName = $ssapPeople[0].fullName();

    // Set fields
    _click(_radio("makeOtherizedRepresentativeSignature"));
    _setValue(_textbox("authorizeSignature"), $fullName);
}

function selectUnableToSign() {
    // Set field
    _click(_radio("makeOtherizedRepresentativeLater"));
}

function clickHelpingMyself() {
    // Click button
    _click($ssapPage4HelpingMyself);
}

// Page 5
function verifySSAPPage5() {
    // Verify page 5 accessors
    _assertVisible(_heading3("Who needs health insurance?"));
    verifyArray($ssapPage5WhoAccessors);
}

function selectMeOnly() {
    // Click button
    _click($ssapPage5WhoMeOnly);
}

function selectMeAndOthers() {
    // Click button
    _click($ssapPage5WhoMeAndOthers);
}

function selectOthersOnly() {
    // Click button
    _click($ssapPage5WhoOthers);
}

// Page 6
function verifySSAPPage6() {
    // Verify page 6 accessors
    _assertVisible($ssapPage6Header);

    // Verify accessors for each person
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        verifyPersonOnSSAPPage6($i);
    }
}

function verifyPersonOnSSAPPage6($num) {
    // Set accessors
    var $ssapPage6InfoFirstName = _textbox("firstName[" + $num + "]");
    var $ssapPage6InfoMiddleName = _textbox("middleName[" + $num + "]");
    var $ssapPage6InfoLastName = _textbox("lastName[" + $num + "]");
    var $ssapPage6InfoSuffix = _select("suffix[" + $num + "]");
    var $ssapPage6DoBMonth = _numberbox("month[" + $num + "]");
    var $ssapPage6DoBDate = _numberbox("date[" + $num + "]");
    var $ssapPage6DoBYear = _numberbox("year[" + $num + "]");


    var $ssapPage6InfoSeekingCoverage = _span("Are you seeking coverage?[" + $num + "]");

    var $ssapPage6AddMemberMessage = _heading3("Need to include someone else?");
    var $ssapPage6AddMemberButton2 = _button("Add person", _in(_div("subsection")));

    // Verify acessors;
    var $ssapPage6InfoAccessors = [$ssapPage6InfoFirstName, $ssapPage6InfoMiddleName, $ssapPage6InfoLastName,
        $ssapPage6InfoSuffix, $ssapPage6DoBMonth, $ssapPage6DoBDate, $ssapPage6DoBYear, $ssapPage6InfoSeekingCoverage, $ssapPage6AddMemberButton,
        $ssapPage6AddMemberMessage, $ssapPage6AddMemberButton2];
    verifyArray($ssapPage6InfoAccessors);
}

function markAsSeekingCoverage($ssap, $index) {
    _assertVisible(_span("Are you seeking coverage?[" + $index + "]"));
    _click(_span("Are you seeking coverage?[" + $index + "]"));
    $ssap[$index].$applying = "Yes";
    _log("$ssapPeople " + JSON.stringify($ssap[0]));
    _log("$ssapPeople " + JSON.stringify($ssap[1]));
    _log("$ssapPeople " + JSON.stringify($ssap));
    return $ssap;
}

function enterInformation($num, $firstName, $middleName, $lastName, $suffix, $doB, $seeking, $relationshipToApplicant) {
    // Put primary info in array of people
    while ($ssapPeople[$num] === undefined) {
        -$ssapPeople.push(new SsapPerson());
    }
    $ssapPeople[$num].$homeAddress1 = $ssapHomeAddress1;
    $ssapPeople[$num].$homeAddress2 = $ssapHomeAddress2;
    $ssapPeople[$num].$homeCity = $ssapHomeCity;
    $ssapPeople[$num].$homeZip = $ssapHomeZip;
    $ssapPeople[$num].$mailingAddress1 = $ssapMailingAddress1;
    $ssapPeople[$num].$mailingAddress2 = $ssapMailingAddress2;
    $ssapPeople[$num].$mailingCity = $ssapMailingCity;
    $ssapPeople[$num].$mailingZip = $ssapMailingZip;
    $ssapPeople[$num].$num = $num;
    $ssapPeople[$num].$firstName = $firstName;
    $ssapPeople[$num].$middleName = $middleName;
    $ssapPeople[$num].$lastName = $lastName;
    $ssapPeople[$num].$suffix = $suffix;
    $ssapPeople[$num].$doB = $doB;
    $ssapPeople[$num].$relationshipToApplicant = $relationshipToApplicant;
    if ($seeking) {
        $ssapPeople[$num].$applying = "Yes";
    } else {
        $ssapPeople[$num].$applying = "No";
    }

    // Set accessors
    var $ssapPage6InfoFirstName = _textbox("firstName[" + $num + "]");
    var $ssapPage6InfoMiddleName = _textbox("middleName[" + $num + "]");
    var $ssapPage6InfoLastName = _textbox("lastName[" + $num + "]");
    var $ssapPage6InfoSuffix = _select("suffix[" + $num + "]");
    var $ssapPage6InfoSeekingCoverage = _label("Yes", _near(_span("Are you seeking coverage?[" + $num + "]")));//_span("Are you seeking coverage?["+$num+"]");
    var $ssapPage6InfoNotSeekingCoverage = _label("No", _near(_span("Are you seeking coverage?[" + $num + "]")));

    // Parse params
    if ($suffix === undefined || $suffix === "") {
        $suffix = "/Suffix/";
    }
    if ($num != 0) {
        // Set fields
        _setValue($ssapPage6InfoFirstName, $firstName);
        _setValue($ssapPage6InfoMiddleName, $middleName);
        _setValue($ssapPage6InfoLastName, $lastName);

        _setValue(_numberbox("month[" + $num + "]"), $doB.substring(0, 2));
        _setValue(_numberbox("date[" + $num + "]"), $doB.substring(3, 5));
        _setValue(_numberbox("year[" + $num + "]"), $doB.substring(6, 10));
    }


    if ($seeking) {
        _click($ssapPage6InfoSeekingCoverage);
    } else {
        _click($ssapPage6InfoNotSeekingCoverage);
    }

    verifySSAPPage6();
    _log("$ssapPeople " + JSON.stringify($ssapPeople));
    return $ssapPeople;
}


function resetNativeValue(element, value) {
    const valueSetter = _call(Object.getOwnPropertyDescriptor(element, 'value').set);
    const prototype = _call(Object.getPrototypeOf(element));
    const prototypeValueSetter = _call(Object.getOwnPropertyDescriptor(prototype, 'value').set);

    if (valueSetter && valueSetter !== prototypeValueSetter) {
        prototypeValueSetter.call(element, value);
    } else {
        valueSetter.call(element, value);
    }
}


function verifySSAPPage14() {
    // Update state
    $addingPerson = false;
    $editingContactInfo = false;
    $editingPrimaryContactInfo = false;

    // Verify page 7 accessors
    if (_isVisible(_heading4("Applicant 2"))) {
        _assertVisible(_heading2("About Your Household"));
        _assertVisible(_button("Page_5_rightButton"), "Verify Save Button is visible");
        _assertVisible(_button("Page_5_leftButton"), "Verify Cancel Button is visible");
        $editingContactInfo = true;
        //nv

    } else {
        _assertVisible($ssapPage7Header);
        verifyArray($ssapPage7PeopleAccessors);
    }


    // Verify each person on the page
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        $ssapPeople[$i].verify();
    }
    // Verify Address of Each Person
    verifyAddressOfMemebers();

}

function verifyAddressOfMemebers() {
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        var $fullName = $ssapPeople[0].fullName();
        _assertVisible(_heading4($fullName + " (Primary Contact)"), "Verify full name under HouseHold members Adress");
        _assertVisible(_span("Edit", _near(_heading4("/" + $fullName + "/"))));

        _assertVisible(_div($ssapPeople[$i].$homeAddress1, _near(_div("Home Address", _under(_heading4("/" + $fullName + "/"))))));
        _assertVisible(_div($ssapPeople[$i].$homeAddress2, _near(_div("Home Address", _under(_heading4("/" + $fullName + "/"))))));
        if ($i == 0) {
            _assertVisible(_div("Mailing Address"), "Verify Mailing Address is displayed for primary Contact");

        }

    }

}

function clickEditPrimary() {
    // Update state
    $editingPrimaryContactInfo = true;
    // Click the button
    _click(_button("Edit"));

    // Verify page
    verifySSAPPage();
}

function clickEdit($index) {
    // Click the button
    _click(_button("Edit[" + $index + "]"));

    // Update state
    $editingContactInfo = true;
    $ssapPageIndex = 5;

    // Verify page
    verifySSAPPage();
}

function clickRemoveApplicant($index) {
    // Click button and proceed through popup
    _click($ssapPeople[$index].$delete);
    _click(_button("Delete"));

    // Remove the person from our array
    $ssapPeople.splice($index, 1);

    // Update numbers of the people in the array
    for (var $i = $index; $i < $ssapPeople.length; $i++) {
        $ssapPeople[$i].$num = $i;
    }

    // Verify page
    verifySSAPPage(6);
}

function clickDeleteMember($index) {
    var $fullName = $ssapPeople[$index].fullName();
    _click(_span("Delete", _near(_heading3($fullName))));
    _assertNotVisible(_heading3($fullName));

    // Remove the person from our array
    $ssapPeople.splice($index, 1);

    // Verify page
    verifySSAPPage(6);
}

function clickAddMember($verifyPage) {
    // Click button
    $editingContactInfo = true;
    if (_isVisible(_button("Add Member"))) {
        _click(_button("Add Member"));
    } else {
        //nv
        _click($ssapPage6AddMemberButton);
    }
    // Update state
    $addingPerson = true;
    $ssapPageIndex = 5;
    if ($verifyPage != "NO") {
        // Verify page
        verifySSAPPage(6);
    }
}


// Page 8
function verifySSAPPage8() {
    // Verify accessors
    verifyArray($ssapPage8Accessors);
}

// Page 9
function verifySSAPPage9($num) {
    // Variables
    var $fullName = $ssapPeople[$num].fullName();

    // Set accessors
    $ssapPage9Name = _span("/" + $fullName + "/");
    var $ssapPage9Accessors = [$ssapPage9Header, $ssapPage9Name]//, $ssapPage9FamilyHeader];

    // SSN
    $ssapPage9SSNHeader = _span("/Enter " + $fullName + "'s Social Security Number.");
    var $ssapPage9SSNAccessors = [$ssapPage9SSNHeader];
    // $ssapPage9SSNAccessors.push.apply($ssapPage9SSNAccessors, $ssapPage9SSNBullets);


    // $ssapPage9SSNSameHeader = _span("/Is the name you provided the same on your Social Security Card?/");
    // var $ssapPage9SSNSameAccessors = [$ssapPage9SSNSameHeader];
    // $ssapPage9SSNSameAccessors.push.apply($ssapPage9SSNSameAccessors);
    //
    // $ssapPage9SSNNotSameHeader = _heading3("Enter the same name as shown on " + $fullName + " Social Security Card");


    var $ssapPage9SSNNotSameAccessors = [$ssapPage9SSNNotSameHeader, $ssapPage9SSNNotSameFirstName, $ssapPage9SSNNotSameMiddleName,
        $ssapPage9SSNNotSameLastName, $ssapPage9SSNNotSameSuffix];

    // Verify accessors
    _log("1. verify Array")
    verifyArray($ssapPage9Accessors);

    // Gender accessors
    _log("2. verify Array")
    verifyArray($ssapPage9GenderAccessors);

    // SSN choice accessors
    // verifyArray($ssapPage9SSNAccessors);

    // Has SSN
    // _click($ssapPage9SSNBullets[0]);
    _assertVisible($ssapPage9SSN);

    // SSN name same
    //_click($ssapPage9SSNSameBullets[0]);
    // _log("3. verify Array")
    //verifyArray($ssapPage9SSNSameAccessors);

    // SSN name different
    // _click($ssapPage9SSNSameBullets[1]);
    //_log("3. verify Array")
    //verifyArray($ssapPage9SSNNotSameAccessors);

    // No SSN
    // _click($ssapPage9SSNBullets[1]);
    // _assertVisible($ssapPage9NoSSNHeader);
    // _assertVisible($ssapPage9NoSSNReason);
}

function selectGender($gender, $index) {
    // Generate random if necessary
    if ($gender === undefined) {
        var $index = Math.floor(Math.random() * 2);
        if ($index === 0) {
            $gender = "male";
        } else {
            $gender = "female";
        }
    }
    if ($index) {
        $ssapPeople[$index].$gender = $gender.toLowerCase();
    } else {
        // Update state
        $ssapPeople[$currentPerson].$gender = $gender.toLowerCase();
    }

    // Click the correct radio button
    if ($gender.toUpperCase() === "MALE") {
        _click($ssapPage9GenderBullets[0]);
    } else if ($gender.toUpperCase() === "FEMALE") {
        _click($ssapPage9GenderBullets[1]);
    }

}

function selectHasSSN($bool, $index) {
    if ($index) {
        $currentPerson = $index;
    }

    // Click the correct radio button
    if ($bool === true || $bool.toUpperCase() === "YES") {
        if ((_isVisible(_heading4("Life Change Event: Change in Dependents"))) || (_isVisible(_span("Selected Events")))) {
            _check(_radio("snn4spouseT"));
        } else {
            _click($ssapPage9SSNBullets[0]);
        }
    } else if ($bool === false || $bool.toUpperCase() === "NO") {
        if ((_isVisible(_heading4("Life Change Event: Change in Dependents"))) || (_isVisible(_span("Selected Events")))) {
            _check(_radio("snn4spouseF"));
        } else {
            _click($ssapPage9SSNBullets[1]);
        }
    }

    // Update state
    if ($bool.toUpperCase() != "NO") {
        if ((!_isVisible(_heading4("Life Change Event: Change in Dependents"))) && (!_isVisible(_span("Selected Events")))) {
            $ssapPeople[$currentPerson].$SSN = _getValue($ssapPage9SSN);
        } else {

            $ssapPeople[$currentPerson].$SSN = _getText(_textbox("ssn1")) + _getText(_textbox("ssn2")) + _getText(_textbox("ssn3"));

        }
    }
    $ssapPeople[$currentPerson].$SSNName = $ssapPeople[$currentPerson].fullName(true);

}

function enterSSN($SSN, $index) {
    // Generate random if necessary
    if ($SSN === undefined || $SSN === null || $SSN === "null") {
        $SSN = getRandomSSN();
    }
    if ($index) {
        $ssapPeople[$index].$SSN = $SSN;
    } else {
        // Update state
        $ssapPeople[$currentPerson].$SSN = $SSN;
    }
    if (_getText(_textbox("socialSecurityNumber")) == "") {
        // Set field
        if ((_isVisible(_heading4("Life Change Event: Change in Dependents"))) || (_isVisible(_span("Selected Events")))) {
            $s = $SSN.split("-");
            _type(_textbox("ssn1"), $s[0]);
            _type(_textbox("ssn2"), $s[1]);
            _type(_textbox("ssn3"), $s[2]);
        } else {
            var $formatedSSN = $SSN.replace(/[\(\)-]/g, "");
            if (_isVisible(_heading1("Personal Information"))) {
                _setValue($ssapPage9SSN, $formatedSSN)
            } else {
                _type($ssapPage9SSN, $formatedSSN);
            }
        }

    }
    _wait(3000)
}

function enterSameSSNName($bool, $index) {
    $globalSSN = "Yes";
    // Update state
    if ($bool === true || $bool.toUpperCase() === "YES") {
        if ($index) {
            $SSNName = $ssapPeople[$index].fullName();
        } else {
            $SSNName = $ssapPeople[$currentPerson].fullName();
        }
    }

    // Click the correct radio button
    if ($bool === true || $bool.toUpperCase() === "YES") {
        if ((_isVisible(_heading4("Life Change Event: Change in Dependents"))) || (_isVisible(_span("Selected Events")))) {
            _check(_radio("samenameT"));
        } else {
            _click($ssapPage9SSNSameBullets[0]);
        }
    } else if ($bool === false || $bool.toUpperCase() === "NO") {
        if ((_isVisible(_heading4("Life Change Event: Change in Dependents"))) || (_isVisible(_span("Selected Events")))) {
            _check(_radio("samenameF"));
        } else {
            _click($ssapPage9SSNSameBullets[1]);
        }
    }
}

function enterDifferentSSNName($firstName, $middleName, $lastName, $suffix, $index) {
    // Generate random if necessary
    if ($firstName === undefined) {
        $firstName = randomString($FIELD_LENGTH);
    }
    if ($lastName === undefined) {
        $lastName = randomString($FIELD_LENGTH);
    }

    // Update state
    var $name;
    if ($suffix) {
        $name = $suffix + " " + $firstName;
    } else {
        $name = $firstName;
    }
    if ($middleName) {
        $name += " " + $middleName;
    }
    $name += " " + $lastName;
    if ($index) {
        $ssapPeople[$index].$SSNName = $name;
    } else {
        $ssapPeople[$currentPerson].$SSNName = $name;
    }

    // Set fields
    _setValue($ssapPage9SSNNotSameFirstName, $firstName);
    _setValue($ssapPage9SSNNotSameMiddleName, $middleName);
    _setValue($ssapPage9SSNNotSameLastName, $lastName);
    _setSelected($ssapPage9SSNNotSameSuffix, $suffix);
}

function enterNoSSNReason($reason) {
    // Generate random index if necessary
    if ($reason === undefined) {
        $reason = Math.floor((Math.random() * ($SSAP_SSN_REASON_MENU_LENGTH - 1))) + 1;
    }

    // Set field
    _setSelected($ssapPage9NoSSNReason, $reason);

    // Update state
    $ssapPeople[$currentPerson].$SSN = "--NA--";
    $ssapPeople[$currentPerson].$SSNName = "--NA--";
}

// Page 10
function verifySSAPPage10($num) {
    // Temporary default param; remove later
    if ($num === undefined) {
        $num = 0;
    }

    // Variables
    var $fullName = $ssapPeople[$num].fullName(true);

    // Set accessors
    $ssapPage10Name = _span("/" + $fullName + "/");
    var $ssapPage10Accessors = [$ssapPage10Header, $ssapPage10Name];

    $ssapPage10CitizenshipHeader = _span("Is " + $fullName + " a U.S. citizen or U.S. national?");
    var $ssapPage10CitizenshipAccessors = [$ssapPage10CitizenshipHeader];
    $ssapPage10CitizenshipAccessors.push.apply($ssapPage10CitizenshipAccessors, $ssapPage10CitizenshipBullets);

    $ssapPage10NaturalizedHeader = _span("/Is " + $fullName + " a naturalized citizen?/");
    var $ssapPage10NaturalizedAccessors = [$ssapPage10NaturalizedHeader];
    $ssapPage10NaturalizedAccessors.push.apply($ssapPage10NaturalizedAccessors, $ssapPage10NaturalizedBullets);

    $ssapPage10Immigration = _label("Check if " + $fullName + " has eligible immigration status");

    $ssapPage10SameNameHeader = _bold("/" + $fullName + "/");
    var $ssapPage10SameNameAccessors = [$ssapPage10SameNameHeader, $ssapPage10SameNameFirstName, $ssapPage10SameNameMiddleName,
        $ssapPage10SameNameLastName, $ssapPage10SameNameSuffix];
    $ssapPage10SameNameAccessors.push.apply($ssapPage10SameNameAccessors, $ssapPage10SameNameBullets);

    $ssapPage10DocumentsHeader = _fieldset("/Does " + $fullName + " also have any of these documents?/");
    var $ssapPage10DocumentsAccessors = [$ssapPage10DocumentsHeader];
    $ssapPage10DocumentsAccessors.push.apply($ssapPage10DocumentsAccessors, $ssapPage10DocumentsList);

    // Verify accessors
    verifyArray($ssapPage10Accessors);

    verifyArray($ssapPage10CitizenshipAccessors);

    _click($ssapPage10CitizenshipBullets[0]);
    verifyArray($ssapPage10NaturalizedAccessors);

    _click($ssapPage10NaturalizedBullets[0]);
    verifyArray($ssapPage10DocumentAccessors);


    _click($ssapPage10DocumentBullets[0]);
    verifyArray($ssapPage10NaturalizationAccessors);

    _click($ssapPage10DocumentBullets[1]);
    verifyArray($ssapPage10CertificateAccessors);

    _click($ssapPage10CitizenshipBullets[1]);
    _click($ssapPage10Immigration);
    verifyArray($ssapPage10DocTypeAccessors);

    _click($ssapPage10DocTypeBullets[0]);
    verifyArray($ssapPage10PermResCardAccessors);

    _click($ssapPage10DocTypeBullets[1]);
    verifyArray($ssapPage10TempStampAccessors);

    _click($ssapPage10DocTypeBullets[2]);
    verifyArray($ssapPage10VisaAccessors);

    _click($ssapPage10DocTypeBullets[3]);
    verifyArray($ssapPage10EmploymentCardAccessors);

    _click($ssapPage10DocTypeBullets[4]);
    verifyArray($ssapPage10ArrivalAccessors);

    _click($ssapPage10DocTypeBullets[5]);
    verifyArray($ssapPage10ArrivalForeignAccessors);

    _click($ssapPage10DocTypeBullets[6]);
    verifyArray($ssapPage10ForeignPassAccessors);

    _click($ssapPage10DocTypeBullets[7]);
    verifyArray($ssapPage10ReentryAccessors);

    _click($ssapPage10DocTypeBullets[8]);
    verifyArray($ssapPage10RefugeeAccessors);

    _click($ssapPage10DocTypeBullets[9]);
    verifyArray($ssapPage10NonimmigrantAccessors);

    _click($ssapPage10DocTypeBullets[10]);
    verifyArray($ssapPage10ExchangeAccessors);

    _click($ssapPage10CitizenshipBullets[0]);
}

function selectCitizen($bool) {
    $member = {};

    // Update state
    $ssapPeople[$currentPerson].$citizen = $bool;

    // Click the right radio button
    if ($bool === true || $bool.toUpperCase() === "YES") {
        if ((_isVisible(_heading4("Life Change Event: Change in Dependents"))) || (_isVisible(_span("Selected Events")))) {
            _click(_radio("citizenshipYes"));
        } else {
            _click($ssapPage10CitizenshipBullets[0]);
        }
    } else if (($bool === false || $bool.toUpperCase() === "NO")) {
        if ((_isVisible(_heading4("Life Change Event: Change in Dependents"))) || (_isVisible(_span("Selected Events")))) {
            _click(_radio("citizenshipNo"));
        } else {
            _click($ssapPage10CitizenshipBullets[1]);

        }
        var $str = JSON.stringify($ssapPeople);
        _log($str);
    }
    return $ssapPeople;
}

function selectHasEligibleImmigrationStatus($bool, $member) {
    var $fullName = $ssapPeople[$member].fullName(true);
    $ssapPage10Immigration = _label("Check if " + $fullName + " has eligible immigration status");
    // Parse params
    if (!$bool) {
        $bool = true;
    }
    // Set field
    if ($bool) {
        _click($ssapPage10Immigration);
    } else {
        _click($ssapPage10Immigration);
    }
}

function selectDocumentType($index) {
    _click($ssapPage10DocTypeBullets[$index]);
}

function selectIfSameNameOnDocument($boolean, $member) {
    var $fullName = $ssapPeople[$member].fullName(true);
    _assertVisible(_fieldset("Is " + $fullName + " the same name that appears on her document?"));
    if ($boolean === "Yes") {
        _click(_label("Yes[1]"));
    } else {
        _click(_label("No[1]"));
        //Verification need to do
    }
}

function selectIfPrimaryResidence($boolean, $member) {
    var $fullName = $ssapPeople[$member].fullName(true);
    _assertVisible(_fieldset("Has " + $fullName + " 's primary residence been in the U.S. since 1996?"));
    if ($boolean === "Yes") {
        _click(_label("Yes[2]"));
    } else {
        _click(_label("No[2]"));
    }
}

function selectCurrentStatus5years($boolean, $member) {
    var $fullName = $ssapPeople[$member].fullName(true);
    _assertVisible(_fieldset("Has " + $fullName + " had their current immigration status for the last 5 years?"));
    if ($boolean === "Yes") {
        _click(_label("Yes[3]"));
    } else {
        _click(_label("No[3]"));
    }
}

function goToMilitaryService() {
    _click(_button("Save & Continue"));
    _wait(1000);

    //TODO: tag PANJ
    _assertVisible(_paragraph("/Are any of these people honorably discharged veteran or active duty member of the military?/"));

    _assertVisible(_button("Save & Continue"));
}

function selectIfVeteranOrMilitaryMember($indexes) {
    if ($indexes.length == 0) {
        _click(_label("None of the Above"));
    } else {
        for (var $i = 0; $i < $indexes.length; $i++) {
            var $index = $indexes[$i];
            var $fullName = $ssapPeople[$index].fullName(true);
            _click(_label($fullName));
        }
    }

}


function selectNaturalized($bool) {
    // Click the right radio button
    if ($bool === true || $bool.toUpperCase() === "YES") {
        _click($ssapPage10NaturalizedBullets[0]);
    } else if ($bool === false || $bool.toUpperCase() === "NO") {
        _click($ssapPage10NaturalizedBullets[1]);
    }
}

function selectCitizenshipDocument($index) {
    _click(_radio("documentType[" + $index + "]"));
}

function enterNaturalizationInfo($alienNum, $natNum) {
    // Generate random if necessary
    if (!$alienNum) {
        $alienNum = randomString(9, true);
    }
    if (!$natNum) {
        $natNum = randomString($FIELD_LENGTH, true);
    }

    // Set fields
    _setValue($ssapPage10NaturalizationAlienNumber, $alienNum);
    _setValue($ssapPage10NaturalizationNumber, $natNum);
}

function enterCitizenshipCertificateInfo($alienNum, $certNum) {
    // Generate random if necessary
    if (!$alienNum) {
        $alienNum = randomString(9, true);
    }
    if (!$certNum) {
        $certNum = randomString($FIELD_LENGTH, true);
    }

    // Set fields
    _setValue($ssapPage10CertificateAlienNumber, $alienNum);
    _setValue($ssapPage10CertificateNumber, $certNum);
}

function selectImmigrationStatus($bool) {
    // Parse params
    if (!$bool) {
        $bool = true;
    }

    // Set field
    if ($bool) {
        //_check($ssapPage10Immigration);
        _click($ssapPage10Immigration);
    } else {
        //_uncheck($ssapPage10Immigration);
        _click($ssapPage10Immigration);
    }
}

function selectImmigrationDocument($index) {
    _click(_radio("docType[" + $index + "]"));
}

function enterPermResCardInfo($alienNum, $cardNum, $expire) {
    // Generate random if necessary
    if (!$alienNum) {
        $alienNum = randomString(9, true);
    }
    if (!$cardNum) {
        $cardNum = randomString(3) + randomString(10, true);
    }

    // Set fields
    _setValue($ssapPage10PermResCardAlienNumber, $alienNum);
    _setValue($ssapPage10PermResCardNumber, $cardNum);
    _log("$ssapPage10PermResCardExpire - " + $expire);
    var $expYear = getDocExpirationDate().getFullYear()
    // _setValue($ssapPage10PermResCardExpireDate, $expire);
    if ($expire) {
        //		_setValue($ssapPage10EmploymentCardExpire, $expire);
        _setValue(_numberbox("month"), $month);
        _setValue(_numberbox("date"), $day);
        _setValue(_numberbox("year"), $year);
    } else {
        _setValue(_numberbox("month"), "01");
        _setValue(_numberbox("date"), "01");
        _setValue(_numberbox("year"), $expYear);
    }
}

function enterTempStampInfo($alienNum, $passNum, $country, $expire) {
    // Generate random if necessary
    if (!$alienNum) {
        $alienNum = randomString(9, true);
    }
    if (!$passNum) {
        $passNum = randomString($FIELD_LENGTH, true);
    }

    // Set fields
    _setValue($ssapPage10TempStampAlienNumber, $alienNum);
    _setValue($ssapPage10TempStampPassportNumber, $passNum);
    _setSelected($ssapPage10TempStampCountry, $country);
    _log("$ssapPage10TempStampExpire - " + $expire);
    // _setValue($ssapPage10TempStampExpireDate, $expire);
    if ($expire) {
        //		_setValue($ssapPage10EmploymentCardExpire, $expire);
        _setValue(_numberbox("month"), $month);
        _setValue(_numberbox("date"), $day);
        _setValue(_numberbox("year"), $year);
    } else {
        _setValue(_numberbox("month"), "01");
        _setValue(_numberbox("date"), "01");
        _setValue(_numberbox("year"), $year);
    }
}

function enterVisaInfo($alienNum, $passNum, $country, $expire, $visaNum) {
    // Generate random if necessary
    if (!$alienNum) {
        $alienNum = randomString(9, true);
    }
    if (!$passNum) {
        $passNum = randomString($FIELD_LENGTH, true);
    }
    if (!$visaNum) {
        $visaNum = randomString(8, true);
    }

    // Set fields
    _setValue($ssapPage10VisaAlienNumber, $alienNum);
    _setValue($ssapPage10VisaPassportNumber, $passNum);
    _setSelected($ssapPage10VisaCountry, $country);
    _log("$ssapPage10VisaExpire expire - " + $expire)
    //_setValue($ssapPage10VisaExpireDate, $expire);
    if ($expire) {
        _setValue(_numberbox("month"), $month);
        _setValue(_numberbox("date"), $day);
        _setValue(_numberbox("year"), $year);
    } else {
        _setValue(_numberbox("month"), "01");
        _setValue(_numberbox("date"), "01");
        _setValue(_numberbox("year"), $year);
    }

    _setValue($ssapPage10VisaNumber, $visaNum);
}

function enterEmploymentCardInfo($alienNum, $cardNum, $expire, $month, $day, $year) {
    // Generate random if necessary
    if ($expire) {
        _setValue(_numberbox("month"), $month);
        _setValue(_numberbox("date"), $day);
        _setValue(_numberbox("year"), $year);
    } else {
        _setValue(_numberbox("month"), "01");
        _setValue(_numberbox("date"), "01");
        _setValue(_numberbox("year"), $year);
    }
    if (!$alienNum) {
        $alienNum = randomString(9, true);
    }
    if (!$cardNum) {
        $cardNum = randomString(3) + randomString(10, true);
    }

    // Set fields
    _setValue($ssapPage10EmploymentCardAlienNumber, $alienNum);
    _setValue($ssapPage10EmploymentCardNumber, $cardNum);

}

function enterArrivalInfo($i94Num, $idNum, $expire) {
    // Generate random if necessary
    if (!$i94Num) {
        $i94Num = randomString(11, true);
    }
    if (!$idNum) {
        $idNum = "N" + randomString(10, true);
    }

    // Set fields
    _setValue($ssapPage10ArrivalI94Number, $i94Num);
    _setValue($ssapPage10ArrivalIDNumber, $idNum);
    _("$ssapPage10ArrivalExpire - " + $expire);
    // _setValue($ssapPage10ArrivalExpire, $expire);

    if ($expire) {
        _setValue(_numberbox("month"), $month);
        _setValue(_numberbox("date"), $day);
        _setValue(_numberbox("year"), $year);
    } else {
        _setValue(_numberbox("month"), "01");
        _setValue(_numberbox("date"), "01");
        _setValue(_numberbox("year"), $year);
    }
}

function enterArrivalForeignInfo($i94Num, $passNum, $country, $expire, $visaNum, $idNum) {
    // Generate random if necessary
    if (!$i94Num) {
        $i94Num = randomString(11, true);
    }
    if (!$passNum) {
        $passNum = randomString($FIELD_LENGTH, true);
    }
    if (!$visaNum) {
        $visaNum = randomString(8, true);
    }
    if (!$idNum) {
        $idNum = "N" + randomString(10, true);
    }

    // Set fields
    _setValue($ssapPage10ArrivalForeignI94Number, $i94Num);
    _setValue($ssapPage10ArrivalForeignPassportNumber, $passNum);
    _setValue($ssapPage10ArrivalForeignCountry, $country);
    // _setValue($ssapPage10ArrivalForeignExpire, $expire);
    _log("$ssapPage10ArrivalForeignExpire - " + $expire)
    if ($expire) {
        _setValue(_numberbox("month"), $month);
        _setValue(_numberbox("date"), $day);
        _setValue(_numberbox("year"), $year);
    } else {
        _setValue(_numberbox("month"), "01");
        _setValue(_numberbox("date"), "01");
        _setValue(_numberbox("year"), $year);
    }

    _setValue($ssapPage10ArrivalForeignVisaNumber, $visaNum);
    _setValue($ssapPage10ArrivalForeignIDNumber, $idNum);
}

function enterNoticeInfo($alienNum, $i94Num) {
    // Generate random if necessary
    if (!$alienNum) {
        $alienNum = randomString(9, true);
    }
    if (!$i94Num) {
        $i94Num = randomString(11, true);
    }

    // Set fields
    _setValue($ssapPage10NoticeAlienNumber, $alienNum);
    _setValue($ssapPage10NoticeI94Number, $i94Num);
}

function enterForeignPassInfo($i94Num, $passNum, $country, $expire, $idNum) {
    // Generate random if necessary
    if (!$i94Num) {
        $i94Num = randomString(11, true);
    }
    if (!$passNum) {
        $passNum = randomString($FIELD_LENGTH, true);
    }
    if (!$idNum) {
        $idNum = "N" + randomString(10, true);
    }

    // Set fields
    _setValue($ssapPage10ForeignPassI94Number, $i94Num);
    _setValue($ssapPage10ForeignPassNumber, $passNum);
    _setSelected($ssapPage10ForeignPassCountry, $country);
    // _setValue($ssapPage10ForeignPassExpire, $expire);
    _log("$ssapPage10ForeignPassExpire - " + $expire)
    if ($expire) {
        _setValue(_numberbox("month"), $month);
        _setValue(_numberbox("date"), $day);
        _setValue(_numberbox("year"), $year);
    } else {
        _setValue(_numberbox("month"), "01");
        _setValue(_numberbox("date"), "01");
        _setValue(_numberbox("year"), $year);
    }

    _setValue($ssapPage10ForeignPassIDNumber, $idNum);
}

function enterReentryInfo($alienNum, $expire) {
    // Generate random if necessary
    if (!$alienNum) {
        $alienNum = randomString(9, true);
    }

    // Set fields
    _setValue($ssapPage10ReentryAlienNumber, $alienNum);
    // _setValue($ssapPage10ReentryExpire, $expire);
    _log("$ssapPage10ReentryExpire - " + $expire)
    if ($expire) {
        _setValue(_numberbox("month"), $month);
        _setValue(_numberbox("date"), $day);
        _setValue(_numberbox("year"), $year);
    } else {
        _setValue(_numberbox("month"), "01");
        _setValue(_numberbox("date"), "01");
        _setValue(_numberbox("year"), $year);
    }
}

function enterRefugeeInfo($alienNum, $expire) {
    // Generate random if necessary
    if (!$alienNum) {
        $alienNum = randomString(9, true);
    }

    // Set fields
    _setValue($ssapPage10RefugeeAlienNumber, $alienNum);
    // _setValue($ssapPage10RefugeeExpire, $expire);
    _log("$ssapPage10RefugeeExpire - " + $expire)
    if ($expire) {
        _setValue(_numberbox("month"), $month);
        _setValue(_numberbox("date"), $day);
        _setValue(_numberbox("year"), $year);
    } else {
        _setValue(_numberbox("month"), "01");
        _setValue(_numberbox("date"), "01");
        _setValue(_numberbox("year"), $year);
    }
}

function enterNonimmigrantInfo($idNum, $i94Num, $passNum, $country, $expire) {
    // Generate random if necessary
    if (!$idNum) {
        $idNum = "N" + randomString(10, true);
    }
    if (!$i94Num) {
        $i94Num = randomString(11, true);
    }
    if (!$passNum) {
        $passNum = randomString($FIELD_LENGTH, true);
    }

    // Set fields
    _setValue($ssapPage10NonimmigrantIDNumber, $idNum);
    _setValue($ssapPage10NonimmigrantI94Number, $i94Num);
    _setValue($ssapPage10NonimmigrantPassportNumber, $passNum);
    _setValue($ssapPage10NonimmigrantCountry, $country);
    // _setValue($ssapPage10NonimmigrantExpire, $expire);
    _log("$ssapPage10NonimmigrantExpire - " + $expire)
    if ($expire) {
        _setValue(_numberbox("month"), $month);
        _setValue(_numberbox("date"), $day);
        _setValue(_numberbox("year"), $year);
    } else {
        _setValue(_numberbox("month"), "01");
        _setValue(_numberbox("date"), "01");
        _setValue(_numberbox("year"), $year);
    }
}

function enterExchangeInfo($idNum, $i94Num, $passNum, $expire) {
    // Generate random if necessary
    if (!$idNum) {
        $idNum = "N" + randomString(10, true);
    }
    if (!$i94Num) {
        $i94Num = randomString(11, true);
    }
    if (!$passNum) {
        $passNum = randomString($FIELD_LENGTH, true);
    }
}

function selectIfSameNameOnDocuments($bool) {
    // Click the correct radio button
    if ($bool.toUpperCase() === "YES") {
        _click($ssapPage10SameNameBullets[0]);
    } else if ($bool.toUpperCase() === "NO") {
        _click($ssapPage10SameNameBullets[1]);
    }
}

function enterDocumentNameInfo($firstName, $middleName, $lastName, $suffix) {
    // Generate random if necessary
    if (!$firstName) {
        $firstName = randomString($FIELD_LENGTH);
    }
    if (!$middleName) {
        $middleName = randomString($FIELD_LENGTH);
    }
    if (!$lastName) {
        $lastName = randomString($FIELD_LENGTH);
    }

    // Set fields
    _setValue($ssapPage10SameNameFirstName, $firstName);
    _setValue($ssapPage10SameNameMiddleName, $middleName);
    _setValue($ssapPage10SameNameLastName, $lastName);
    _setSelected($ssapPage10SameNameSuffix, $suffix);
}

function selectIfUSPermanentResident($bool) {
    // Click the correct radio button
    if ($bool.toUpperCase() === "YES") {
        _click($ssapPage10ResidenceBullets[0]);
    } else if ($bool.toUpperCase() === "NO") {
        _click($ssapPage10ResidenceBullets[1]);
    }
}

function selectIfServicedMilitary($bool) {
    // Click the correct radio button
    if ($bool.toUpperCase() === "YES") {
        _click($ssapPage10MilitaryBullets[0]);
    } else if ($bool.toUpperCase() === "NO") {
        _click($ssapPage10MilitaryBullets[1]);
    }
}

function verifySSAPPage11($num) {
    $num = $num - 1;
    // Variables
    var $fullName = $ssapPeople[$num].fullName(true);

    // Set accessors
    $ssapPage11Name = _span("/" + $fullName + "/");
    var $ssapPage11Accessors = [$ssapPage11Header, $ssapPage11Name];

    $ssapPage11HispanicHeader = _span("Is " + $fullName + " of Hispanic, Latino, or Spanish origin?");
    var $ssapPage11HispanicAccessors = [$ssapPage11HispanicHeader];
    $ssapPage11HispanicAccessors.push.apply($ssapPage11HispanicAccessors, $ssapPage11HispanicBullets);

    $ssapPage11EthnicityOptions = [];
    for (var $i = 0; $i <= 3; $i++) {
        $ssapPage11EthnicityOptions.push(_label("usa-checkbox__label gi-checkbox__label undefined[" + $i + "]"));
    }
    var $ssapPage11EthnicityAccessors = [$ssapPage11EthnicityHeader];
    $ssapPage11EthnicityAccessors.push.apply($ssapPage11EthnicityAccessors, $ssapPage11EthnicityOptions);

    $ssapPage11RaceOptions = [];
    for (var $i = 4; $i <= 18; $i++) {
        $ssapPage11RaceOptions.push(_label("usa-checkbox__label gi-checkbox__label undefined[" + $i + "]"));
    }
    var $ssapPage11RaceAccessors = [$ssapPage11RaceHeader];
    $ssapPage11RaceAccessors.push.apply($ssapPage11RaceAccessors, $ssapPage11RaceOptions);

    // Verify accessors
    verifyArray($ssapPage11Accessors);
    verifyArray($ssapPage11HispanicAccessors);

    _click($ssapPage11HispanicBullets[0]);
    verifyArray($ssapPage11EthnicityAccessors);
    var $length = $ssapPage11EthnicityOptions.length;
    var $accessor = $ssapPage11EthnicityOptions[$length - 1];
    _click($accessor);
    _assertVisible($ssapPage11EthnicityOther);
    _click($accessor);

    verifyArray($ssapPage11RaceAccessors);
    $length = $ssapPage11RaceOptions.length;
    $accessor = $ssapPage11RaceOptions[$length - 1];
    _click($accessor);
    _assertVisible($ssapPage11RaceOther);
    _click($accessor);

    _click($ssapPage11HispanicBullets[1]);
}

function selectHispanic($bool) {
    // Click the correct radio button
    if ($bool.toUpperCase() === "YES") {
        _click($ssapPage11HispanicBullets[0]);
    } else if ($bool.toUpperCase() === "NO") {
        _click($ssapPage11HispanicBullets[1]);
    }
}

function selectEthnicity($index, $val) {
    // Generate random if necessary
    if ($index === undefined) {
        $index = Math.floor(Math.random() * ($ssapPage11EthnicityOptions.length - 1));
    }
    if (!$val) {
        $val = randomString($FIELD_LENGTH);
    }

    // Set other if necessary
    if ((typeof $index === 'string' || $index instanceof String) && $index.toUpperCase() === "OTHER") {
        var $accessor = $ssapPage11EthnicityOptions[$ssapPage11EthnicityOptions.length - 1];
        _check($accessor);
        _setValue($ssapPage11EthnicityOther, $val);
    } else {
        // Set field
        var $accessor = $ssapPage11EthnicityOptions[$index];
        _check($accessor);
    }
}

function selectRaceAndEthnicity($race) {
    if ($race == "AI") {
        _click(_label("American Indian or Alaska Native"));
    }
}

function selectRace($index, $val) {
    // Generate random if necessary
    if ($index === undefined) {
        $index = Math.floor(Math.random() * ($ssapPage11RaceOptions.length - 1));
    }
    if (!$val) {
        $val = randomString($FIELD_LENGTH);
    }

    // Set other if necessary
    if ((typeof $index === 'string' || $index instanceof String) && $index.toUpperCase() === "OTHER") {
        var $accessor = $ssapPage11RaceOptions[$ssapPage11RaceOptions.length - 1];
        _check($accessor);
        _setValue($ssapPage11RaceOther, $val);
    } else {
        // Set field
        var $accessor = $ssapPage11RaceOptions[$index];
        _check($accessor);
    }
}

function clickAndEnterAmericanAndAlskanNativeInfo($name, $state, $tribeName) {
    _click(_label("/" + $name + "/"));
    if (!$state) {
        _setSelected(_select("state"), "Pennsylvania");
    }
    if (!$tribeName) {
        _setSelected(_select("tribeName"), "Fort Mojave Indian Tribe (Arizona, California and New Jersey)");
    }
}

function verifySSAPPage12() {
    if ($ssapPeople.length > 1) {
        // Set accessors
        $ssapPage12LivingOptions = [];
        for (var $i = 0; $i < $ssapPeople.length + 1; $i++) {
            $ssapPage12LivingOptions.push(_label("gi-checkbox-label[" + $i + "]"));
        }

        $ssapPage12LivingAccessors = [$ssapPage12LivingHeader, $ssapPage12LivingInstructions];
        $ssapPage12LivingAccessors = $ssapPage12LivingAccessors.push.apply($ssapPage12LivingAccessors, $ssapPage12LivingOptions);

        // Verify accessors
        _assertVisible($ssapPage12Header);

        verifyArray($ssapPage12LivingAccessors);

        for (var $i = 1; $i < $ssapPeople.length; $i++) {
            var $accessor = $ssapPage12LivingOptions[$i - 1];
            _click($accessor);
            verifyAddressOfApplicant($i - 1);
            // added for nv
        }
        var $accessor = $ssapPage12LivingOptions[$ssapPeople.length - 1];
        _click($accessor);
    } else {
        _log("This Page Is not available for single user");
        verifySSAPPage13();
        $ssapPageIndex = 13;
    }
}

function verifyAddressOfApplicant($num) {
    // Variables
    var $fullName = $ssapPeople[$num].fullName();
    _assertVisible(_paragraph("/Please provide your address/"));
    _click(_submit("Add Address[" + $num + "]"));

    // Verify accessors
    _assertVisible(_textbox("streetAddress1"));
    _assertVisible(_textbox("streetAddress2"));

    _assertVisible(_textbox("city"));
    _assertVisible(_textbox("Zip"));
    _assertVisible(_select("state"));
    _assertVisible(_select("countyCode"));
    _click(_button("/Cancel/"));
}

function enterDifferentAoplicantAddress($num, $addr1, $addr2, $city, $zip, $state, $county) {
    // Variables
    $num++;
    var $index = $num - 2;

    // Default county to first option
    if (!$county) {
        $county = 1;
    }

    // Open the form
    var $accessor = $ssapPage12LivingOptions[$index];
    _check($accessor);

    // Set the fields
    _setValue(_textbox("applicant_or_non-applican_address_1" + $num), $addr1);
    _setValue(_textbox("applicant_or_non-applican_address_2" + $num), $addr2);
    _setValue(_textbox("city" + $num), $city);
    _setValue(_textbox("zip" + $num), $zip);
    _setSelected(_select("applicant_or_non-applican_state" + $num), $state);
    $accessor = _select("home_primary_county[" + ($num - 1) + "]");
    _setSelected($accessor, $county);
}

function selectOutsideIdaho($num, $bool, $city, $zip, $state) {
    // Variables
    $num++;
    var $index = $num - 2;

    // Open the form
    var $accessor = $ssapPage12LivingOptions[$index];
    _check($accessor);

    // Click the correct radio button
    if ($bool.toUpperCase() === "YES") {
        _click(_radio("TemporarilyLivingOutsideIndicatorYes" + $num));
    } else if ($bool.toUpperCase() === "NO") {
        $index++;
        _click(_radio("TemporarilyLivingOutsideIndicatorNo[" + $index + "]"));
    }

    // Set fields if necessary
    if ($bool.toUpperCase() === "YES") {
        _setValue(_textbox("applicant2city" + $num), $city);
        _setValue(_textbox("applicant-2-zip" + $num), $zip);
        _setSelected(_select("applicant_or_non-applican_stateTemp" + $num), $state);
    }
}

function ssapPage12SetNobody() {
    // Set field
    var $accessor = $ssapPage12LivingOptions[$ssapPeople.length - 1];
    _check($accessor);
}

function verifySSAPPage13() {
    // Update state
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        $ssapPeople[$i].$native = "No";
    }

    // Set accessors
    $ssapPage13FamilyOptions = [];
    for (var $i = 0; $i <= $ssapPeople.length; $i++) {
        $ssapPage13FamilyOptions.push(_label("gi-checkbox-label[" + $i + "]"));
    }
    $ssapPage13FamilyAccessors = [$ssapPage13FamilyInstructions, $ssapPage13FamilyHeader];
    $ssapPage13FamilyAccessors.push.apply($ssapPage13FamilyAccessors, $ssapPage13FamilyOptions);

    // Verify accessors
    verifyArray($ssapPage13FamilyAccessors);

    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        _click($ssapPage13FamilyOptions[$i]);
        verifyTribe($i);
    }
    var $accessor = $ssapPage13FamilyOptions[$ssapPage13FamilyOptions.length - 1];
    _click($accessor);
}

function verifyTribe($num) {
    // Variables
    var $fullName = $ssapPeople[$num].fullName(true);
    _assertVisible(_select("state[" + $num + "]"));
    _assertVisible(_select("tribeName[" + $num + "]"));
}

function selectAndEnterNativeInfo($num, $bool, $state, $tribe) {
    // Generate random if necessary
    if ($bool.toUpperCase() === "YES" && $state === undefined) {
        $state = Math.floor(Math.random() * ($SSAP_PAGE_13_STATE_LENGTH - 1)) + 1;
    }
    if ($bool.toUpperCase() === "YES" && $tribe === undefined) {
        $tribe = 1;
    }

    // Update state
    $ssapPeople[$num].$native = "Yes";

    // Set fields
    var $accessor = $ssapPage13FamilyOptions[$num];
    _check($accessor);

    if ($bool.toUpperCase() === "YES") {
        _click(_radio("AmericonIndianQuestionRadioYes" + ($num + 1)));
        _setSelected(_select("americonIndianQuestionSelect" + ($num + 1)), $state);
        _setSelected(_select("tribeName" + ($num + 1)), $tribe);
    } else if ($bool.toUpperCase() === "NO") {
        _click(_radio("AmericonIndianQuestionRadioNo" + ($num + 1)));
    }
}

function ssapPage13SetNobody() {
    // Update state
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        $ssapPeople[$i].$native = "No";
    }

    // Set field
    var $accessor = $ssapPage13FamilyOptions[$ssapPage13FamilyOptions.length - 1];
    _check($accessor);
}

function verifySSAPPage7() {
    // Set accessors
    $ssapPage07HouseholdInstructions = _paragraph("Here are the " + $ssapPeople.length + " members in your household. Please answer the following questions to help us establish everyone's relationship to each other.");
    //$ssapPage07HouseholdInstructions2 = _paragraph("If you have a dependent who is disabled and is 25 years or older, please select either \"Parent/Caretaker\" or \"Court Appointed Guardian\" as your relationship to that person.", _in(_div("usa-alert-body")));

    $ssapPage07HouseholdAccessors = [$ssapPage07HouseholdHeader, $ssapPage07HouseholdInstructions];
    _assertVisible($ssapPage07Header);
    verifyArray($ssapPage07HouseholdAccessors);

    // Verify relationship accessors
    for (var $i = 0; $i < $ssapPeople.length - 1; $i++) {
        verifyPersonOnSSAPPage07($i);
    }

}


function verifyPersonOnSSAPPage07($num) {
    // Variables
    var $fullName = $ssapPeople[$num].fullName(false);

    // Set accessors
    var $header = _div("subsection");
    //_listItem("relationshipSelection" + ($num + 1));

    // Verify accessors
    _assertVisible($header);
    _assertTrue(new RegExp("How is " + $fullName + " related to").test(_getText($header)));

    // Verify relationship to other people accessors
    for (var $i = $num + 1; $i < $ssapPeople.length; $i++) {
        var $otherFullName = $ssapPeople[$i].fullName(false);
        _assertVisible(_label($fullName + " is " + $otherFullName + "'s"));
        var $menu = _select($i - $num - 1, _in($header));
        _assertVisible($menu);
        _setSelected($menu, 1);
    }
    for (var $i = $num + 1; $i < $ssapPeople.length; $i++) {
        var $otherFullName = $ssapPeople[$i].fullName(false);
        var $menu = _select($i - $num - 1, _in($header));
        _setSelected($menu, 0);
    }
}

function selectRelationship($first, $second, $relationship, $member, $applicantsGuidIds) {
    // Set accessors
    var $header;
    var $menu;
    if ((_isVisible(_heading4("Life Change Event: Change in Dependents"))) || (_isVisible(_span("Selected Events")))) {
        $header = _listItem("ng-scope[" + ($first + $second + 1) + "]");
        $menu = _select("ddlRelationship" + ($first + $second));
        if ($first > $second) {

            $menu = _select($first - $second - 1, _in($header));
        } else {
            $menu = _select($second - $first - 1, _in($header));
        }
        var $str = _collect("_div", "/ng-scope/", "sahiText", _in($header));
        var $el = $str.length;
        clickAddMember
        if (!_getAttribute(_select("ddlRelationship" + $el), "disabled")) {

            var $disabledOptions = [];
            var $options = _collect("_option", "/.*/", _in(_select("ddlRelationship" + $el)));
            // here $element is the select element which contains all the options.
            // collect the HTML elements of options in the select element
            _getText($options[2])
            _assertEqual(true, _getAttribute($options[2], "disabled"));
        }
    } else {
        var $memberOneName = $first.$firstName + " " + $first.$lastName
        var $memeberTwoName = $second.$firstName + " " + $second.$lastName

        $menu = _select(0, _near(_label($memberOneName + " is " + $memeberTwoName + "'s")));
    }

    // Set field
    _setSelected($menu, $relationship);
}

function clickContinueToClosePopUpForChildGreaterThan26() {
    _assertVisible(_paragraph("This household member(s) will need to apply separately and will be marked as \"not seeking coverage\" in this application:"));
    _click($ssapContinue1);
    verifySSAPPage15();
}

function verifySSAPPage15() {
    // Verify accessors
    if (_exists(_paragraph("This household member(s) will need to apply separately and will be marked as \"not seeking coverage\" in this application:"))) {
        return;
    }
    _assertVisible($ssapPage15Header);
    verifyArray($ssapPage15InfoAccessors);

    // Verify information on each person
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        verifyPersonOnSSAPPage15($i);
    }
}

function verifyPersonOnSSAPPage15($num) {
    var $fullName = $ssapPeople[$num].fullName(true);
    if ($num == 0)
        _assertVisible(_heading4($fullName + "(Primary Contact)"));
    else
        _assertVisible(_heading4($fullName));
    _assertVisible(_button("Edit[" + $num + "]"));
    var $seekingCoverage = $ssapPeople[$num].$applying
    var $gender = $ssapPeople[$num].$gender
    $gender = capitalizeFirstLetter($gender)
    var $ind = $ssapPeople[$num].$SSN.length - 4;
    var $SSNval = $ssapPeople[$num].$SSN.substring($ind);
    _assertVisible(_div("***-**-" + $SSNval, _near(_div("Social Security Number[" + $num + "]"))));

}

//delete this fun
function nvverifyPersonOnSSAPPage15($num, $fromPage17, $isEligibleForCoverage) {
    // Variables
    var $fullName = $ssapPeople[$num].fullName(true);
    var $accessors;
    // Set accessors
    var $div;
    var $table;
    if (_isVisible(_heading3("Review and Confirm"))) {
        $table = _div("usa-width-one-whole usa-grid bordered[" + $num + "]")
        var $header = _heading4(0, _in($table));
        var $coverage = _span(0, _rightOf(_span("Applying for Coverage", (_in($table)))));
        var $gender = _span(0, _rightOf(_span("Gender", (_in($table)))));
        var $SSN = _span(0, _rightOf(_span("Social Security Number", (_in($table)))));
        //_cell(7, _in($table));
        var $SSNName = _span(0, _rightOf(_span("Name on SSN Card", (_in($table)))));
        var $citizen = _span(0, _rightOf(_span("US Citizen or US National", (_in($table)))));
        var $homeAddress = _span(0, _rightOf(_span("Home Address", (_in($table)))));
        if ($num === 0) {
            var $mailingAddress = _span(0, _rightOf(_span("Mailing Address", (_in($table)))));
            $accessors = [$table, $header, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress, $mailingAddress];
        } else {
            $accessors = [$table, $header, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress];
        }
    } else {
        if ($fromPage17) {
            $div = _div("hixApplicantInfo[" + ($num + $ssapPeople.length + 2) + "]");
        } else {
            $div = _div("hixApplicantInfo[" + $num + "]");
        }
        var $header = _heading5(0, _in($div));
        var $edit = _button("Edit", _in($div));
        var $coverage = _cell(1, _in($div));
        var $gender = _cell("camelCaseName", _in($div));
        var $SSN = _cell(5, _in($div));
        var $SSNName = _cell(7, _in($div));
        var $citizen = _cell(9, _in($div));
        var $homeAddress = _cell(11, _in($div));
        if ($num === 0) {
            var $mailingAddress = _cell(13, _in($div));
            $accessors = [$div, $header, $edit, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress, $mailingAddress];
        } else {
            $accessors = [$div, $header, $edit, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress];
        }
    }

    // Verify content
    if ($num === 0) {
        if (_isVisible(_heading3("Review and Confirm"))) {
            if ($removePrimary == "false") {
                _assertEqual("/" + $fullName + "/", _getText($header));
            }
        } else {
            _assertEqual($fullName + " (Primary Contact)", _getText($header));
        }
    } else {
        _assertEqual($fullName, _getText($header));
    }

    if ($isEligibleForCoverage === undefined || $isEligibleForCoverage) {
        _assertEqual($ssapPeople[$num].$applying, _getText($coverage));
    } else {
        _assertEqual("No", _getText($coverage));
    }

    _assertEqual("/" + $ssapPeople[$num].$gender + "/i", _getText($gender));

    var $ind = $ssapPeople[$num].$SSN.length - 4;
    var $SSNval = $ssapPeople[$num].$SSN.substring($ind);
    var $expSSN = _getText($SSN);
    if ($expSSN == "N/A") {
        $expSSN = "NA--";
    }
    _assertTrue(new RegExp($SSNval).test($expSSN));
    var $expected = _getText($SSNName);
    if ($expected == "N/A") {
        $expected = "--NA--";
    }
    _assertEqual($ssapPeople[$num].$SSNName, $expected);
    _assertEqual($ssapPeople[$num].$citizen, _getText($citizen));
    _assertTrue(new RegExp($ssapPeople[$num].$homeAddress1).test(_getText($homeAddress)));
    if ($ssapPeople[$num].$homeAddress2) {
        _assertTrue(new RegExp($ssapPeople[$num].$homeAddress2).test(_getText($homeAddress)));
    }
    _assertTrue(new RegExp($ssapPeople[$num].$homeCity).test(_getText($homeAddress)));
    _assertTrue(new RegExp($ssapPeople[$num].$homeZip).test(_getText($homeAddress)));

    if ($num === 0) {
        if ($ssapPeople[$num].$mailingAddress1 === "Same as home address") {
            if (_isVisible(_heading3("Final Review and Confirmation Print Download"))) {
                _assertTrue(new RegExp($ssapPeople[$num].$homeAddress1).test(_getText($homeAddress)));
                if ($ssapPeople[$num].$homeAddress2) {
                    _assertTrue(new RegExp($ssapPeople[$num].$homeAddress2).test(_getText($homeAddress)));
                }
                _assertTrue(new RegExp($ssapPeople[$num].$homeCity).test(_getText($homeAddress)));
                _assertTrue(new RegExp($ssapPeople[$num].$homeZip).test(_getText($homeAddress)));
            } else {
                _assertEqual($ssapPeople[$num].$mailingAddress1, _getText($mailingAddress));
            }
        } else {
            _assertTrue(new RegExp($ssapPeople[$num].$mailingAddress1).test(_getText($mailingAddress)));
            if ($ssapPeople[$num].$mailingAddress2) {
                _assertTrue(new RegExp($ssapPeople[$num].$mailingAddress2).test(_getText($mailingAddress)));
            }
            _assertTrue(new RegExp($ssapPeople[$num].$mailingCity).test(_getText($mailingAddress)));
            _assertTrue(new RegExp($ssapPeople[$num].$mailingZip).test(_getText($mailingAddress)));
        }
    }
}

function verifyNativeOnSSAPPage15($num, $fromPage17) {
    var $table;
    var $number;
    if ($fromPage17) {
        $table = _div("usa-width-one-whole[1]");
    } else if (_isVisible(_heading4("Life Change Event: Final Review and Confirmation"))) {
        $table = _table("table table-striped ng-scope", _near(_heading4("More about this household")));
    } else {
        _div(0, _under(_heading3("More About This Household")));
    }
    var $name;
    var $native;
    if (_isVisible(_heading4("Life Change Event: Final Review and Confirmation"))) {
        $number = $num + 1;
        $name = _cell($number * 2, _in($table));
        $native = _cell($number * 2 + 1, _in($table));
    } else {
        $name = _span($num * 2, _in(_div(0, _under(_heading3("More About This Household")))));
        $native = _span($num * 2 + 1, _in(_div(0, _under(_heading3("More About This Household")))));


    }
    var $accessors = [$table, $name, $native];

    // Verify content
    _assertEqual($ssapPeople[$num].fullName(true), _getText($name));
    _assertEqual($ssapPeople[$num].$native, _getText($native));
}

function clickEditOnSSAPPage15($num) {
    // Click button
    _click(_button("Edit[" + $num + "]"));

    // Update state
    $ssapPageIndex = 8;
    $currentPerson = $num;
    $editingPerson = true;
}

function verifySSAPPage16() {
    // Verify accessors
    verifyArray($ssapPage16Accessors);
}

function verifySSAPPage17() {
    // Verify accessors

    verifyArray($ssapPage17ReviewAccessors);
    // Verify each person's Native American status
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        verifyPersonOnSSAPPage15($i);
    }
}

function verifyPrimaryContactInfoOnSSAPPage17() {
    // Set accessors
    var $fullName = $ssapPeople[0].fullName(true);

    var $table = _parentNode(_heading4($fullName), "DIV", 2);
    var $email = _div(0, _rightOf(_span("Email", _in($table))));
    var $phone = _div(0, _rightOf(_span("Phone", _in($table))));
    var $doB = _div(0, _rightOf(_span("Date of Birth", _in($table))));
    var $homeAddress = _div(0, _rightOf(_span("Home Address", _in($table))));
    var $mailingAddress = _div(0, _rightOf(_span("Mailing Address", _in($table))));
    var $secondPhone = _div(0, _rightOf(_span("Second Phone Number", _in($table))));
    var $spoken = _div(0, _rightOf(_span("Preferred Spoken Language", _in($table))));
    var $written = _div(0, _rightOf(_span("Preferred Written Language", _in($table))));
    var $communication = _div(0, _rightOf(_span("Preferred Method of Communication", _in($table))));
    var $accessors = [$table, $email, $phone, $doB, $homeAddress, $mailingAddress, $secondPhone, $spoken, $written, $communication];


    // Verify Information

    var $phoneVal;
    $phoneVal = $ssapPreferredPhone;
    var $phonePageVal = _getText($phone).replace(/\D/g, '');
    _assertEqual($phoneVal, $phonePageVal);


    var $dob = _getText($doB);
    $dob = _call(window.moment($dob).format("MMDDYYYY"));
    var $homeAddressVal = _getText($homeAddress);
    _assertTrue(new RegExp($ssapHomeAddress1).test($homeAddressVal));

    var $mailingAddressVal = _getText($mailingAddress);
    if ($ssapMailingAddress1 === "Same as home address") {
        _assertTrue(new RegExp($ssapHomeAddress1).test($mailingAddressVal));
    } else {
        _assertTrue(new RegExp($ssapMailingAddress1).test($mailingAddressVal));
    }
    $phoneVal = $ssapSecondPhone;
    $phoneVal = escapeRegExp($phoneVal);
    $phonePageVal = _getText($secondPhone);
    _assertEqual($ssapSpoken, _getText($spoken));
    _assertEqual($ssapWritten, _getText($written));
    _assertTrue(new RegExp($ssapCommunication, "i").test(_getText($communication)));
}

function verifyApplyingOnSSAPPage17() {

    // Verify information for each person

    _windowAction("maximize");
    // mazimize window.
    for (var $i = 0; $i < $ssapPeople.length; $i++) {

        var $name = _getText(_span($i, _under(_span("Name", _under(_heading3("/Applying for health coverage/i"))))));

        // Verify information
        _assertEqual("/" + $ssapPeople[$i].fullName(true) + "/", $name);
        var $relation = $ssapPeople[$i].relationShip
        var $convertedDate = ($ssapPeople[$i].$doB).replace(/\//g, "");
        var $age = calculateAge($ssapPeople[$i].$doB);

        if (($relation != "Self" && $relation != "Ward of court-appointed guardian" && $relation != "Spouse") && $age > 25) {
            //_assertEqual("No", $seekingCoverage);
            var $seekingCoverage = "No";
        }
    }
}

function verifySSAPPage18() {
    // Variables
    var $fullName = $ssapPeople[0].fullName();

    // Set accessors
    $ssapPage18IncarceratedOptions = [];
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        //$ssapPage18IncarceratedOptions.push(_checkbox("FNLNS[" + $i + "]"));
        $ssapPage18IncarceratedOptions.push(_label("gi-checkbox-label[" + $i + "]"));
    }
    $ssapPage18SignatureHeader = _span("/" + $fullName + "'s Electronic Signature/");
    $ssapPage18Accessors = [$ssapPage18Header, $ssapPage18NobodyIncarcerated];
    $ssapPage18Accessors.push.apply($ssapPage18Accessors, $ssapPage18IncarceratedOptions);
    $ssapPage18Accessors.push.apply($ssapPage18Accessors, $ssapPage18UseIncomeBullets);
    $ssapPage18Accessors.push.apply($ssapPage18Accessors, [$ssapPage18SixtyDays, $ssapPage18Perjury, $ssapPage18SignatureHeader,
        $ssapPage18Signature, $ssapPage18SubmitApp]);

    // Verify accessors
    verifyArray($ssapPage18Accessors);
}

function selectNobodyIncarcerated() {
    // Set field
    if ((_isVisible(_heading4("Life Change Event: Change in Dependents"))) || (_isVisible(_span("Selected Events")))) {

        _click(_radio("isIncarcerated[1]"));
    } else {
        _click($ssapPage18NobodyIncarcerated);
    }
}

function selectIncarcerated($num, $pendingDisposition) {
    // Generate random if necessary
    if (!$num) {
        $num = Math.floor(Math.random() * $ssapPeople.length);
    }
    if (!$pendingDisposition) {
        var $val = Math.floor(Math.random() * 2);
        if ($val === 0) {
            $pendingDisposition = "Yes";
        } else {
            $pendingDisposition = "No";
        }
    }

    // Set who is incarcerated
    _click($ssapPage18IncarceratedOptions[$num]);

    // Make sure new fields are visible
    var $yes = _radio("disposition" + ($num + 1));
    var $no = _radio("disposition" + ($num + 1) + "[1]");

    // Set whether pending disposition
    if ($pendingDisposition === "Yes") {
        _click($yes);
    } else {
        _click($no);
    }
}

function selectFutureApplications($bool, $years) {
    // Generate random if necessary
    if (!$bool) {
        var $val = Math.floor(Math.random() * 2);
        if ($val === 0) {
            $bool = true;
        } else {
            $bool = false;
        }
    }
    if (!$years) {
        $years = Math.floor(Math.random() * 5) + 1;
    }

    // Set fields
    if ($bool) {
        _click($ssapPage18UseIncomeBullets[0]);
    } else {
        _click($ssapPage18UseIncomeBullets[1]);
        _click(_radio("taxReturnPeriod" + $years));
    }
}

function selectSixtyDays($bool) {
    // Set field
    if ($bool) {
        _click($ssapPage18SixtyDays);
    } else {
        _click($ssapPage18SixtyDays);
    }
}

function selectPerjury($bool) {
    // Set field
    if ($bool) {
        _click($ssapPage18Perjury);
    } else {
        _click($ssapPage18Perjury);
    }
}

function enterSignOnSSAPPage18() {
    // Variables
    var $fullName = $ssapPeople[0].fullName();

    // Set field
    _setValue($ssapPage18Signature, $fullName);
}

//TO DO - for January
function setQualifyingEvent($event, $days) {
    var $eventDetails;
    var $inGlobalOEP = inGlobalOEP();
    if ($inGlobalOEP !== "ON") {
        verifySSAPQualifyingEventDetails();
        $eventDetails = enterSSAPQualifyingEventDetailsInfo($event, $days);
        clickSubmitSSAPQualifyingEventDetails();
    }
    return $eventDetails;
}

function clickSubmitSSAP($event,
                         $days,
                         $QEvent,
                         $coverageYear,
                         $people,
                         $actionButton,
                         $groups,
                         $isHealthEnrollmentComplete,
                         $isFinancial,
                         $aptcEligible,
                         $csrElgible,
                         $isDentalEnrollmentComplete,
                         $isSEP,
                         $indexes,
                         $applicationType,
                         $eventType,
                         $household,
                         $CSRLogin) {
    var $eventDetails
    _wait(5000);
    if (_isVisible($ssapPage18SubmitApp)) {
        _click($ssapPage18SubmitApp);
        _wait(30000, _isVisible(_div("My Stuff")));
    }
    _log("In OEP flag: " + $inOEP);
    if ($inOEP != "ON") {
        _wait(20000);
        _log("Application type: " + $applicationType);
        if (_isVisible(_heading3("Application is in progress..."))) {
            _wait(900000, !_isVisible(_heading3("Application is in progress...")));
        }

        if ($applicationType == "QEP") {
            _log("Application type == QEP")
            $actionButton = "CONFIRM EVENT AND SHOP"
            if (_isVisible(_button($actionButton))) {
                _log("inside CONFIRM EVENT AND SHOP is visible")
                _assertContainsText("We need additional information documents to confirm some of the data provided on your application. Click here to UPLOAD DOCUMENTS. If you have already uploaded the relevant documents, please wait for the documents to be approved.", _div("auto-warnings"));
                verifyElementsOfIndividualDashboard(
                    $coverageYear,
                    $people,
                    $actionButton,
                    $eventDate,
                    $groups,
                    $isHealthEnrollmentComplete,
                    $isFinancial,
                    $aptcEligible,
                    $csrElgible,
                    $isDentalEnrollmentComplete,
                    $isSEP,
                    $applicationType);
                _assertVisible(_link("Edit Application"));
                _click(_button($actionButton));
                verifyQualifyingLifeEventPage($people, $indexes, $applicationType);
                $eventDetails = selectQualifyingEventDuringQEPSEP($event, $days, $people, $indexes, $applicationType);
                _log("Event detatils: " + $eventDetails);
                _click(_submit("Continue"));
                // TODO"  assertion 		_assertVisible(_div("Please confirm that date 12/11/2019 for event"+' \"'+"Lost other minimum essential coverage"+'\"'+" is correct"));
                _assertVisible(_link("Change Event Date"));
                _assertVisible(_link("Confirm"));
                _click(_link("Confirm"));
                _wait(20000, _isVisible(_div("My Stuff")));
                if ($eventDetails) {
                    var $event_label = $eventDetails[0];
                    //DB to get "Y" or "N" for gated event
                    var $isGated = getIsGatedValue($event_label, $applicationType, $eventType);
                    var $button = getDashBoardButton($isGated);
                    $actionButton = $button;

                }
            }
            _log("outside CONFIRM EVENT AND SHOP is visible")
        }
        _wait(10000, _isVisible(_div("My Stuff")));
        if (_isVisible(_heading3("Application is in progress..."))) {
            _wait(60000, !_isVisible(_heading3("Application is in progress...")));
        }
        if ($applicationType == "SEP") {
            if (_isVisible(_button("CONFIRM EVENT AND FINALIZE PLANS"))) {
                $actionButton = "CONFIRM EVENT AND FINALIZE PLANS";
                verifyElementsOfIndividualDashboard(
                    $coverageYear,
                    $people,
                    $actionButton,
                    $eventDate,
                    $groups,
                    $isHealthEnrollmentComplete,
                    $isFinancial,
                    $aptcEligible,
                    $csrElgible,
                    $isDentalEnrollmentComplete,
                    $isSEP,
                    $applicationType);
                _click(_button($actionButton));
                verifyQualifyingLifeEventPage($people, $indexes, $applicationType);
                $eventDetails = selectQualifyingEventDuringQEPSEP($event, $days, $people, $indexes, $applicationType);
                //set action button too
                _click(_submit("Continue"));
                if (_isVisible(_heading3("Application is in progress..."))) {
                    _wait(60000, !_isVisible(_heading3("Application is in progress...")));
                }
                if ($eventDetails) {
                    var $event_label = $eventDetails[0];
                    //DB to get "Y" or "N" for gated event
                    var $isGated = getIsGatedValue($event_label, $applicationType, $eventType);
                    var $button = getDashBoardButton($isGated);
                    $actionButton = $button;
                    if ($actionButton == "UPLOAD DOCUMENTS") {
                        _click(_button("UPLOAD DOCUMENTS"));
                        //gated event Document upload
                        validFileUpload();
                        setTicketAsMarkAsCompleteAfterUploadDocument($household, $CSRLogin);
                        _wait(2000);
                        if (_isVisible(_heading3("Application is in progress..."))) {
                            _wait(60000, !_isVisible(_heading3("Application is in progress...")));
                        }
                        if ($isHealthEnrollmentComplete == "Y" && $isDentalEnrollmentComplete == "Y") {
                            $actionButton = "CHANGE PLANS";
                        }
                    }
                    //TO DO Eventdate
                    //					}
                }
                if ($isHealthEnrollmentComplete == "Y" && $isDentalEnrollmentComplete == "N") {
                    $actionButton = "CHANGE PLANS";
                }
            }
        }

    }
    // For timeout message on Sign and Submit
    _wait(30000, _isVisible(_button($actionButton)));
    verifyElementsOfIndividualDashboard($coverageYear, $people, $actionButton, $eventDate, $groups, $isHealthEnrollmentComplete, $isFinancial, $aptcEligible, $csrElgible, $isDentalEnrollmentComplete, $isSEP, $applicationType);
    return $eventDetails;
}

function verifyQualifyingLifeEventPage($ssapInfo, $indexes, $applicationType) {
    _assertVisible(_heading1("/Life Change Reporting Qualifying Life Event/"));

    _assertVisible(_paragraph("/In order to qualify for Special Enrollment Period. you need to report and take action within 60 days of the event date. If you don't your request will most likely be denied./"));
    if ($applicationType == "QEP") {
        _assertVisible(_select("qualifyEventSelected"));
    }
    if ($applicationType == "SEP") {
        _assertEqual("--- Select --- Adoption Birth Cancellation of hardship exemption Change in incarceration status Change in legal presence Change in tribal status Change in U.S. citizenship status Gain of American Indian/Alaska Native status Loss of employer-based health insurance coverage Loss of Medicaid Loss of other minimum essential coverage Marriage Moved into Pennsylvania", _getText(_div("span5")));
        if ($indexes) {
            for (var $i = 0; $i < $indexes.length; $i++) {
                var $index = $indexes[$i];
                var $fullName = $ssapPeople[$index].fullName(true);
                _assertVisible(_label($fullName + " Required"));
            }
            _assertVisible(_heading4("Changes in household eligibility"));
            _assertVisible(_heading5("A recent life event may have changed the eligibility status for one or more members of your household. Please confirm the event type and date of the event for each of the people listed below."));
            _assertVisible(_heading5("Newly eligible individuals"));
            _assertEqual("NOTE:We have updated your account on Pennsylvania Health Link and we have forwarded your demographic changes (e.g., name, SSN, mailing address) to your insurance company. There is no need for you to contact your insurance company to report this information.", _getText(_paragraph("alert alert-info margin20-t")));
        }
    }
    _assertVisible(_label("/I have provided true answers to all of the questions to the best of my knowledge. I know I may be subject to penalties under federal law if I intentionally provide false information./"));


}

function selectQualifyingEventDuringQEPSEP($event, $days, $ssapInfo, $indexes, $applicationType) {
    if (!$event && !$days) {
        $event = "Marriage";
        $days = "2";
    }
    var $date = getBackDate($days, "MM/DD/YYYY");

    if ($applicationType == "QEP") {
        _setSelected(_select("qualifyEventSelected"), $event);
        _setValue(_textbox("Event Date Sample text.  M M/ D D/ Y Y Y Y"), $date);
    } else {
        for (var $i = 0; $i < $indexes.length; $i++) {
            var $index = $indexes[$i];
            var $fullName = $ssapPeople[$index].fullName(true);
            _setSelected(_select(0, _near(_label($fullName + " Required"))), $event);
            _setValue(_textbox(" Sample text.  M M/ D D/ Y Y Y Y", _near(_label($fullName + " Required"))), $date);

        }
    }
    _click(_checkbox("terms"));
    return [$event, $date];
}


function verifySSAPQualifyingEventDetails() {
    // Verify accessors
    verifyArray($ssapQualifyingEventDetailsAccessors);
}


function enterSSAPQualifyingEventDetailsInfo($event, $days) {

    // Generate random if necessary
    if (!$event) {
        //		$event = Math.floor(Math.random() * 10) + 1;
        $event = "Marriage";
        $eventNumber = $event;
    } else {
        $eventName = $event;
    }

    $date = calculateEventDate($days);
    var $now = _call(window.moment());
    var $currentYear = parseInt(_fetch(window.moment($now).get('year')));
    var $eventYear = parseInt(_fetch(window.moment($eventDate).get('year')));

    if ($currentYear != $eventYear) {
        $date = "01/01/" + $currentYear;
        //_setValue($ssapQualifyingEventDetailsDate, $date);
    }
    _setSelected($ssapQualifyingEventDetailsEvent, $event);
    _wait(5000);
    _setValue(_numberbox("month"), $date.substring(0, 2));
    _setValue(_numberbox("date"), $date.substring(3, 5));
    _setValue(_numberbox("year"), $date.substring(6, 10));
    if (_getValue(_numberbox("year")) == "") {
        _setValue(_numberbox("year"), $date.substring(6, 10));
    }
    // Set fields
    $eventName = _getValue(_select("sepEvent"));
    $eventDate = $date;
    // Hardcoded $eventReported value for Production Environment
    // This is based on the Event Type being 'Death'
    $eventReported = "1";
    //}
    return [$eventName, $eventDate]
    //takePageScreenShot();
}

function getDashBoardButton($isGated) {
    var $dashBoardButton;
    if ($isGated == "Y") {
        $dashBoardButton = "UPLOAD DOCUMENTS";
    } else
        $dashBoardButton = "SHOP FOR PLANS";
    return $dashBoardButton
}

function clickSubmitSSAPQualifyingEventDetails() {
    _click($ssapQualifyingEventDetailsSubmit);

    // HACK for making the AnonymousFlow test cases to run due to a known bug in the application.
    if (_isVisible(_div("Change in Mailing Address"))) {
        _log("Change in Mailing Address", "CUSTOM4");
        _click(_link("OK"));
    }

    // Verify confirmation page
    //	verifySSAPPage19();
}

function verifySSAPPage19() {

    if ($sepDenied) {
        // Verify accessors
        verifyArray($ssapPage19Accessors);
    }
}

function clickBackToDashboardFromSSAPPage19($coverageYear, $household, $actionButton, $eventDate, $groups, $isHealthEnrollmentComplete) {
    if (_isVisible(_heading1("Confirmation")) || ($sepDenied)) {
        _click($ssapPage19Back);
    }
    // Verify dashboard
    //verifyElementsOfIndividualDashboard();
    verifyElementsOfIndividualDashboard($coverageYear, $household, $actionButton, $eventDate, $groups, $isHealthEnrollmentComplete);
    //verifyUpdatePlanAndEnrollButton();
}

function countssapPeople() {
    // Compute the number of adults and children
    $numberOfAdults = 0;
    $numberOfChildren = 0;
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        $ssapPeople[$i].$age = calculateAge($ssapPeople[$i].$doB);
        if ($ssapPeople[$i].$age > 18 && $ssapPeople[$i].$applying == "Yes") {
            $numberOfAdults++;
        } else if ($ssapPeople[$i].$age <= 18 && $ssapPeople[$i].$applying == "Yes") {
            $numberOfChildren++;
        }
    }
}

function viewApplication($num, $isEligibleForCoverage) {
    var $fullName = $ssapPeople[$num].fullName(true);
    var $accessors;
    var $div;
    var $number = $num + 1;
    $div = _div("hixApplicantInfo[" + $number + "]");

    var $header = _heading5(0, _in($div));
    var $coverage = _cell(1, _in($div));
    var $gender = _cell("camelCaseName", _in($div));
    var $SSN = _cell(5, _in($div));
    var $SSNName = _cell(7, _in($div));
    var $citizen = _cell(9, _in($div));
    var $homeAddress = _cell(11, _in($div));
    if ($num === 0) {
        var $mailingAddress = _cell(13, _in($div));
        $accessors = [$div, $header, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress, $mailingAddress];
    } else {
        $accessors = [$div, $header, $coverage, $gender, $SSN, $SSNName, $citizen, $homeAddress];
    }
    // Verify accessors
    verifyArray($accessors);

    if ($num === 0) {
        _assertEqual($fullName + " (Primary Contact)", _getText($header));
    } else {
        _assertEqual($fullName, _getText($header));
    }

    if ($isEligibleForCoverage === undefined || $isEligibleForCoverage) {
        _assertEqual($ssapPeople[$num].$applying, _getText($coverage));
    } else {
        _assertEqual("No", _getText($coverage));
    }

    _assertEqual("/" + $ssapPeople[$num].$gender + "/i", _getText($gender));

    var $ind = $ssapPeople[$num].$SSN.length - 4;
    var $SSNval = $ssapPeople[$num].$SSN.substring($ind);
    var $expSSN = _getText($SSN);
    if ($expSSN == "N/A") {
        $expSSN = "NA--";
    }
    _assertTrue(new RegExp($SSNval).test($expSSN));
    var $expected = _getText($SSNName);
    if ($expected == "N/A") {
        $expected = "--NA--";
    }
    _assertEqual($ssapPeople[$num].$SSNName, $expected);
    _assertEqual($ssapPeople[$num].$citizen, _getText($citizen));
    _assertTrue(new RegExp($ssapPeople[$num].$homeAddress1).test(_getText($homeAddress)));
    if ($ssapPeople[$num].$homeAddress2) {
        _assertTrue(new RegExp($ssapPeople[$num].$homeAddress2).test(_getText($homeAddress)));
    }
    _assertTrue(new RegExp($ssapPeople[$num].$homeCity).test(_getText($homeAddress)));
    _assertTrue(new RegExp($ssapPeople[$num].$homeZip).test(_getText($homeAddress)));

    if ($num === 0) {
        if ($ssapPeople[$num].$mailingAddress1 === "Same as home address") {
            if (_isVisible(_heading3("Final Review and Confirmation Print Download"))) {
                _assertTrue(new RegExp($ssapPeople[$num].$homeAddress1).test(_getText($homeAddress)));
                if ($ssapPeople[$num].$homeAddress2) {
                    _assertTrue(new RegExp($ssapPeople[$num].$homeAddress2).test(_getText($homeAddress)));
                }
                _assertTrue(new RegExp($ssapPeople[$num].$homeCity).test(_getText($homeAddress)));
                _assertTrue(new RegExp($ssapPeople[$num].$homeZip).test(_getText($homeAddress)));
            } else {
                _assertEqual($ssapPeople[$num].$mailingAddress1, _getText($mailingAddress));
            }
        } else {

            _assertTrue(new RegExp($ssapPeople[$num].$mailingAddress1).test(_getText($mailingAddress)));
            if ($ssapPeople[$num].$mailingAddress2) {
                _assertTrue(new RegExp($ssapPeople[$num].$mailingAddress2).test(_getText($mailingAddress)));
            }
            _assertTrue(new RegExp($ssapPeople[$num].$mailingCity).test(_getText($mailingAddress)));
            _assertTrue(new RegExp($ssapPeople[$num].$mailingZip).test(_getText($mailingAddress)));
        }
    }
}

function clickResumeSSAPApplication($pageHeading) {
    if (_isVisible(_link("Resume Application"))) {
        _click(_link("Resume Application"));
    } else {
        _click(_button("RESUME APPLICATION"));
    }
    _assertVisible(_heading1($pageHeading), "Verify page heading");
    _assertVisible(_button("Back"), "Verify Back button is displayed");
}

function ssapSubmissionByCSR($event, $days) {
    _click($ssapPage18SubmitApp);
    _wait(1500);

    _assertVisible(_div("modalCSRApplicationType"));
    _assertVisible(_radio("optCSRApplicationTypeMail"));
    _assertVisible(_radio("optCSRApplicationTypePhone"));
    _click(_radio("optCSRApplicationTypeMail"));
    var $thisYear = _fetch(window.moment().format('YYYY'));
    if ($coverageYear == $thisYear) {
        if ($frmQEP) {
            if (!$event) {
                $event = Math.floor(Math.random() * 10) + 1;
                $eventNumber = $event;
            } else {
                $eventName = $event;
            }
            var $inGlobalOEP = inGlobalOEP();
            if ($inGlobalOEP == "ON") {
                $event = 3;
            }
            _setSelected(_select("sepEventCSR"), $event);
            $eventName = _getValue(_select("sepEventCSR")).toUpperCase();
            $date = calculateEventDate($days);
            _setValue(_textbox("sepEventDateCSR"), $date);

            $eventDate = _getValue(_textbox("sepEventDateCSR"));
            $eventReported = getEventType($eventName, "QUALIFYING_EVENT");
        }
    }
    _click(_link("btnSubmitCSRApplicationType"));
    _assertVisible(_div("modalMailingAddressNotSameAsHousehold"));
    _click(_link("OK"));
}

function goToHelpPayingForCoverage() {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Help Paying for Coverage"));
    _assertVisible(_heading3("You may be eligible for free or low-cost coverage, or financial assistance that will lower your montly premiums right away.", _in(_div("subsection"))));
    _assertVisible(_fieldset("Do you want to find out if you can get help paying for health coverage?"));
    _assertVisible(_label("No. (You will pay full cost for Pennie health coverage.)"));
    _assertVisible(_label("Yes. (You will have to provide income information to see what you may qualify for.)"));
    _assertTrue(_getAttribute(_radio(0, _leftOf(_label("Yes. (You will have to provide income information to see what you may qualify for.)"))), "checked"));
    _assertFalse(_getAttribute(_radio(0, _leftOf(_label("No. (You will pay full cost for Pennie health coverage.)"))), "checked"));
}

/**
 * clickGetHelpPayingForCoverage - Select "Yes" or "No" radio buttons if Help for Paying Coverage is required.
 *
 * Arguments
 * $option: "Y" if option has to be selected, "N" otherwise. Default "N".
 */
function clickGetHelpPayingForCoverage($option) {
    if ($option === undefined) {
        $option = "N";
    }

    if ($option == "Y") {
        _click(_label("Yes. (You will have to provide income information to see what you may qualify for.)"));
    } else if ($option == "N") {
        _click(_label("No. (You will pay full cost for Pennie health coverage.)"));
    } else {
        _assert(false, "Option '" + $option + "' not recognized. Pass Y or N.");
    }

    if (!$ssapPeople[0].$helpPayingCoverage) {
        $ssapPeople[0].$helpPayingCoverage = $option;
    }

    $ssapPeople[0].$helpPayingCoverage = $option;
    _log(JSON.stringify($ssapPeople[0].$helpPayingCoverage));
    return $ssapPeople;
}


function goToHouseholdRelationships() {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Household Relationship"));
    _assertVisible(_heading3("Household Relationship Details"));
    var $membersInHousehold = _collectAttributes("_listItem", "/.*/", "sahiText", _in(_div("subsection")));
    _assertEqual($ssapPeople.length, $membersInHousehold.length);
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        _assertEqual($ssapPeople[$i].$firstName + " " + $ssapPeople[$i].$lastName, $membersInHousehold[$i]);
    }

    for (var $i = 0; $i < $ssapPeople.length - 1; $i++) {
        _assertVisible(_paragraph(($i + 1) + ". How is " + $ssapPeople[$i].$firstName + " " + $ssapPeople[$i].$lastName + " related to the other household members?"));
    }
}

function goToHouseholdAddresses($verifyPage) {
    _click(_button("Save & Continue"));

    _assertVisible(_heading1("Household Addresses"));
    _assertVisible(_heading3("Where Household Members Live"));
    if (!$verifyPage) {
        _assertVisible(_fieldset("/Do any of the people below live at an address other than .*\\? \\(check all that apply\\)/"));

        var $householdMembers = _collectAttributes("_label", "/.*/", "sahiText", _in(_div("subsection")));
        _assertEqual($ssapPeople.length, $householdMembers.length);
        for (var $i = 1; $i < $householdMembers.length - 1; $i++) {
            var $member = $householdMembers[$i - 1];
            _assertEqual($ssapPeople[$i].$firstName + " " + $ssapPeople[$i].$lastName, $member);
        }
        var $mem = $householdMembers[$householdMembers.length - 1];
        _assertEqual("None of the Above", $mem);
        _click(_label("None of the Above"));
    }
}

function goToSummary() {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Summary"));
    _assertVisible(_heading3("Household Members", _in(_div("subsection"))));
}

function goToHouseholdInformation($firstName, $lastName) {
    _click(_button("Save & Continue"));
    var $fullName = $firstName + " " + $lastName;
    var $currentCoverageyear = getCurrentCoverageYear();
    _assertVisible(_heading1("Household information"));
    if (_isVisible(_paragraph("Who will file tax return in " + $currentCoverageyear + " year?"))) {
        for (var $i = 0; $i < $ssapPeople.length; $i++) {
            _assertVisible(_label($ssapPeople[$i].$firstName + " " + $ssapPeople[$i].$lastName));
        }
    }
}

function selectToMakeChangesOnHouseHoldInformation($index, $makeChange) {
    _assertVisible(_fieldset("Do you want to make any changes, including the addition of any household members not listed above?"));
    if ($makeChange == "Yes") {
        _assertVisible(_label("Yes"));
        _click(_label("Yes"));
        _assertVisible(_button("Update information"));
    } else if ($makeChange == "No") {
        _assertVisible(_label("No"));
        _click(_label("No"));
    }
}

function clickUpdateInformationOnHouseHoldInfoPage() {
    _click(_button("Update information"));
    _assertVisible(_heading1("About Your Household"));
}

function selectFederalTaxFiler($indexes) {

    var $currentCoverageyear = getCurrentCoverageYear();

    for (var $i = 0; $i < $indexes.length; $i++) {
        var $index = $indexes[$i];
        var $fullName = $ssapPeople[$index].fullName(true);
        //	_click(_label($fullName, _near(_paragraph("Who plans to file a federal income tax return for "+$currentCoverageyear+" year?"))));
        _click(_label($fullName, _near(_paragraph("/file a federal income tax return for " + $currentCoverageyear + "/"))));
    }
    if ($indexes.length == 0) {
        _click(_label("None of Above", _near(_paragraph("/file a federal income tax return for " + $currentCoverageyear + "/"))));
    }
}

function clickOnFileTaxesOption($taxFiling, $indexes) {
    var $currentCoverageyear = getCurrentCoverageYear();
    var $fullName1 = $ssapPeople[$indexes[0]].fullName(true);
    var $fullName = $ssapPeople[$indexes[1]].fullName(true);

    if ($taxFiling == "Jointly") {
        _click(_label("Yes", _near(_span("/ " + $fullName1 + " and " + $fullName + " plan to file a joint federal income tax return/"))));
    } else if ($taxFiling == "Separately") {
        //		_log("TODO: Add assertions");
        _click(_label("No", _near(_span("/ " + $fullName1 + " and " + $fullName + " plan to file a joint federal income tax return/"))));
    }

}

function selectMoreInformationForFamilyMember($moreInfo) {

    //_click(_label($moreInfo+"[1]"));
    _click(_label($moreInfo, _in(_fieldset("/Do you want to provide more information about the family members who live with/"))));

    if ($moreInfo == "No") {
        _assertVisible(_paragraph("usa-alert__text gi-alert__info__text", _near(_fieldset("/Do you want to provide more information about the family members who live with/"))));
    } else {
        _assertVisible(_button("Update information"));
    }


}


function selectPrimaryTaxFiler($index) {

    var $fullName = $ssapPeople[$index].fullName(true);
    _click(_label($fullName, _near(_paragraph("Please select which of the tax filers below should be considered the primary applicant for this application (if filing a joint return, this would be the Primary Tax Filer)"))));

}

function selectDependents($indexes) {

    for (var $i = 0; $i < $indexes.length; $i++) {
        var $index = $indexes[$i];
        var $fullName = $ssapPeople[$index].fullName(true);
        _click(_label($fullName, _near(_paragraph("/Dependents /"))));
    }
}

function selectDependentsWithMultipleTaxFilers($claimer, $indexsOfDependents) {
    var $name = $ssapPeople[$claimer].fullName(true);
    _assertVisible(_paragraph("Who are the dependents that will be claimed by the tax filer(s) on his/her/their income tax return?"));
    _assertVisible(_paragraph("/Dependents of " + $name + "/"));
    if ($indexsOfDependents) {
        for (var $i = 0; $i < $indexsOfDependents.length; $i++) {
            var $index = $indexsOfDependents[$i];
            var $fullName = $ssapPeople[$index].fullName(true);
            _click(_label($fullName, _under(_paragraph("/Dependents of " + $name + "/"))));
        }
    }

}

var $eligibilityOverviewList = _list("eligibility-overview__list");
function verifyEligibilitySummary($isFinancial, $eligibilitySummary, $aptcValue){

    _assertVisible(_heading2($coverageYear+" Eligibility Summary"));
    _assertVisible(_paragraph("Based on your application, members of your household are eligible for:"));
    if($isFinancial == "Yes"){
        _assertVisible(_paragraph("Detailed eligibility for each household member is listed below.  Click on the 'Go to Dashboard' button for the next steps to enroll in a plan."));
    }
    else if($isFinancial == "No"){

        _assertVisible(_paragraph("You are not eligible for any subsidies as you did not request consideration for subsidies."));

    }
    var $eligibilitySummaryLength = _count("_listItem", "/.*/", _in($eligibilityOverviewList));
    _assertEqual($eligibilitySummary.length, $eligibilitySummaryLength);
    for(var $i = 0; $i<$eligibilitySummary.length; $i++){
        if($eligibilitySummary[$i] == "Potential Medicaid"){
            _assertEqual("Potentially eligible for Medicaid", _getText(_listItem("eligibility-overview__list-item"+"["+$i+"]", _in($eligibilityOverviewList))));
        }
        if($eligibilitySummary[$i] == "Chip"){
            _assertEqual("Potentially eligible for the Children's Health Insurance Program (CHIP)", _getText(_listItem("eligibility-overview__list-item"+"["+$i+"]", _in($eligibilityOverviewList))));
            _assertEqual("Medicaid and the Children's Health Insurance Program (CHIP) provide comprehensive free or low cost coverage for those who are eligible. " +
                "The Pennsylvania Department of Human Services (DHS) will now review your application. DHS will send you a notice with information about your eligibility for these programs.", _getText(_paragraph(1)));
        }
        if($eligibilitySummary[$i] == "QHP"){
            _assertEqual("Qualified Health and Dental Plans", _getText(_listItem("eligibility-overview__list-item"+"["+$i+"]", _in($eligibilityOverviewList))));
        }
        if($eligibilitySummary[$i] == "APTC"){
            // $aptcValue= parseInt($aptcValue).toFixed(2);
            $aptcValue= parseInt($aptcValue).toFixed(2);
            //_assertVisible(_listItem("Advanced Premium Tax Credit of up to $" + $aptcValue + " for your household to lower your monthly insurance premium.", _in($eligibilityOverviewList)));
            //_assertEqual("Potentially eligible for Medicaid", _getText(_listItem("eligibility-overview__list-item["+$i+"]", _in($eligibilityOverviewList))));
            _assertVisible(_link("Advanced Premium Tax Credit", _in($eligibilityOverviewList)));
        }
        if($eligibilitySummary[$i] == "CSR"){
            _assertVisible(_link("Cost Sharing Reductions", _in($eligibilityOverviewList)));

            if ($isFinancial == "No" || !$isFinancial) {
                _assertEqual("Cost Sharing ReductionsCost-sharing reductions (CSR) are a form of financial help that help to reduce the out-of-pocket costs associated with private health insurance, " +
                    "such as deductibles, co-insurance and co-payments. If you qualify for cost-sharing reductions, you can only get those savings if you pick a silver plan. " +
                    "(This silver plan limit does not apply to members of federally recognized tribes.) for lower copaymentsA copayment, or copay, is a fixed amount you pay for a covered healthcare service, " +
                    "usually at the time you use the service., coinsuranceYour share of the costs of a covered health care service, calculated as a percent (for example, 20%) of the allowed amount for the service. " +
                    "You pay co-insurance plus any deductibles you owe. For example, if the health insurance or plan's allowed amount for an office visit is $100 and you've met your deductible, your co-insurance payment of 20% would be $20. " +
                    "The health insurance or plan pays the rest of the allowed amount. and deductiblesYour plan's deductible is the amount you owe before your insurance company covers costs. " +
                    "Generally, copays do not count toward the deductible. Please refer to your insurance company for details..", _getText(_listItem("eligibility-overview__list-item" + "[" + $i + "]", _in($eligibilityOverviewList))));
            }
            else {
                _assertEqual("Cost-sharing reductions (CSR) are a form of financial help that help to reduce the out-of-pocket costs associated with private health insurance, " +
                    "such as deductibles, co-insurance and co-payments. If you qualify for cost-sharing reductions, you can only get those savings if you pick a silver plan. " +
                    "(This silver plan limit does not apply to members of federally recognized tribes.)", _getText(_listItem("eligibility-overview__list-item" + "[" + $i + "]", _in($eligibilityOverviewList))));
            }


            _assertEqual("Cost Sharing Reductions to lower copayment, coinsurance and deductible.", _getText(_listItem("eligibility-overview__list-item"+"["+$i+"]", _in($eligibilityOverviewList))));

            // _assertVisible(_link("copayments", _in($eligibilityOverviewList)));
            // _assertVisible(_link("coinsurance", _in($eligibilityOverviewList)));
            // _assertVisible(_link("deductibles", _in($eligibilityOverviewList)));
        }
    }
}

function verifyEligibilityResultsForMembers($householdMember, $eligibility, $actionNeeded){
    _assertVisible(_heading2("Eligibility Results for household members"));
    _assertVisible(_row("Household MemberEligible for the followingAction needed"));
    var $fullName = $ssapPeople[$householdMember].fullName(true);
    _log("Current name is: " + $fullName);
    var $eligibilityResultsLength = _count("_listItem", "/[A-Za-z]/", _in(_list("eligibility-details__list",_under(_tableHeader("Eligible for the following")),_rightOf(_cell($fullName)))));
    _assertEqual($eligibility.length, $eligibilityResultsLength);
    for(var $i = 0; $i < $eligibility.length; $i++){
        if($eligibility[$i] == "Not Eligible"){
            _assertVisible(_listItem("Not EligibleNot eligible to enroll in a plan on the exchange to enroll in a Qualified Health or Dental Plan", _rightOf(_cell($fullName))));
        }
        if($eligibility[$i] == "Not seeking coverage"){
            _assertVisible(_link("Not seeking coverage", _rightOf(_cell($fullName))));
        }
        if($eligibility[$i] == "Medicaid Referral"){
            _assertVisible(_link("Medicaid Referral", _rightOf(_cell($fullName))));
            _assertVisible(_listItem("Medicaid ReferralPotentially eligible for Medicaid for basis other than income.", _rightOf(_cell($fullName))));
        }
        if($eligibility[$i] == "QHP"){
            _assertVisible(_listItem("Qualified Health and Dental Plans", _rightOf(_cell($fullName))));
        }
        if($eligibility[$i] == "Potential Medicaid"){
            _assertVisible(_link("Potentially eligible for Medicaid", _rightOf(_cell($fullName))));
        }
        if($eligibility[$i] == "APTC"){
            _assertVisible(_link("Potentially eligible for Medicaid", _rightOf(_cell($fullName))));
        }
        if($eligibility[$i] == "CSR"){
            _assertVisible(_link("Cost Sharing Reductions", _rightOf(_cell($fullName))));
        }
        if($eligibility[$i] == "Chip"){
            _assertVisible(_listItem("Potentially eligible for CHIP", _rightOf(_cell($fullName))));
        }
    }

}


function selectIfLivingWithOtherParentAndStepParent($index,$livesWithAnotherParent){
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_fieldset("Does "+$fullName+" live with another parent and/or stepparent?"));
    _click(_label($livesWithAnotherParent, _in(_fieldset("Does " +$fullName+ " live with another parent and/or stepparent?"))))

}

function selectToProvideMoreInformation($index, $provideInfo) {
    //	_assertVisible(_div("Exemption # 1 met:/"));
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_fieldset("Do you want to provide more information about the family members who live with " + $fullName + "?"));
    if ($provideInfo === "Yes") {
        _click(_label("Yes", _in(_fieldset("Do you want to provide more information about the family members who live with " + $fullName + "?"))));
        _assertVisible(_button("Update information"));
    } else {
        _click(_label("No", _in(_fieldset("Do you want to provide more information about the family members who live with " + $fullName + "?"))));
        _assertVisible(_paragraph("usa-alert__text gi-alert__info__text", _near(_fieldset("Do you want to provide more information about the family members who live with " + $fullName + "?"))));
        _assertEqual("Information provided about family members who live with " + $fullName + " will impact your eligibility results. Eligibility results will be based on all information provided on the application.",
            _getText(_paragraph("usa-alert__text gi-alert__info__text", _near(_fieldset("Do you want to provide more information about the family members who live with " + $fullName + "?")))));
    }
}

function goToInformationAboutYourHouseHold() {
    _click(_button("Save & Continue"));
    _assertVisible(_div("/Information about your Household/"));
}


function goToAIAN() {
    if (_isVisible(_button("Save"))) {
        _click(_button("Save"));
    } else {
        _click(_button("Save & Continue"));
    }
    _assertVisible(_paragraph("Are any of the people below Federally Recognized American Indian/Alaskan Natives?"));
    for (var $i = 0; $i < $ssapPeople.length; $i++) {
        var $fullName = $ssapPeople[$i].fullName(true);
        _assertVisible(_label($fullName));
    }
    _assertVisible(_label("/None of the Above/"));
}

function selectAIANPersons($indexes) {
    if ($indexes == undefined || $indexes.length == 0) {
        _assertVisible(_label("/None of the Above/"));
        _click(_label("/None of the Above/"));
    } else {
        for (var $i = 0; $i < $indexes.length; $i++) {
            var $index = $indexes[$i];
            var $fullName = $ssapPeople[$index].fullName(true);
            _wait(2000)
            if (_getAttribute(_label($fullName), "data-value") == "false") {
                _click(_label($fullName, _in(_div("//Are any of the people below American Indian\\/Alaska Native\\?Please answer this question to continue./"))));
            }
            _wait(2000);
            _assertVisible(_fieldset("Select " + $fullName + "'s membership"));
            _setSelected(_select("state", _rightOf(_label("State[" + $i + "]"), 10)), "Nevada");
            _setSelected(_select("tribeName", _near(_label("Tribe Name[" + $i + "]"), 10)), 1);
        }
    }
}

function goToMedicaidChipDenialInformation($indexes) {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Medicaid/ CHIP Denial Information"));
    _assertVisible(_paragraph("Were any of these people found not eligible for Medicaid or Pennsylvania Check Up in the past 90 days?"));
    for (var $i = 0; $i < $indexes.length; $i++) {
        var $index = $indexes[$i];
        var $fullName = $ssapPeople[$index].fullName(true);
        _assertVisible(_label($fullName, _in(_div("/Please answer this question to continue.Were any of these people found not eligible for Medicaid or Pennsylvania Check Up in the past 90 days/"))));
    }
    _assertVisible(_label("None of the Above", _in(_div("/Please answer this question to continue.Were any of these people found not eligible for Medicaid or Pennsylvania Check Up in the past 90 days/"))));
}

function selectMedicaidChipDenialInformation($indexes, $isNotFoundEligible, $month, $date, $year, $ifCitizen, $notEligibleBasedOnImmigration, $changeInImmigrationStatus, $changeInImmigrationSinceNotFoundEligible) {
    if ($indexes == undefined || $indexes.length == 0) {
        _click(_label("None of the Above", _in(_div("/Please answer this question to continue.Were any of these people found not eligible for Medicaid or Pennsylvania Check Up in the past 90 days/"))));
        return;
    }

    for (var $i = 0; $i < $indexes.length; $i++) {
        var $index = $indexes[$i];
        var $fullName = $ssapPeople[$index].fullName(true);
        _click(_label($fullName, _in(_div("/Please answer this question to continue.Were any of these people found not eligible for Medicaid or Pennsylvania Check Up in the past 90 days/"))));
        //_assertVisible(_fieldset("When was "+$fullName+" denied Medicaid or CHIP coverage?Learn moreEnter the date on the letter from the Medicaid or CHIP. If you don’t have it, make your best estimate of the date.close["+$i+"]"));
        _assertVisible(_fieldset("When was " + $fullName + " denied Medicaid or CHIP coverage?Learn moreEnter the date on the letter from the Medicaid or CHIP. If you don’t have it, make your best estimate of the date."));
        var $backDate = getBackDate(59);
        _setValue(_numberbox("month", _near(_div($fullName))), $backDate.substring(0, 2));
        _setValue(_numberbox("date", _near(_div($fullName))), $backDate.substring(3, 5));
        _setValue(_numberbox("year", _near(_div($fullName))), $backDate.substring(6, 10));
        //Non-US citizen
        if (!$ifCitizen) {
            _assertVisible(_span("/Was " + $fullName + " found not eligible for Medicaid or CHIP based on immigration/", _near(_div($fullName))));
            if ($notEligibleBasedOnImmigration == "Yes") {
                _click(_label("Yes"));
                _assertVisible(_span("/Has " + $fullName + " had a change in their immigration status /"));
                if ($changeInImmigrationStatus == "Yes") {
                    _click(_label("Yes[1]"));
                    _assertVisible(_span("Has " + $fullName + " had a change in their immigration status since they were not found eligible for Medicaid or Pennsylvania Check Up?"));
                    if ($changeInImmigrationSinceNotFoundEligible == "Yes") {
                        _click(_label("Yes[2]"));
                    } else {
                        _click(_label("No[2]"));
                    }
                } else {
                    _click(_label("No[1]"));
                }
            } else
                _click(_label("No"));
        }
    }
}

function goToPregnancyInformation($indexes) {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Pregnancy Information"));
    _assertVisible(_paragraph("/Are any of these people pregnant or were pregnant/"));

    var $parent = _div("/Please answer this question to continue.Are any of these people pregnant/");
    for (var $i = 0; $i < $indexes.length; $i++) {
        var $index = $indexes[$i];
        var $fullName = $ssapPeople[$index].fullName(true);
        _assertVisible(_label($fullName));
    }
    _assertVisible(_label("None of the Above"));
}

function selectPregnancyInformation($indexes) {
    var $parent = _div("/Please answer this question to continue.Are any of these people pregnant/");
    if ($indexes == undefined || $indexes.length == 0) {
        _click(_label("None of the Above", _in($parent)));
        return;
    }
    for (var $i = 0; $i < $indexes.length; $i++) {
        var $index = $indexes[$i];
        var $fullName = $ssapPeople[$index].fullName(true);
        _click(_label($fullName, _in($parent)));
        _assertVisible(_paragraph("How many babies are expected in this pregnancy?[" + $i + "]"));

        var $dueDate = getDueDate();

        _log("Due Date: " + $dueDate)
        _log("Due Date Month: " + $dueDate.getMonth())
        _log("Due Date Day: " + $dueDate.getDate())
        _log("Due Date Year: " + $dueDate.getFullYear())


        _setValue(_numberbox("month"), $dueDate.getMonth());
        _setValue(_numberbox("date"), $dueDate.getDate());
        _setValue(_numberbox("year"), $dueDate.getFullYear());
    }
}

function goToDisabilityInformation($indexes) {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Disability Information"));
    _assertVisible(_paragraph("Do any of these people below have a physical disability or mental health condition that limits their ability to work, attend school, or take care of their daily needs?Learn more"));
    var $under = _paragraph("Do any of these people below have a physical disability or mental health condition that limits their ability to work, attend school, or take care of their daily needs?Learn more");
    //_paragraph("Do any of these people have a physical disability or mental health condition that limits their ability to work, attend school, or take care of their daily needs?Learn more");
    for (var $i = 0; $i < $indexes.length; $i++) {
        var $index = $indexes[$i];
        var $fullName = $ssapPeople[$index].fullName(true);
        _assertVisible(_label($fullName, _under($under, 20)));
    }
    _assertVisible(_label("None of the Above", _under($under, 10)));

    _assertVisible(_paragraph("Do any of these people need help with activities of daily living (like bathing, dressing, and using the bathroom), or live in a nursing home, or other medical facility?"));
    var $under = _paragraph("Do any of these people need help with activities of daily living (like bathing, dressing, and using the bathroom), or live in a nursing home, or other medical facility?");
    for (var $i = 0; $i < $indexes.length; $i++) {
        var $index = $indexes[$i];
        var $fullName = $ssapPeople[$index].fullName(true);
        _assertVisible(_label($fullName, _under($under, 10)));
    }
    _assertVisible(_label("None of the Above[1]", _near($under)));
}

function selectDisabilityInformation($indexes) {
    var $under = _paragraph("Do any of these people below have a physical disability or mental health condition that limits their ability to work, attend school, or take care of their daily needs?Learn more");

    if ($indexes == undefined || $indexes.length == 0) {
        _click(_label("None of the Above", _near($under)));
    } else {
        for (var $i = 0; $i < $indexes.length; $i++) {
            var $index = $indexes[$i];
            var $fullName = $ssapPeople[$index].fullName(true);
            _click(_label($fullName, _under($under, 10)));
            //			_assertVisible(_paragraph("How many babies are expected in this pregnancy?["+$i+"]"));
        }
    }
}

function selectNeedHelpWithActivities($indexes) {
    var $under = _paragraph("Do any of these people need help with activities of daily living (like bathing, dressing, and using the bathroom), or live in a nursing home, or other medical facility?");
    if ($indexes == undefined || $indexes.length == 0) {
        _click(_label("None of the Above[1]", _near($under)));
    } else {
        for (var $i = 0; $i < $indexes.length; $i++) {
            var $index = $indexes[$i];
            var $fullName = $ssapPeople[$index].fullName(true);
            _click(_label($fullName + "[1]", _near(_paragraph("/Do any of these people need help with activities of daily living/"))))
            //			_click(_label($fullName+"[1]", _under($under)));
            //			_assertVisible(_paragraph("How many babies are expected in this pregnancy?["+$i+"]"));
        }
    }
}

function goToFosterCareInformation($indexes) {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Foster Care Information"));
    _assertVisible(_paragraph("Were any of these people ever in foster care?"));

    var $under = _paragraph("Were any of these people ever in foster care?");
    for (var $i = 0; $i < $indexes.length; $i++) {
        var $index = $indexes[$i];
        var $fullName = $ssapPeople[$index].fullName(true);
        _assertVisible(_label($fullName, _near($under)));
    }
    _assertVisible(_label("None of the Above", _near($under)));

}

function selectIfInFosterCare($indexes) {
    var $under = _paragraph("Were any of these people ever in foster care?");
    if ($indexes == undefined || $indexes.length == 0) {
        _click(_label("None of the Above", _near($under)));
    } else {
        for (var $i = 0; $i < $indexes.length; $i++) {
            var $index = $indexes[$i];
            var $fullName = $ssapPeople[$index].fullName(true);
            _click(_label($fullName, _near($under)));
            _assertVisible(_fieldset("In what state was " + $fullName + " in the foster care system?"));
        }
    }
}

function selectFrosterCareState($index, $state) {
    if (!$state) {
        $state = "Pennsylvania";
    }
    var $fullName = $ssapPeople[$index].fullName();
    _setSelected(_select("fosterCareState", _near(_span("/" + $fullName + "/"))), "Pennsylvania");
    _setSelected(_select("fosterCareState"), $state);
}

//@param $gotMedicaid = "Yes, No"
function selectIfMedicaidInFosterCare($index, $gotMedicaid) {
    var $fullName = $ssapPeople[$index].fullName();
    _click(_label($gotMedicaid, _in(_fieldset("/Was " + $fullName + " getting health care through/"))));
}

function selectWhatAgeLefTheFosterCare($index, $age) {
    var $fullName = $ssapPeople[$index].fullName();
    _setSelected(_select("ageWhenLeftFosterCare", _in(_fieldset("How old was " + $fullName + " when she left the foster care system?"))), $age);
}


function goToFamilyAndHouseholdSummary() {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Summary"));
    _assertVisible(_div("Review and Confirm"));
    _assertVisible(_paragraph("Here is the information you provided about everyone who is part of your household. Please take a moment to review and double-check the information. If you see any mistakes, please edit them now"));
    //	_assert(false, "TODO: Need to add assertions here.");
}

function goToIncomeInformation() {
    _assertVisible(_button("Continue"));
    _click(_button("Continue"));
    _assertVisible(_heading1("Get Ready"));
    _assertVisible(_strong("We ask for current information for everyone in your family and household to make sure you get the most benefits possible", _in(_div("usa-alert__body gi-alert__info__body"))));
    _assertEqual("We ask for current information for everyone in your family and household to make sure you get the most benefits possible Before you start, please take a moment now to gather the information listed below", _getText(_paragraph("usa-alert__text gi-alert__info__text", _in(_div("usa-alert__body gi-alert__info__body")))));
    _assertVisible(_paragraph("All fields on this application marked with an asterisk (*) are required unless otherwise indicated."));
    _assertVisible(_paragraph("You may need:"));
    _assertVisible(_listItem("Pay stubs"));
    _assertVisible(_listItem("W-2 forms"));
    _assertVisible(_listItem("Information about income"));
    _assertVisible(_button("Back"));
}

function goToIncomeSources($index) {
    _click(_button("Continue"));
    var $currentCoverageyear = getCurrentCoverageYear();
    _assertVisible(_heading1("Income Sources"));
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_heading3("Income of " + $fullName));
    _assertVisible(_paragraph("People can earn income in many ways. After you tell us about your current income we will help you estimate income for all of " + $currentCoverageyear + " so you can tell us if you expect changes."));
    _assertVisible(_paragraph("Enter all your current Income Types"));
    _assertVisible(_fieldset("Does " + $fullName + " currently earn any income?"));
    _assertVisible(_label("Yes"));
    _assertVisible(_label("No"));
}

function selectIncomeCurrently($index, $haveIncome) {
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_fieldset("Does " + $fullName + " currently earn any income?"));
    if ($haveIncome) {
        _click(_label("Yes"));
        _assertVisible(_button("Add Income Source"));
    } else {
        _click(_label("No"));
        _assertTrue(_getAttribute(_button("Add Income Source"), "disabled"))
    }
}

function addIncomeSource($index, $type, $amount, $frequency, $hoursPerWeek) {
    var $fullName = $ssapPeople[$index].fullName(true);

    _click(_button("Add Income Source"));
    _assertVisible(_heading3("Add Income for " + $fullName));
    _assertVisible(_label("What type of Income would you like to add?"));
    _setSelected(_select("type"), $type);
    if ($type === "Social Security Benefits" || $type === "Self Employment" || $type === "Retirement") {
        _assertNotVisible(_label("Name of employer"));
    } else if ($type === "Unemployment") {
        _setValue(_textbox("sourceName"), $fullName);
    } else if ($type === "Rental or Royalty") {
        _setSelected(_select("type"), "Rental or Royalty");
    } else {
        _assertVisible(_label("Name of employer"));
        _setValue(_textbox("sourceName"), $fullName);
    }
    if (_isVisible(_label("Profit or Loss"))) {
        _setSelected(_select("profit"), "Profit");
    }
    _setValue(_textbox("amount"), $amount);
    _wait(6000);
    _setSelected(_select("frequency"), $frequency);
    if (_getValue(_textbox("amount")) === "") {
        _setValue(_textbox("amount"), $amount);
        _wait(6000);
    }
    if ($hoursPerWeek) {
        _assertVisible(_label("Hours per week:"));
        _setValue(_textbox("cyclesPerFrequency"), $hoursPerWeek);
    }
    _click(_button("Save"));

    if (!$ssapPeople[$index].$incomes) {
        $ssapPeople[$index].$incomes = [];
    }

    var $income = {
        "type": $type,
        "amount": $amount,
        "frequency": $frequency,
        "hoursPerWeek": $hoursPerWeek
    };
    $ssapPeople[$index].$incomes.push($income);
    _log(JSON.stringify($ssapPeople[$index].$incomes));
    return $ssapPeople;
}


function goToTribalIncome() {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Tribal Income"));
}

function addTribalIncome($index, $personIndex, $amount, $frequency) {

    _setValue(_textbox("tribalAmount[" + $index + "]"), $amount);

    if (!$ssapPeople[$personIndex].$tribal) {
        $ssapPeople[$personIndex].$tribal = [];
    }

    var $tribal = {
        "amount": $amount,
        "frequency": $frequency
    };
    $ssapPeople[$personIndex].$tribal.push($tribal);
    _log(JSON.stringify($ssapPeople[$personIndex].$tribal));
}

function goToDeductionSources($index, $type, $amount, $frequency) {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Deduction Sources"));
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_heading3("Deductions for " + $fullName));
    //	_assertVisible(_paragraph("Does "+$fullName+" pay any of these deductions?"));
    //	_assertVisible(_fieldset("Telling us about things that can be deducted on an income tax return could make the cost of health insurance a little lower"));
    //	_assertVisible(_label("Yes"));
    //	_assertVisible(_label("No"));
    if ($amount && $frequency && $type) {
        _assertVisible(_span("Add another type of deduction or continue to review a summary of your current deductions."));
        _assertVisible(_div($amount, _near(_div($type, _under(_span("Add another type of deduction or continue to review a summary of your current deductions."))))));
        _assertVisible(_div($frequency, _near(_div($type, _under(_span("Add another type of deduction or continue to review a summary of your current deductions."))))));
    }
}

function selectToTellAboutDeductions($index, $havingDeductionAmount) {
    if ($havingDeductionAmount == "true" || $havingDeductionAmount == "TRUE" || $havingDeductionAmount == true) {
        _click(_label("Yes"));
        _assertVisible(_button("Add Deduction Source"));
    } else {
        _click(_label("No"));
        _assertTrue(_getAttribute(_button("Add Deduction Source"), "disabled"))
    }
}

function addDeductionAmount($index, $type, $amount, $frequency) {
    _click(_button("Add Deduction Source"));
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_heading3("Add Income for " + $fullName));
    //_assertVisible(_label("What type of income would you like to add"));
    _setSelected(_select("type"), $type);

    _assertVisible(_label("Amount"));
    _setValue(_textbox("amount"), $amount);
    _assertVisible(_label("How often?"));
    _setSelected(_select("frequency"), $frequency);

    if (!$ssapPeople[$index].$deduction) {
        $ssapPeople[$index].$deduction = [];
    }

    var $deduction = {
        "type": $type,
        "amount": $amount,
        "frequency": $frequency
    };
    $ssapPeople[$index].$deduction.push($deduction);
    _log(JSON.stringify($ssapPeople[$index].$deduction));

    _click(_button("Save"));
}


function goToExpectedIncome($index, $current) {
    _click(_button("Save & Continue"));
    //var $currentCoverageyear =getCurrentCoverageYear();
    _assertVisible(_heading1("Expected Income"));
    var $fullName = $ssapPeople[$index].fullName(true);
    //	_assertVisible(_span("Based on what you told us, "+$fullName+"'s income will be about "+$current+". Is this how much you think will get in "+$currentCoverageyear+"?"));
}

function changeExpectedIncome($index, $totalYearlyAmount, $changeExpectedIncome) {
    var $fullName = $ssapPeople[$index].fullName(true);
    var $currentCoverageyear = getCurrentCoverageYear();
    if ($changeExpectedIncome) {
        _click(_label("Yes"));
    } else {
        _click(_label("No"));
        _assertVisible(_paragraph("Based on what you know today, how much do you think " + $fullName + " will make in " + $currentCoverageyear + "?"));
        _setValue(_textbox("projectedIncome", _rightOf(_label("Total yearly amount"), 10)), $totalYearlyAmount);
    }
}

function goToIndividualIncomeSummary($index) {
    _assertVisible(_button("Save & Continue"));
    _click(_button("Save & Continue"));
    var $currentCoverageyear = getCurrentCoverageYear();
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_heading1("Summary"));
    _assertVisible(_heading3($fullName + "'s income summary"));
    //Assertion need to be done
}


function goToIncomeSummary() {
    _click(_button("Continue"));
    _assertVisible(_heading1("Income Summary"));
    _assertVisible(_heading3("Review and Confirm", _in(_div("subsection"))));
    _assertVisible(_paragraph("Here is the information you provided about everyone who is part of your household. Please take a moment to review and double-check the information. If you see any mistakes, please edit them now.", _in(_div("subsection"))));
    //Need to do assertions
}

function goToOtherHealthCoverage($index) {
    if (_isVisible(_button("Save & Continue"))) {
        _click(_button("Save & Continue"));
    } else {
        _click(_button("Continue"));
    }
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_heading1("Other Health Coverage"));
    _assertVisible(_span("Is " + $fullName + " currently enrolled in health coverage that will extend beyond 60 days from today?"));
    _assertVisible(_label("Yes", _in(_div("subsection"))));
    _assertVisible(_label("No", _in(_div("subsection"))));
    _assertVisible(_button("Back"));
    _assertVisible(_button("Save & Continue"));
}

function selectHealthCoverageEnrollment($index, $isEnrolled, $CoverageName, $insuranceName, $policyNumber) {
    var $fullName = $ssapPeople[$index].fullName(true);
    if ($isEnrolled === "Yes") {
        _click(_label("Yes"));
        _assertVisible(_fieldset("/What type of coverage does " + $fullName + " have/"));
        for (var $i = 0; $i < $CoverageName.length; $i++) {
            _click(_label($CoverageName[$i]));

        }
        if ($CoverageName == "Other Coverage") {
            $coverageName = $insuranceName;
            _setValue(_textbox("insuranceName"), $insuranceName);
            _setValue(_textbox("policyNumber"), $policyNumber);

        }
        if (!$ssapPeople[$index].$coverageName) {
            $ssapPeople[$index].$coverageName = [];
        }

        var $coverageName = {
            "coverageName": $CoverageName
        };
        $ssapPeople[$index].$coverageName.push($coverageName);
        _log(JSON.stringify($ssapPeople[$index].$coverageName));

    } else {
        _click(_label("No"));
    }
    if (!$ssapPeople[$index].$healthEnrollment) {
        $ssapPeople[$index].$healthEnrollment = $isEnrolled;
    }
    _log(JSON.stringify($ssapPeople[$index].$healthEnrollment));
}


function goToReconcilationOfAPTC($index) {
    if (_isVisible(_button("Save & Continue"))) {
        _click(_button("Save & Continue"));
    } else {
        _click(_button("Continue"));
    }
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_heading1("Reconciliation of APTC"));
    _assertVisible(_fieldset("Did " + $fullName + " reconcile premium tax credits on their tax return for past years?"));
    _assertVisible(_label("/Yes/"));
    _assertVisible(_label("/No/"));
    _assertVisible(_button("Back"));
    _assertVisible(_button("Save & Continue"));
}

function selectReconciledAPTCPastYear($index, $haveReconciled) {
    var $fullName = $ssapPeople[$index].fullName(true);
    if ($haveReconciled === "Yes") {
        _click(_label("/Yes/"));
    } else {
        _click(_label("/No/"));
    }
    if (!$ssapPeople[$index].$reconciledAPTC) {
        $ssapPeople[$index].$reconciledAPTC = $haveReconciled;
    }
    _log(JSON.stringify($ssapPeople[$index].$reconciledAPTC));
}

function goToEmployerCoverageDetail($index) {
    if (_isVisible(_button("Save & Continue"))) {
        _click(_button("Save & Continue"));
    } else {
        _click(_button("Continue"));
    }
    var $fullName = $ssapPeople[$index].fullName(true);
    var $currentCoverageyear = getCurrentCoverageYear();
    _assertVisible(_heading1("Employer Coverage Detail"));
    _assertVisible(_fieldset("/Will " + $fullName + " be offered health coverage through a job (including another person's job, like a spouse or parent)?/"))
    _assertVisible(_label("Yes"));
    _assertVisible(_label("No"));
    _assertVisible(_button("Back"));
    _assertVisible(_button("Save & Continue"));
}

function selectEmployerCoverageDetails($index, $offerCoverage, $indexes, $phoneNumber, $meetsMinValue, $premiumAmount, $frequency) {
    var $fullName = $ssapPeople[$index].fullName(true);
    if ($offerCoverage === "Yes") {
        _click(_label("Yes"));
        for (var $i = 0; $i < $indexes.length; $i++) {
            var $name = $ssapPeople[$indexes[$i]].fullName(true);
            _assertVisible(_span($name, _in(_fieldset("Employer NameEmployee Name"))));
        }
        _click(_span($fullName, _in(_fieldset("Employer NameEmployee Name"))));
        _assertVisible(_button("Add Employer Detail"));
        _assertVisible(_label("Phone", _near(_span($fullName))));
        var $phone = $phoneNumber[0] + "" + $phoneNumber[1] + "" + $phoneNumber[2];
        _setValue(_textbox("phone", _near(_span($fullName))), $phone);
        _assertVisible(_fieldset("/Does " + $fullName + " offer a health plan that meets the minimum value standard/", _near(_span($fullName))))
        if ($meetsMinValue === "Yes") {
            _assertVisible(_label("Yes", _near(_span($fullName))));
            _click(_label("Yes", _near(_span($fullName))));
            _assertVisible(_div("What is the premium amount for the lowest cost plan available to " + $fullName + " that meets the minimum value standard?", _near(_span($fullName))));
            _assertVisible(_label("Total amount", _near(_span($fullName))));
            _setValue(_textbox("employerPremium", _near(_span($fullName))), $premiumAmount);
            _assertVisible(_label("How often?", _near(_span($fullName))));
            _setSelected(_select("employerPremiumFrequency", _near(_span($fullName))), $frequency);

        } else {
            _assertVisible(_label("No", _near(_span($fullName))));
            _click(_label("No", _near(_span($fullName))));
        }

    } else {
        _click(_label("No"));
    }
    if (!$ssapPeople[$index].$employerCoverage) {
        $ssapPeople[$index].$employerCoverage = $offerCoverage;
    }
    if (!$ssapPeople[$index].$meetsMinValueStandard) {
        $ssapPeople[$index].$meetsMinValueStandard = $meetsMinValue;
    }
    if (!$ssapPeople[$index].$PremiumAmt) {
        $ssapPeople[$index].$PremiumAmt = $premiumAmount;
    }
    if (!$ssapPeople[$index].$PremiumAmtFrequency) {
        $ssapPeople[$index].$PremiumAmtFrequency = $frequency;
    }
    _log(JSON.stringify($ssapPeople[$index].$employerCoverage));
    _log(JSON.stringify($ssapPeople[$index].$meetsMinValueStandard));
    _log(JSON.stringify($ssapPeople[$index].$PremiumAmt));
    return $ssapPeople;
}

function goToStateEmployeeHealthBenefit($index) {
    if (_isVisible(_button("Save & Continue"))) {
        _click(_button("Save & Continue"));
    } else {
        _click(_button("Continue"));
    }
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_heading1("State Employee Health Benefit"));
    _assertVisible(_fieldset("Is " + $fullName + " offered the Pennsylvania state employee health benefit plan through a job or a family member’s job?"));
    _assertVisible(_label("Yes"));
    _assertVisible(_label("No"));
}

function selectStateEmployeeHealthBenefit($index, $isOfferedHealthBenefit) {
    var $fullName = $ssapPeople[$index].fullName(true);
    if ($isOfferedHealthBenefit === "Yes") {
        _click(_label("Yes"));
    } else if ($isOfferedHealthBenefit === "No") {
        _click(_label("No"));
    }
}

function goToAdditionalInformationPage($index) {
    if (_isVisible(_button("Save & Continue"))) {
        _click(_button("Save & Continue"));
    } else {
        _click(_button("Continue"));
    }
    _assertVisible(_heading1("Additional Information"));
}

function selectIfEligibleForHealthServices($index, $option) {
    var $fullName = $ssapPeople[$index].fullName(true);
    var $parentEl = _div("/is " + $fullName + " eligible to get health services from the Indian Health Service, a tribal health program, or an urban Indian health program or through referral from one of these programs?/");
    _assertVisible($parentEl);
    _click(_label($option, _in($parentEl)));
}

function selectIfEverGottenHealthServices($index, $option) {
    var $fullName = $ssapPeople[$index].fullName(true);
    var $parentEl = _div("/Has " + $fullName + " ever gotten a health service from the Indian Health Service, a tribal health program, or urban Indian health program or through a referral from one of these programs?/");
    _assertVisible($parentEl);
    _click(_label($option, _in($parentEl)));
}

function selectIfNeedHelpPayingBills($index, $option) {
    var $fullName = $ssapPeople[$index].fullName(true);
    var $parentEl = _div("/Would " + $fullName + " like help paying for medical bills from the last 3 months?/");
    _assertVisible($parentEl);
    _click(_label($option, _in($parentEl)));
}

function selectIfParentLivingDifferentAddress($index, $option) {
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_fieldset("Does " + $fullName + " have a parent living outside the home?"));
    _assertVisible(_label("Yes", _in(_fieldset("Does " + $fullName + " have a parent living outside the home?"))));
    _assertVisible(_label("No", _in(_fieldset("Does " + $fullName + " have a parent living outside the home?"))));
    if ($option === "Yes") {
        _click(_label("Yes", _in(_fieldset("Does " + $fullName + " have a parent living outside the home?"))));
    } else {
        _click(_label("No", _in(_fieldset("Does " + $fullName + " have a parent living outside the home?"))));
    }
}


function goToAddtionalInformationSummary($indexes) {
    if (_isVisible(_button("Save & Continue"))) {
        _click(_button("Save & Continue"));
    } else {
        _click(_button("Continue"));
    }
    _assertVisible(_heading1("Summary"));
    _assertVisible(_heading3("Review and Confirm"));
    _assertVisible(_paragraph("Here is the information you provided about everyone who is part of your household. Please take a moment to review and double-check the information. If you see any mistakes, please edit them now", _in(_div("subsection"))));
    _assertVisible(_button("Back"));
    _assertVisible(_button("Continue"));
    //Need to do assertions
}

function goToReviewAndSign() {
    if (_isVisible(_button("Save & Continue"))) {
        _click(_button("Save & Continue"));
    } else {
        _click(_button("Continue"));
    }
    _assertVisible(_heading1("Review and Sign"));
    _assertEqual("Now it's time to review and sign your health insurance application. Please review all the detailed application information about every household member who is applying for health insurance. In a moment, you will finalize your application and provide your eSignature.", _getText(_paragraph("usa-alert-text", _in(_div("usa-alert-body gi-alert__info__body")))));
    _assertVisible(_button("Back"));
    _assertVisible(_button("Continue"));
}

function goToFinalReview($ssapInformation, $isFinancial) {
    _click(_button("Continue"));
    //assertion to be done
    _assertVisible(_heading1("Final Review"));
    _assertVisible(_heading3("Household and Demographic Information"));
    _assertVisible(_button("Download"));
    _assertVisible(_button("Print"));
    _assertVisible(_heading3("Applying for Health Coverage"));
    _assertVisible(_heading3("Household Members"));
    if ($isFinancial !== "NO") {
        _assertVisible(_heading3("Income Information"));
        _assertVisible(_heading3("Additional Information"));
    }
    _assertVisible(_button("Back"));
    _assertVisible(_button("Continue"));
}

function goToSignAndSubmit($indexes, $isFinancial, $isComplex) {
    _click(_button("Continue"));
    _wait(1000);
    var $fullName = $ssapPeople[$indexes[0]].fullName(true);
    _assertVisible(_heading1("Sign and Submit"));
    _assertVisible(_heading3("Read and check the box next to each statement if you agree"));
    _assertVisible(_fieldset("Are any applicants incarcerated (in prison or jail)"));
    //Assertion to be done
    if ($isFinancial !== "NO") {
        _assertVisible(_span("To make it easier to determine my future eligibility for cost-sharing opportunities, " +
            "I agree to allow Pennie to use my income data, including information from tax returns, for the next 5 years. " +
            "To the extent that this information changes, I understand that I may have to update the information I am providing and " +
            "that failure to do so could result in legal consequences. " +
            " Additionally, I understand that Pennie will send me notices and that I can opt out at any time."));
        _assertEqual("I understand that if anyone on my application enrolls in an Exchange health plan and is later found to have other qualifying health coverage (including Medicare, Medicaid, or CHIP), " +
            "Pennie will be required to take action, including, but not limited to automatically ending their Exchange health plan or eliminating their advanced premium tax credits or cost-sharing reductions.", _getText(_div("gi-component gi-checkbox disp-styl[1]")));
        _assertEqual("/I understand that I have 30 days to notify the Pennie of any change of information in this application. " +
            "I will report any changes within this time period. " +
            "I understand that changes in my household size address, income, or other details might affect my or my household's eligibility for specific benefits. " +
            "I understand and will notify Pennie if my application information changes/" ||
            "I understand that I have 30 days to notify Pennie of any change of information in this application. " +
            "I will report any changes within this time period. " +
            "I understand that changes in my household size, address or other details might affect my or my household's eligibility for specific benefits. " +
            "I understand and will notify Pennie if my application information changes.", _getText(_div("gi-component gi-checkbox disp-styl-none")));
    }
    _assertVisible(_listItem("I agree"));
    _assertVisible(_listItem("I disagree"));
    _assertVisible(_label($fullName + "'s Electronic Signature"));
    _assertVisible(_textbox("signature"));
    _assertVisible(_button("Back"));
    _assertVisible(_button("/Submit Application/i"));
}

function selectIncarceratedIndividual1($indexes, $isFinancial) {
    if ($indexes.length == 0 || $indexes === undefined) {
        var $fullName = $ssapPeople[0].fullName(true);
        if (!_getAttribute(_label("No. No one listed on this health insurance application is incarcerated (in prison or jail)."), "data-value")) {
            _click(_label("No. No one listed on this health insurance application is incarcerated (in prison or jail)."));
        }
        _click(_label("I agree"));
        // if ($isFinancial !== "NO") {
        //     _click(_label("usa-checkbox__label gi-checkbox__label undefined[3]"));
        // }


        if (_isVisible(_label("I understand that if anyone on my application who enrolls in coverage through Pennie, " +
            "is later found to have other qualifying health coverage (including Medicare, Medicaid, or CHIP), " +
            "Pennie will automatically end their coverage through Pennie."))) {
            _click(_label("I understand that if anyone on my application who enrolls in coverage through Pennie, " +
                "is later found to have other qualifying health coverage (including Medicare, Medicaid, or CHIP), " +
                "Pennie will automatically end their coverage through Pennie."));
        } else {
            _log("_agreeToEndCoverage_label is not visible")
        }
        if (_isVisible(_label("If anyone on this application enrolls in Medicaid, " +
            "I’m giving the Medicaid agency the right to pursue and get any money from other health insurance, legal settlements, or other third parties. " +
            "I’m also giving the Medicaid agency rights to pursue and get medical support from a spouse or parent."))) {
            _click(_label("If anyone on this application enrolls in Medicaid, " +
                "I’m giving the Medicaid agency the right to pursue and get any money from other health insurance, legal settlements, or other third parties. " +
                "I’m also giving the Medicaid agency rights to pursue and get medical support from a spouse or parent."));
        } else {
            _log("_agreeToCooperateMedicaid_label is not visible")
        }
        if (_isVisible(_label("If a child on this application has a parent living outside of the home, " +
            "I know I’ll be asked to cooperate with the agency that collects medical support from an absent parent. " +
            "If I think that cooperating to collect medical support will harm me or my children, " +
            "I can tell the agency and I may not have to cooperate."))) {
            _click(_label("If a child on this application has a parent living outside of the home, " +
                "I know I’ll be asked to cooperate with the agency that collects medical support from an absent parent. " +
                "If I think that cooperating to collect medical support will harm me or my children, " +
                "I can tell the agency and I may not have to cooperate."));
        } else {
            _log("_acknowledgeOutsideParent_label is not visible")
        }
        if (_isVisible(_label("/I understand that I have 30 days to notify the Pennie of any change of information in this application. " +
            "I will report any changes within this time period. I understand that changes in my household size address, income, " +
            "or other details might affect my or my household's eligibility for specific benefits. " +
            "I understand and will notify Pennie if my application information changes./"))) {
            _click(_label("/I understand that I have 30 days to notify the Pennie of any change of information in this application. " +
                "I will report any changes within this time period. I understand that changes in my household size address, income, " +
                "or other details might affect my or my household's eligibility for specific benefits. " +
                "I understand and will notify Pennie if my application information changes./"));
        } else {
            _log("_isReadyToReportForChanges_label is not visible")
        }

        if (_isVisible(_label("By typing my name in the box below, I consent to my information being shared with the Pennsylvania Department of " +
            "Human Services for the purposes of making a Medicaid or Children’s Health Insurance Program (CHIP) eligibility determination if my " +
            "application fits specific criteria to be potentially eligible or if I otherwise request a Medicaid or CHIP determination directly."))) {
            _click(_label("By typing my name in the box below, I consent to my information being shared with the Pennsylvania Department of " +
                "Human Services for the purposes of making a Medicaid or Children’s Health Insurance Program (CHIP) eligibility determination if my " +
                "application fits specific criteria to be potentially eligible or if I otherwise request a Medicaid or CHIP determination directly."));
        } else {
            _log("_agreeToCooperateMedicaid_label is not visible")
        }


        if (_isVisible(_label("I understand that if anyone on my application enrolls in an Exchange health plan and is later " +
            "found to have other qualifying health coverage (including Medicare, Medicaid, or CHIP), Pennie will be required to take action, " +
            "including, but not limited to automatically ending their Exchange health plan or eliminating their advanced premium tax credits or cost-sharing reductions."))) {
            _click(_label("I understand that if anyone on my application enrolls in an Exchange health plan and is later " +
                "found to have other qualifying health coverage (including Medicare, Medicaid, or CHIP), Pennie will be required to take action, " +
                "including, but not limited to automatically ending their Exchange health plan or eliminating their advanced premium tax credits or cost-sharing reductions."));
        } else {
            _log("_agreeToEndCoverage_label complex is not visible")
        }

        if (_isVisible(_label("By typing my name in the box below, I am giving the Pennsylvania Department of Human Services, " +
            "as the Medicaid and Children’s Health Insurance Program (CHIP) agency, the right to pursue and get any money from other health insurance, " +
            "legal settlements, or other third parties should someone on this application enroll in Medicaid or CHIP. " +
            "I am also giving the Pennsylvania Department of Human Services, as the Medicaid agency, the right to pursue and get medical support from a spouse or parent."))) {
            _click(_label("By typing my name in the box below, I am giving the Pennsylvania Department of Human Services, " +
                "as the Medicaid and Children’s Health Insurance Program (CHIP) agency, the right to pursue and get any money from other health insurance, " +
                "legal settlements, or other third parties should someone on this application enroll in Medicaid or CHIP. " +
                "I am also giving the Pennsylvania Department of Human Services, as the Medicaid agency, the right to pursue and get medical support from a spouse or parent."));
        } else {
            _log("_agreeToMoneyPersual_label complex is not visible")
        }

        // if (_isVisible(_label("By typing my name in the box below, I am giving the Pennsylvania Department of Human Services, " +
        //     "as the Medicaid and Children’s Health Insurance Program (CHIP) agency, the right to pursue and get any money from other health insurance, " +
        //     "legal settlements, or other third parties should someone on this application enroll in Medicaid or CHIP. " +
        //     "I am also giving the Pennsylvania Department of Human Services, as the Medicaid agency, the right to pursue and get medical support from a spouse or parent."))) {
        //     _click(_label("By typing my name in the box below, I am giving the Pennsylvania Department of Human Services, " +
        //         "as the Medicaid and Children’s Health Insurance Program (CHIP) agency, the right to pursue and get any money from other health insurance, " +
        //         "legal settlements, or other third parties should someone on this application enroll in Medicaid or CHIP. " +
        //         "I am also giving the Pennsylvania Department of Human Services, as the Medicaid agency, the right to pursue and get medical support from a spouse or parent."));
        // } else {
        //     _log("_agreeToMoneyPersual_label complex is not visible")
        // }


        if (_isVisible(_label("By typing my name in the box below, I am signing this application and affirming the accuracy of the " +
            "information provided and any assertions made herein, under penalty of perjury, pursuant to 28 U.S.C. § 1749 and 18 Pa.C.S. § 4904. " +
            "I acknowledge that I may be subject to penalties under federal and state law if I intentionally provide false information. " +
            "Additionally, I acknowledge that typing my name in the box below constitutes my signature."))) {
            _click(_label("By typing my name in the box below, I am signing this application and affirming the accuracy of the " +
                "information provided and any assertions made herein, under penalty of perjury, pursuant to 28 U.S.C. § 1749 and 18 Pa.C.S. § 4904. " +
                "I acknowledge that I may be subject to penalties under federal and state law if I intentionally provide false information. " +
                "Additionally, I acknowledge that typing my name in the box below constitutes my signature."));
        } else {
            _log("_penaltyPerjury_label complex is not visible")
        }

        if (_isVisible(_label("I acknowledge that if a child on this application has a parent living outside of the home, " +
            "I know I will be asked to cooperate with the agency that collects medical support from an absent parent. " +
            "If I think that cooperating to collect medical support will harm me or my children, I can tell the agency and I may not have to cooperate."))) {
            _click(_label("I acknowledge that if a child on this application has a parent living outside of the home, " +
                "I know I will be asked to cooperate with the agency that collects medical support from an absent parent. " +
                "If I think that cooperating to collect medical support will harm me or my children, I can tell the agency and I may not have to cooperate."));
        } else {
            _log("_medicaidConsent_label complex is not visible")
        }

        if (_isVisible(_label("/I also attest that the information provided in this application, at the time it was submitted, was true and correct to the best of my knowledge./"))) {
            _click(_label("/I also attest that the information provided in this application, at the time it was submitted, was true and correct to the best of my knowledge./"));
        } else {
            _log("_isTruthful complex is not visible")
        }


        _setValue(_textbox("signature"), $fullName);
    } else {
        var $fullName = $ssapPeople[0].fullName(true);
        //TODO
    }
    // //TODO: implement Eligibility summary page 20.9 changes
    _wait(3000);
    if (_isVisible(_heading3("Application is in progress..."))) {
        _wait(120000, !_isVisible(_heading3("Application is in progress...")));
    }
    _click(_button("Submit application"));
    _wait(3000);
    if (_isVisible(_heading3("Application is in progress..."))) {
        _wait(120000, !_isVisible(_heading3("Application is in progress...")));
    }
    _assertNotVisible(_span("Please check this box to continue"));
}

function selectIncarceratedIndividual($indexes, $isFinancial){
    if($indexes.length == 0 || $indexes === undefined){
        var $fullName = $ssapPeople[0].fullName(true);
        if(!_getAttribute(_label("No. No one listed on this health insurance application is incarcerated (in prison or jail)."),"data-value")){
            _click(_label("No. No one listed on this health insurance application is incarcerated (in prison or jail)."));
        }
        _click(_label("I agree"));
        if($isFinancial !== "NO"){
            _click(_label("/agreeToEndCoverage/"));
            _click(_label("/agreeToCooperateMedicaid/"));
            _click(_label("/agreeToMoneyPersual_label/"));
            _click(_label("/penaltyPerjury_label/"));
            _click(_label("/medicaidConsent_label/"));
        }

        _click(_label("/isReadyToReportForChanges_label/"));
        _click(_label("/isTruthful_label/"));
        _setValue(_textbox("signature"), $fullName);
    }
}


function selectIncarceratedIndividualWork($indexes, $isFinancial){
    if($indexes.length == 0 || $indexes === undefined){
        var $fullName = $ssapPeople[0].fullName(true);
        if(!_getAttribute(_label("No. No one listed on this health insurance application is incarcerated (in prison or jail)."),"data-value")){
            _click(_label("No. No one listed on this health insurance application is incarcerated (in prison or jail)."));
        }
        _click(_label("I agree"));
        _wait(1000);
        if($isFinancial !== "NO"){
            _assertEqual("I understand that if anyone on my application enrolls in an Exchange health plan and is " +
                "later found to have other qualifying health coverage (including Medicare, Medicaid, or CHIP), " +
                "Pennie will be required to take action, including, but not limited to automatically ending their Exchange " +
                "health plan or eliminating their advanced premium tax credits or cost-sharing reductions.", _getText(_label("/agreeToEndCoverage/")));
            _click(_label("/agreeToEndCoverage/"));
            _wait(1000);
            _assertEqual("By typing my name in the box below, I consent to my information being shared with the Pennsylvania Department of " +
                "Human Services for the purposes of making a Medicaid or Children’s Health Insurance Program (CHIP) eligibility determination if my " +
                "application fits specific criteria to be potentially eligible or if I otherwise request a Medicaid or CHIP determination directly.", _getText(_label("/agreeToCooperateMedicaid/")));
            _click(_label("/agreeToCooperateMedicaid/"));
            _wait(1000);

            _assertEqual("By typing my name in the box below, I am giving the Pennsylvania Department of Human Services, " +
                "as the Medicaid and Children’s Health Insurance Program (CHIP) agency, the right to pursue and get any money from other health insurance, " +
                "legal settlements, or other third parties should someone on this application enroll in Medicaid or CHIP. " +
                "I am also giving the Pennsylvania Department of Human Services, as the Medicaid agency, the right to pursue and get medical support from a spouse or parent.", _getText(_label("/agreeToCooperateMedicaid/")));
            _click(_label("/agreeToMoneyPersual_label/"));
            _wait(1000);

            _assertEqual("By typing my name in the box below, I am signing this application and affirming the accuracy of the " +
                "information provided and any assertions made herein, under penalty of perjury, pursuant to 28 U.S.C. § 1749 and 18 Pa.C.S. § 4904. " +
                "I acknowledge that I may be subject to penalties under federal and state law if I intentionally provide false information. " +
                "Additionally, I acknowledge that typing my name in the box below constitutes my signature.", _getText(_label("/agreeToCooperateMedicaid/")));
            _click(_label("/penaltyPerjury_label/"));
            _wait(1000);
        }
        _assertEqual("I acknowledge that if a child on this application has a parent living outside of the home, " +
            "I know I will be asked to cooperate with the agency that collects medical support from an absent parent. " +
            "If I think that cooperating to collect medical support will harm me or my children, I can tell the agency and I may not have to cooperate.", _getText(_label("/medicaidConsent_label/")));
        _click(_label("/medicaidConsent_label/"));
        _wait(1000);
        //30 days
        _assertEqual("I understand that I have 30 days to notify the Pennie of any change of information in this application. I will report any changes within this time period. " +
            "I understand that changes in my household size address, income, or other details might affect my or my household's eligibility for specific benefits. " +
            "I understand and will notify Pennie if my application information changes.", _getText(_label("/isReadyToReportForChanges/")));
        _click(_label("/isReadyToReportForChanges_label/"));
        //by typing
        _wait(1000);
        _assertEqual("I also attest that the information provided in this application, at the time it was submitted, was true and correct to the best of my knowledge. " +
            "By typing my name in the box below, I am signing this application and affirming the accuracy of the information provided and any assertions made herein, " +
            "under penalty of perjury, pursuant to 28 U.S.C. § 1749 and 18 Pa.C.S. § 4904. I acknowledge that I may be subject to penalties " +
            "under federal and state law if I intentionally provide false information. Additionally, I acknowledge that typing my name in the box below constitutes my signature.", _getText(_label("/isTruthful_label/")));
        _click(_label("/isTruthful_label/"));
        _wait(1000);
        _setValue(_textbox("signature"), $fullName);
    }
    else{
        var $fullName = $ssapPeople[0].fullName(true);
        //TODO
    }
}



function goToPreeligibiltyModal($indexes, $event, $days) {
    //TODO: implement Eligibility summary page 20.9 changes

    _wait(3000);
    if (_isVisible(_heading3("Application is in progress..."))) {
        _wait(360000, !_isVisible(_heading3("Application is in progress...")));
    }

    if (_isVisible(_button("Submit application"))) {
        _click(_button("Submit application"));
    }
    _wait(3000);
    if (_isVisible(_heading3("Application is in progress..."))) {
        _wait(360000, !_isVisible(_heading3("Application is in progress...")));
    }
    _wait(3000);
    if (_isVisible(_button("Go to My Dashboard"))) {
        _click(_button("Go to My Dashboard"));
    }
    // if (_isVisible(_div("/Information about your Eligibility/"))) {
    //     _assertVisible(_paragraph("Please select applicants you would like to enroll in a full-priced exchange plan while awaiting Medicaid eligibility determination:"));
    //     //_assertEqual("If you need additional information about your Medicaid/CHIP assessment, then please reach out to 800-992-0900. If you need information about enrolling in a Pennsylvania Health Link Exchange plan, then please call 800-547-2927, TTY 711", _getText(_paragraph(2)));
    //     _assertEqual("/If you need additional information about your Medicaid/", _getText(_paragraph(2)));
    //     for (var $i = 0; $i < $indexes.length; $i++) {
    //         var $fullName = $ssapPeople[$indexes[$i]].fullName(true);
    //         _assertVisible(_label($fullName));
    //         _click(_label($fullName));
    //     }
    //     _assertVisible(_button("Cancel"));
    //     _assertVisible(_button("Save"));
    // }
    // // _click(_button("Save"));
    // _wait(5000);
    // if (_isVisible(_heading3("Application is in progress..."))) {
    //     _wait(60000, !_isVisible(_heading3("Application is in progress...")));
    // }
    // _click(_button("Go to My Dashboard"));
    // _wait(30000, _isVisible(_button("SHOP FOR PLANS")));
}

function goToMyEligibilityResults($coverageYear, $isPresentOptionalActionsMedicaid, $isPresentfullDeteremination){_wait(5000);
    _wait(5000);
    if (_isVisible(_heading3("Application is in progress..."))) {
        _wait(120000, !_isVisible(_heading3("Application is in progress...")));
    }
    _assertVisible(_button("Submit application"));
    _click(_button("Submit application"));
    _wait(5000);
    if (_isVisible(_heading3("Application is in progress..."))) {
        _wait(120000, !_isVisible(_heading3("Application is in progress...")));
    }
    if($isPresentOptionalActionsMedicaid == "No"){
        verifyOptionalActionsForMedicaidChipAssessed($isPresentOptionalActionsMedicaid);
    }
    verifyFullDetermination($isPresentfullDeteremination);
}

function verifyFullDetermination($isPresent){
    _wait(1000);
    if (_isVisible(_heading3("Application is in progress..."))) {
        _wait(120000, !_isVisible(_heading3("Application is in progress...")));
    }
    if($isPresent == "Yes"){
        _assertVisible(_heading2("Optional actions"));
        _assertEqual("Based on your application, you are eligible to enroll in a Qualified Health Plan through Pennie. " +
            "No household members have been assessed as potentially eligible for Medicaid or CHIP. Per regulation 45 CFR 155.345(c), " +
            "under the Patient Protection and Affordable Care Act, your household has the option to request a full Medicaid eligibility determination." +
            "You should only request this option if you have a specific reason to think you are eligible for Medicaid that was not included in the application, " +
            "including being age 65 or older, if you are blind, or have a disability. If you request this option, you must provide the " +
            "Pennsylvania Department of Human Services (DHS) with additional information about your living arrangements, assets, resources and income before taxes. " +
            "By requesting a full determination, you acknowledge that if you enroll in Medicaid, DHS has the right to pursue and get any money from other health insurance, " +
            "legal settlements, or other third parties should someone on this application enroll in Medicaid or CHIP. You are also giving DHS, as the Medicaid agency, the right to pursue " +
            "and get medical support from a spouse or parent.Request Full Medicaid Determination", _getText(_div("request-determination")));
        _assertEqual("Request Full Medicaid Determination", _getText(_button("eligibilityRequestFullDetermination")));
    }
    else{
        _assertNotVisible(_div("request-determination"));
    }
}

function verifyOptionalActionsForMedicaidChipAssessed($sectionIsVisible, $numberOfMembers, $eligibilities){
    _wait(1000);
    if (_isVisible(_heading3("Application is in progress..."))) {
        _wait(120000, !_isVisible(_heading3("Application is in progress...")));
    }
    if($sectionIsVisible == "Yes"){
        _assertVisible(_heading2("Optional actions"));
        _assertEqual("Options for individuals potentially eligible for Medicaid/CHIP", _getText(_heading3("seeks-QHP__toggle")));
        _assertEqual("Based on the information you provided, the following household members are potentially eligible for free or " +
            "low cost Medicaid or CHIP coverage through the Pennsylvania Department of  Human Services. " +
            "These members can still enroll in a Qualified Health Plan through Pennie, however, " +
            "they will not be eligible for financial assistance to lower the cost of health insurance at this time. " +
            "Check the box below if you wish to pay full price to enroll this member(s) into a Qualified Health Plan.", _getText(_paragraph("seeks-QHP__note")));
        _assertVisible(_row("Household MemberEnroll in a Qualified Health Plan?"));
        var $membersList = _count("_paragraph", "text-bold", _in(_table(0, _in(_div("seeks-QHP")))));
        _assertEqual($numberOfMembers.length, $membersList);
        for(var $i =0; $i<$membersList; $i++){
            var $fullName = $numberOfMembers[$i].fullName(true);
            _assertVisible(_paragraph("Potentially eligible for " + $eligibilities[$i], _in(_parentNode(_paragraph($fullName)))))
        }
    }
    else{
        _assertNotVisible(_row("Household MemberEnroll in a Qualified Health Plan?"));
    }

}

function goToInformationAboutMedicareModal($index) {
    _click(_button("Save & Continue"));
    var $fullName = $ssapPeople[$index].fullName(true);
    _assertVisible(_div("Information About Medicare"));
    //_assertVisible(_paragraph($fullName + " like you may be eligible for Medicare. If you have Medicare, you cannot enroll in Exchange coverage"));
    _assertVisible(_paragraph($fullName + " looks like you may be eligible for Medicare. If you have Medicare, you cannot enroll in Pennie coverage"));
    _assertVisible(_paragraph("If someone has a Medicare coverage, he or she cannot enroll in coverage through Pennie."));

    _assertVisible(_button("Close"));
    _assertVisible(_button("Ok"));
    _click(_button("Ok"));
}

function selectIndividualWithDifferentAddress($index) {
    var $fullName = $ssapPeople[$index].fullName(true);
    _click(_label($fullName));
}

function addHouseholdAddress($index, $address1, $address2, $city, $zip, $state, $county, $haveSameAddress) {
    if ($haveSameAddress === "Yes") {
        //var $address = $address1 +", "+$city+", PA, "+$zip;
        //var $address = `${address1},  ${city}, PA, ${zip}`;
        var $address = $address1 + ",  " + $city + ", PA, " + $zip;
        var $i = $index - 1;
        _click(_label($address + "[" + $i + "]"));
    } else {
        _click(_submit("Add Address"));
        _assertVisible(_heading3("Add address"));
        _setValue(_textbox("streetAddress1"), $address1);
        _setValue(_textbox("streetAddress2"), $address2);
        _setValue(_textbox("city"), $city);
        _setValue(_textbox("postalCode"), $zip);
        _setSelected(_select("state"), $state);
        _setSelected(_select("countyCode"), $county);
        _click(_button("Save"));
    }
    var $fullName = $ssapPeople[$index].fullName(true);
    $ssapPeople[$index].$homeAddress1 = $address1;
    $ssapPeople[$index].$homeAddress2 = $address2;
    $ssapPeople[$index].$homeCity = $city;
    $ssapPeople[$index].$homeZip = $zip;
    $ssapPeople[$index].$homeCounty = $county;

    _log(JSON.stringify($ssapPeople[$index]));
    return $ssapPeople;
}

function selectHouseholdAddress($index, $addressInfo, $positionOnPage) {
    var $fullName = $ssapPeople[$index].fullName(true);
    var $address = $addressInfo[$index].$homeAddress1 + ", " + $addressInfo[$index].$homeCity + ", PA, " + $addressInfo[$index].$homeZip;
    if ($positionOnPage) {
        _click(_label($address + "[" + $positionOnPage + "]", _near(_label($fullName))))
    } else {
        _click(_label($address));
    }
}

function selectNoSSNReason($reason) {
    if ($reason) {
        _setSelected(_select("reasonableExplanationForNoSSN"), $reason);
    } else {
        _setSelected(_select("reasonableExplanationForNoSSN"), "Religious Exception");
    }
}

function goToParentCareTakerInformation($mainperson, $indexes, $takingCare) {

    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Parent / Caretaker Information"));
    var $name = $ssapPeople[$mainperson].fullName(true);
    _assertVisible(_paragraph("Is " + $name + " the main person taking care of any of these children?"));

    for (var $i = 0; $i < $indexes.length; $i++) {
        var $name = $ssapPeople[$indexes[$i]].fullName(true);
        _assertVisible(_listItem("/" + $name + "/"));
    }
    _click(_label($takingCare));
}

function goToFullTimeStudent($indexes) {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Full Time Student"));
    _assertVisible(_paragraph("Are any of these people full time students?"));
    for (var $i = 0; $i < $indexes.length; $i++) {
        var $name = $ssapPeople[$indexes[$i]].fullName(true);
        _assertVisible(_listItem("/" + $name + "/"));
    }

}

function selectFullTimeStudent($indexes) {
    if (!$indexes) $indexes = [];

    if ($indexes.length == 0) {
        _click(_label("None of the Above"));
    } else {
        for (var $i = 0; $i < $indexes.length; $i++) {
            var $index = $indexes[$i];
            var $name = $ssapPeople[$index].fullName(true);
            _assertVisible(_label($name));
            _click(_label($name));
        }
    }
}


function goToMaritalStatus($index, $option, $spouseOnApplication, $optionSelected) {

    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Marital Status"));
    var $name = $ssapPeople[$index].fullName(true);
    _assertVisible(_fieldset("Is " + $name + " married?"));
    if (!$optionSelected) {
        _click(_label($option));
        if ($option == "Yes") {
            _assertVisible(_fieldset("Who is " + $name + "'s spouse?"));
            _assertVisible(_label("Someone already on the application"));
            _assertVisible(_label("Someone else who isn't applying for health coverage"));
            if ($spouseOnApplication == "Yes") {
                _click(_label("Someone already on the application"));
                _assertVisible(_paragraph("Select " + $name + "'s spouse."));
                _assertVisible(_button("Select Spouse"));
            } else {
                _click(_label("Someone else who isn't applying for health coverage"));
                _assertVisible(_paragraph("Enter " + $name + " spouse's information."));
                _assertVisible(_button("Add Spouse"));
            }
        }
    }

}

function clickSelectSpouseFromMaritalStatus() {
    _click(_button("Select Spouse"));
    _assertVisible(_heading1("Household Relationship"));

}

function clickaddSpouseFromMaritalStatus() {
    _click(_button("Add Spouse"));
    _assertVisible(_heading1("About Your Household"));
}

function goToPersonalInformation() {
    if (_isVisible(_button("Save & Continue"))) {
        _click(_button("Save & Continue"));
    } else {
        _click(_button("Continue"));
    }
    _assertVisible(_heading1("Personal Information"));

}

function goToCitizenshipImigrationStatus() {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Citizenship/Immigration Status"));

}

function goToEthnicityAndRace() {
    _click(_button("Save & Continue"));
    _assertVisible(_heading1("Ethnicity and Race"));
}

function selectIfChildrenCurrentlyHaveHealthCoverage($indexes) {
    _assertVisible(_fieldset("Do Children listed below currently have health coverage?"));
    if ($indexes) {
        for (var $i = 0; $i < $indexes.length; $i++) {
            var $index = $indexes[$i];
            var $name = $ssapPeople[$index].fullName(true);
            _click(_label($name, _in(_fieldset("Do Children listed below currently have health coverage?"))));
        }
    }
}

function removeMemberFromGroup($group, $memberNum) {
    $group.member.splice($memberNum, 1);
    return $group;
}